

HI-TECH Software PICC-18 Macro Assembler V9.51PL2
                                                       Mon Dec 07 22:12:00 2009


     1                           	processor	18F252
     2                           	opt	pw 80
     3                           	psect	text,global,reloc=2,class=CODE,delta=1
     4                           	psect	const,global,class=CODE,delta=1
     5                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     6                           	psect	bss,global,class=RAM,space=1,delta=1
     7                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     8                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000                     
    98                           ;pic18fxx2.h: 21: static volatile near unsigned 
      +                          char TOSU @ 0xFFF;
    99                           ;pic18fxx2.h: 22: static volatile near unsigned 
      +                          char TOSH @ 0xFFE;
   100                           ;pic18fxx2.h: 23: static volatile near unsigned 
      +                          char TOSL @ 0xFFD;
   101                           ;pic18fxx2.h: 24: static volatile near unsigned 
      +                          char STKPTR @ 0xFFC;
   102                           ;pic18fxx2.h: 25: static volatile near unsigned 
      +                          char PCLATU @ 0xFFB;
   103                           ;pic18fxx2.h: 26: static volatile near unsigned 
      +                          char PCLATH @ 0xFFA;
   104                           ;pic18fxx2.h: 27: static volatile near unsigned 
      +                          char PCL @ 0xFF9;
   105                           ;pic18fxx2.h: 28: static volatile far unsigned c
      +                          har * TBLPTR @ 0xFF6;
   106                           ;pic18fxx2.h: 29: static volatile near unsigned 
      +                          char TBLPTRU @ 0xFF8;
   107                           ;pic18fxx2.h: 30: static volatile near unsigned 
      +                          char TBLPTRH @ 0xFF7;
   108                           ;pic18fxx2.h: 31: static volatile near unsigned 
      +                          char TBLPTRL @ 0xFF6;
   109                           ;pic18fxx2.h: 32: static volatile near unsigned 
      +                          char TABLAT @ 0xFF5;
   110                           ;pic18fxx2.h: 33: static volatile near unsigned 
      +                          char PRODH @ 0xFF4;
   111                           ;pic18fxx2.h: 34: static volatile near unsigned 
      +                          char PRODL @ 0xFF3;
   112                           ;pic18fxx2.h: 35: static volatile near unsigned 
      +                          char INTCON @ 0xFF2;
   113                           ;pic18fxx2.h: 36: static near unsigned char INTC
      +                          ON2 @ 0xFF1;
   114                           ;pic18fxx2.h: 37: static volatile near unsigned 
      +                          char INTCON3 @ 0xFF0;
   115                           ;pic18fxx2.h: 38: static volatile near unsigned 
      +                          char INDF0 @ 0xFEF;
   116                           ;pic18fxx2.h: 39: static volatile near unsigned 
      +                          char POSTINC0 @ 0xFEE;
   117                           ;pic18fxx2.h: 40: static volatile near unsigned 
      +                          char POSTDEC0 @ 0xFED;
   118                           ;pic18fxx2.h: 41: static volatile near unsigned 
      +                          char PREINC0 @ 0xFEC;
   119                           ;pic18fxx2.h: 42: static volatile near unsigned 
      +                          char PLUSW0 @ 0xFEB;
   120                           ;pic18fxx2.h: 43: static volatile near unsigned 
      +                          char FSR0H @ 0xFEA;
   121                           ;pic18fxx2.h: 44: static volatile near unsigned 
      +                          char FSR0L @ 0xFE9;
   122                           ;pic18fxx2.h: 45: static volatile near unsigned 
      +                          char WREG @ 0xFE8;
   123                           ;pic18fxx2.h: 46: static volatile near unsigned 
      +                          char INDF1 @ 0xFE7;
   124                           ;pic18fxx2.h: 47: static volatile near unsigned 
      +                          char POSTINC1 @ 0xFE6;
   125                           ;pic18fxx2.h: 48: static volatile near unsigned 
      +                          char POSTDEC1 @ 0xFE5;
   126                           ;pic18fxx2.h: 49: static volatile near unsigned 
      +                          char PREINC1 @ 0xFE4;
   127                           ;pic18fxx2.h: 50: static volatile near unsigned 
      +                          char PLUSW1 @ 0xFE3;
   128                           ;pic18fxx2.h: 51: static volatile near unsigned 
      +                          char FSR1H @ 0xFE2;
   129                           ;pic18fxx2.h: 52: static volatile near unsigned 
      +                          char FSR1L @ 0xFE1;
   130                           ;pic18fxx2.h: 53: static near unsigned char BSR 
      +                          @ 0xFE0;
   131                           ;pic18fxx2.h: 54: static volatile near unsigned 
      +                          char INDF2 @ 0xFDF;
   132                           ;pic18fxx2.h: 55: static volatile near unsigned 
      +                          char POSTINC2 @ 0xFDE;
   133                           ;pic18fxx2.h: 56: static volatile near unsigned 
      +                          char POSTDEC2 @ 0xFDD;
   134                           ;pic18fxx2.h: 57: static volatile near unsigned 
      +                          char PREINC2 @ 0xFDC;
   135                           ;pic18fxx2.h: 58: static volatile near unsigned 
      +                          char PLUSW2 @ 0xFDB;
   136                           ;pic18fxx2.h: 59: static volatile near unsigned 
      +                          char FSR2H @ 0xFDA;
   137                           ;pic18fxx2.h: 60: static volatile near unsigned 
      +                          char FSR2L @ 0xFD9;
   138                           ;pic18fxx2.h: 61: static volatile near unsigned 
      +                          char STATUS @ 0xFD8;
   139                           ;pic18fxx2.h: 62: static volatile near unsigned 
      +                          int TMR0 @ 0xFD6;
   140                           ;pic18fxx2.h: 63: static volatile near unsigned 
      +                          char TMR0H @ 0xFD7;
   141                           ;pic18fxx2.h: 64: static volatile near unsigned 
      +                          char TMR0L @ 0xFD6;
   142                           ;pic18fxx2.h: 65: static near unsigned char T0CO
      +                          N @ 0xFD5;
   143                           ;pic18fxx2.h: 66: static volatile near unsigned 
      +                          char OSCCON @ 0xFD3;
   144                           ;pic18fxx2.h: 67: static volatile near unsigned 
      +                          char LVDCON @ 0xFD2;
   145                           ;pic18fxx2.h: 68: static near unsigned char WDTC
      +                          ON @ 0xFD1;
   146                           ;pic18fxx2.h: 69: static volatile near unsigned 
      +                          char RCON @ 0xFD0;
   147                           ;pic18fxx2.h: 70: static volatile near unsigned 
      +                          int TMR1 @ 0xFCE;
   148                           ;pic18fxx2.h: 71: static volatile near unsigned 
      +                          char TMR1H @ 0xFCF;
   149                           ;pic18fxx2.h: 72: static volatile near unsigned 
      +                          char TMR1L @ 0xFCE;
   150                           ;pic18fxx2.h: 73: static near unsigned char T1CO
      +                          N @ 0xFCD;
   151                           ;pic18fxx2.h: 74: static volatile near unsigned 
      +                          char TMR2 @ 0xFCC;
   152                           ;pic18fxx2.h: 75: static volatile near unsigned 
      +                          char PR2 @ 0xFCB;
   153                           ;pic18fxx2.h: 76: static near unsigned char T2CO
      +                          N @ 0xFCA;
   154                           ;pic18fxx2.h: 77: static volatile near unsigned 
      +                          char SSPBUF @ 0xFC9;
   155                           ;pic18fxx2.h: 78: static volatile near unsigned 
      +                          char SSPADD @ 0xFC8;
   156                           ;pic18fxx2.h: 79: static volatile near unsigned 
      +                          char SSPSTAT @ 0xFC7;
   157                           ;pic18fxx2.h: 80: static volatile near unsigned 
      +                          char SSPCON1 @ 0xFC6;
   158                           ;pic18fxx2.h: 81: static volatile near unsigned 
      +                          char SSPCON2 @ 0xFC5;
   159                           ;pic18fxx2.h: 82: static volatile near unsigned 
      +                          int ADRES @ 0xFC3;
   160                           ;pic18fxx2.h: 83: static volatile near unsigned 
      +                          char ADRESH @ 0xFC4;
   161                           ;pic18fxx2.h: 84: static volatile near unsigned 
      +                          char ADRESL @ 0xFC3;
   162                           ;pic18fxx2.h: 85: static volatile near unsigned 
      +                          char ADCON0 @ 0xFC2;
   163                           ;pic18fxx2.h: 86: static near unsigned char ADCO
      +                          N1 @ 0xFC1;
   164                           ;pic18fxx2.h: 87: static volatile near unsigned 
      +                          int CCPR1 @ 0xFBE;
   165                           ;pic18fxx2.h: 88: static volatile near unsigned 
      +                          char CCPR1H @ 0xFBF;
   166                           ;pic18fxx2.h: 89: static volatile near unsigned 
      +                          char CCPR1L @ 0xFBE;
   167                           ;pic18fxx2.h: 90: static volatile near unsigned 
      +                          char CCP1CON @ 0xFBD;
   168                           ;pic18fxx2.h: 91: static volatile near unsigned 
      +                          int CCPR2 @ 0xFBB;
   169                           ;pic18fxx2.h: 92: static volatile near unsigned 
      +                          char CCPR2H @ 0xFBC;
   170                           ;pic18fxx2.h: 93: static volatile near unsigned 
      +                          char CCPR2L @ 0xFBB;
   171                           ;pic18fxx2.h: 94: static volatile near unsigned 
      +                          char CCP2CON @ 0xFBA;
   172                           ;pic18fxx2.h: 95: static volatile near unsigned 
      +                          int TMR3 @ 0xFB2;
   173                           ;pic18fxx2.h: 96: static volatile near unsigned 
      +                          char TMR3H @ 0xFB3;
   174                           ;pic18fxx2.h: 97: static volatile near unsigned 
      +                          char TMR3L @ 0xFB2;
   175                           ;pic18fxx2.h: 98: static near unsigned char T3CO
      +                          N @ 0xFB1;
   176                           ;pic18fxx2.h: 99: static near unsigned char SPBR
      +                          G @ 0xFAF;
   177                           ;pic18fxx2.h: 100: static volatile near unsigned
      +                           char RCREG @ 0xFAE;
   178                           ;pic18fxx2.h: 101: static volatile near unsigned
      +                           char TXREG @ 0xFAD;
   179                           ;pic18fxx2.h: 102: static volatile near unsigned
      +                           char TXSTA @ 0xFAC;
   180                           ;pic18fxx2.h: 103: static volatile near unsigned
      +                           char RCSTA @ 0xFAB;
   181                           ;pic18fxx2.h: 104: static volatile near unsigned
      +                           char EEADR @ 0xFA9;
   182                           ;pic18fxx2.h: 105: static volatile near unsigned
      +                           char EEDATA @ 0xFA8;
   183                           ;pic18fxx2.h: 106: static volatile near unsigned
      +                           char EECON2 @ 0xFA7;
   184                           ;pic18fxx2.h: 107: static volatile near unsigned
      +                           char EECON1 @ 0xFA6;
   185                           ;pic18fxx2.h: 108: static near unsigned char IPR
      +                          2 @ 0xFA2;
   186                           ;pic18fxx2.h: 109: static volatile near unsigned
      +                           char PIR2 @ 0xFA1;
   187                           ;pic18fxx2.h: 110: static near unsigned char PIE
      +                          2 @ 0xFA0;
   188                           ;pic18fxx2.h: 111: static near unsigned char IPR
      +                          1 @ 0xF9F;
   189                           ;pic18fxx2.h: 112: static volatile near unsigned
      +                           char PIR1 @ 0xF9E;
   190                           ;pic18fxx2.h: 113: static near unsigned char PIE
      +                          1 @ 0xF9D;
   191                           ;pic18fxx2.h: 114: static volatile near unsigned
      +                           char TRISC @ 0xF94;
   192                           ;pic18fxx2.h: 115: static volatile near unsigned
      +                           char TRISB @ 0xF93;
   193                           ;pic18fxx2.h: 116: static volatile near unsigned
      +                           char TRISA @ 0xF92;
   194                           ;pic18fxx2.h: 117: static volatile near unsigned
      +                           char LATC @ 0xF8B;
   195                           ;pic18fxx2.h: 118: static volatile near unsigned
      +                           char LATB @ 0xF8A;
   196                           ;pic18fxx2.h: 119: static volatile near unsigned
      +                           char LATA @ 0xF89;
   197                           ;pic18fxx2.h: 120: static volatile near unsigned
      +                           char PORTC @ 0xF82;
   198  000000                     _HandleFDD$c2	set	?_HandleFDD
   199                           
   200                           	psect	text
   201                           ;adf.c: 51: void HandleFDD(unsigned char c1, uns
      +                          igned char c2)
   202                           ;adf.c: 52: {
   203  004000  0042               	dw	?_HandleFDD
   204                           ;	_n assigned to ?a_SectorHeaderToFpga+0
   205  000000                     _SectorHeaderToFpga$n	set	?a_SectorHeaderToFpga
   206                           ;       param _dsksyncl assigned to ?_SectorHead
      +                          erToFpga+1
   207  000000                     _SectorHeaderToFpga$dsksyncl	set	?_SectorHeaderT
      +                          oFpga+1
   208                           ;       param _dsksynch assigned to ?_SectorHead
      +                          erToFpga+0
   209  000000                     _SectorHeaderToFpga$dsksynch	set	?_SectorHeaderT
      +                          oFpga
   210                           ;	_i assigned to ?a_SectorGapToFpga+0
   211  000000                     _SectorGapToFpga$i	set	?a_SectorGapToFpga
   212                           ;	_csum assigned to ?a_SectorToFpga+3
   213  000000                     _SectorToFpga$csum	set	?a_SectorToFpga+3
   214                           ;	_c assigned to ?a_SectorToFpga+2
   215  000000                     _SectorToFpga$c	set	?a_SectorToFpga+2
   216                           ;	_i assigned to ?a_SectorToFpga+1
   217  000000                     _SectorToFpga$i	set	?a_SectorToFpga+1
   218                           ;	_sector assigned to ?a_SectorToFpga+0
   219  000000                     _SectorToFpga$sector	set	?a_SectorToFpga
   220                           ;       param _dsksyncl assigned to ?_SectorToFp
      +                          ga+2
   221  000000                     _SectorToFpga$dsksyncl	set	?_SectorToFpga+2
   222                           ;       param _dsksynch assigned to ?_SectorToFp
      +                          ga+1
   223  000000                     _SectorToFpga$dsksynch	set	?_SectorToFpga+1
   224                           ;       param _track assigned to ?_SectorToFpga+
      +                          0
   225  000000                     _SectorToFpga$track	set	?_SectorToFpga
   226                           ;	_checksum assigned to ?a_GetData+8
   227  000000                     _GetData$checksum	set	?a_GetData+8
   228                           ;	_p assigned to ?a_GetData+6
   229  000000                     _GetData$p	set	?a_GetData+6
   230                           ;	_c assigned to ?a_GetData+5
   231  000000                     _GetData$c	set	?a_GetData+5
   232                           ;	_c3 assigned to ?a_GetData+4
   233  000000                     _GetData$c3	set	?a_GetData+4
   234                           ;	_i assigned to ?a_GetData+3
   235  000000                     _GetData$i	set	?a_GetData+3
   236                           ;	_c4 assigned to ?a_GetData+2
   237  000000                     _GetData$c4	set	?a_GetData+2
   238                           ;	_c1 assigned to ?a_GetData+1
   239  000000                     _GetData$c1	set	?a_GetData+1
   240                           ;	_c2 assigned to ?a_GetData+0
   241  000000                     _GetData$c2	set	?a_GetData
   242                           ;	_checksum assigned to ?a_GetHeader+6
   243  000000                     _GetHeader$checksum	set	?a_GetHeader+6
   244                           ;	_c assigned to ?a_GetHeader+5
   245  000000                     _GetHeader$c	set	?a_GetHeader+5
   246                           ;	_c3 assigned to ?a_GetHeader+4
   247  000000                     _GetHeader$c3	set	?a_GetHeader+4
   248                           ;	_c2 assigned to ?a_GetHeader+3
   249  000000                     _GetHeader$c2	set	?a_GetHeader+3
   250                           ;	_c1 assigned to ?a_GetHeader+2
   251  000000                     _GetHeader$c1	set	?a_GetHeader+2
   252                           ;	_c4 assigned to ?a_GetHeader+1
   253  000000                     _GetHeader$c4	set	?a_GetHeader+1
   254                           ;	_i assigned to ?a_GetHeader+0
   255  000000                     _GetHeader$i	set	?a_GetHeader
   256                           ;       param _pSector assigned to ?_GetHeader+2
   257  000000                     _GetHeader$pSector	set	?_GetHeader+2
   258                           ;       param _pTrack assigned to ?_GetHeader+0
   259  000000                     _GetHeader$pTrack	set	?_GetHeader
   260                           ;	_n assigned to ?a_FindSync+4
   261  000000                     _FindSync$n	set	?a_FindSync+4
   262                           ;	_c4 assigned to ?a_FindSync+3
   263  000000                     _FindSync$c4	set	?a_FindSync+3
   264                           ;	_c3 assigned to ?a_FindSync+2
   265  000000                     _FindSync$c3	set	?a_FindSync+2
   266                           ;	_c2 assigned to ?a_FindSync+1
   267  000000                     _FindSync$c2	set	?a_FindSync+1
   268                           ;	_c1 assigned to ?a_FindSync+0
   269  000000                     _FindSync$c1	set	?a_FindSync
   270                           ;       param _drive assigned to ?_FindSync+0
   271  000000                     _FindSync$drive	set	?_FindSync
   272                           ;	_seekSector assigned to ?a_WriteTrack+3
   273  000000                     _WriteTrack$seekSector	set	?a_WriteTrack+3
   274                           ;	_writeSector assigned to ?a_WriteTrack+2
   275  000000                     _WriteTrack$writeSector	set	?a_WriteTrack+2
   276                           ;	_sector assigned to ?a_WriteTrack+1
   277  000000                     _WriteTrack$sector	set	?a_WriteTrack+1
   278                           ;	_writeTrack assigned to ?a_WriteTrack+0
   279  000000                     _WriteTrack$writeTrack	set	?a_WriteTrack
   280                           ;       param _drive assigned to ?_WriteTrack+0
   281  000000                     _WriteTrack$drive	set	?_WriteTrack
   282                           ;	_seekSector assigned to ?a_ReadTrack+9
   283  000000                     _ReadTrack$seekSector	set	?a_ReadTrack+9
   284                           ;	_n assigned to ?a_ReadTrack+7
   285  000000                     _ReadTrack$n	set	?a_ReadTrack+7
   286                           ;	_sector assigned to ?a_ReadTrack+6
   287  000000                     _ReadTrack$sector	set	?a_ReadTrack+6
   288                           ;	_c4 assigned to ?a_ReadTrack+5
   289  000000                     _ReadTrack$c4	set	?a_ReadTrack+5
   290                           ;	_c3 assigned to ?a_ReadTrack+4
   291  000000                     _ReadTrack$c3	set	?a_ReadTrack+4
   292                           ;	_dsksyncl assigned to ?a_ReadTrack+3
   293  000000                     _ReadTrack$dsksyncl	set	?a_ReadTrack+3
   294                           ;	_dsksynch assigned to ?a_ReadTrack+2
   295  000000                     _ReadTrack$dsksynch	set	?a_ReadTrack+2
   296                           ;	_c2 assigned to ?a_ReadTrack+1
   297  000000                     _ReadTrack$c2	set	?a_ReadTrack+1
   298                           ;	_c1 assigned to ?a_ReadTrack+0
   299  000000                     _ReadTrack$c1	set	?a_ReadTrack
   300                           ;       param _drive assigned to ?_ReadTrack+0
   301  000000                     _ReadTrack$drive	set	?_ReadTrack
   302                           ;       param _drive assigned to ?_CheckTrack+0
   303  000000                     _CheckTrack$drive	set	?_CheckTrack
   304                           ;       param _drive assigned to ?_InsertFloppy+
      +                          0
   305  000000                     _InsertFloppy$drive	set	?_InsertFloppy
   306                           ;	_status assigned to ?a_UpdateDriveStatus+0
   307  000000                     _UpdateDriveStatus$status	set	?a_UpdateDriveStat
      +                          us
   308  004002                     _HandleFDD:
   309                           ; errata NOP at function entry point
   310  004002  FFFF               	dw	65535
   311  004004                     f3922:
   312  000000                     
   313                           ; _c1 loaded to fsr2l
   314  004004  6ED9               	movwf	fsr2l,c
   315                           ;adf.c: 53: unsigned char sel;
   316  004006  6AE1               	clrf	fsr1l,c
   317                           ;adf.c: 56: floppy_drives = (c1 >> 4) & 0x03;
   318  004008  38D9               	swapf	fsr2l,w,c
   319  00400A  0B0F               	andlw	15
   320  00400C  0B03               	andlw	3
   321  00400E  6EE1               	movwf	fsr1l,c
   322                           ;adf.c: 58: if (floppy_drives > (0x04-1))
   323  004010  0E03               	movlw	3
   324  004012  64E1               	cpfsgt	fsr1l,c
   325  004014  D001               	goto	l17
   326                           ;adf.c: 59: { floppy_drives = (0x04-1); }
   327  004016  6EE1               	movwf	fsr1l,c
   328  004018                     l17:
   329                           ;adf.c: 61: if (c1 & 0x01)
   330  004018  A0D9               	btfss	fsr2l,0,c
   331  00401A  D01A               	goto	l18
   332                           ;adf.c: 62: {
   333  00401C  8881               	bsf	3969,4,c	;volatile
   334                           ;adf.c: 64: sel = (c1 >> 6) & 0x03;
   335  00401E  44D9               	rlncf	fsr2l,w,c
   336  004020  46E8               	rlncf	wreg,f,c
   337  004022  0B03               	andlw	3
   338  004024  6EE1               	movwf	fsr1l,c
   339                           ;adf.c: 65: df[sel].track = c2;
   340  004026  50E1               	movf	fsr1l,w,c
   341  004028  0D18               	mullw	24
   342  00402A  0E0C               	movlw	low (_df+10)
   343  00402C  24F3               	addwf	prodl,w,c
   344  00402E  6EE9               	movwf	fsr0l,c
   345  004030  0E02               	movlw	high (_df+10)
   346  004032  20F4               	addwfc	prodh,w,c
   347  004034  6EEA               	movwf	fsr0h,c
   348  004036  C042  FFEF         	movff	?_HandleFDD,indf0
   349                           ;adf.c: 66: ReadTrack( & df[sel]);
   350  00403A  50E1               	movf	fsr1l,w,c
   351  00403C  0D18               	mullw	24
   352  00403E  0E02               	movlw	low _df
   353  004040  24F3               	addwf	prodl,w,c
   354  004042  0100               	movlb	__Lparam shr (0+8)
   355  004044  6F43               	movwf	?_ReadTrack^(__Lparam& (0+65280)),b
   356  004046  0E02               	movlw	high _df
   357  004048  20F4               	addwfc	prodh,w,c
   358  00404A  6F44               	movwf	(?_ReadTrack+1)^(__Lparam& (0+65280)),b
   359  00404C  D8D8               	call	_ReadTrack	;wreg free
   360  00404E  D01B               	goto	L6
   361                           ;adf.c: 67: RB4=0;
   362                           ;adf.c: 68: }
   363  004050                     l18:
   364                           ;adf.c: 69: else if (c1 & 0x02)
   365  004050  A2D9               	btfss	fsr2l,1,c
   366  004052  D01A               	goto	l19
   367                           ;adf.c: 70: {
   368  004054  8881               	bsf	3969,4,c	;volatile
   369                           ;adf.c: 72: sel = (c1 >> 6) & 0x03;
   370  004056  44D9               	rlncf	fsr2l,w,c
   371  004058  46E8               	rlncf	wreg,f,c
   372  00405A  0B03               	andlw	3
   373  00405C  6EE1               	movwf	fsr1l,c
   374                           ;adf.c: 73: df[sel].track = c2;
   375  00405E  50E1               	movf	fsr1l,w,c
   376  004060  0D18               	mullw	24
   377  004062  0E0C               	movlw	low (_df+10)
   378  004064  24F3               	addwf	prodl,w,c
   379  004066  6EE9               	movwf	fsr0l,c
   380  004068  0E02               	movlw	high (_df+10)
   381  00406A  20F4               	addwfc	prodh,w,c
   382  00406C  6EEA               	movwf	fsr0h,c
   383  00406E  C042  FFEF         	movff	?_HandleFDD,indf0
   384                           ;adf.c: 74: WriteTrack( & df[sel]);
   385  004072  50E1               	movf	fsr1l,w,c
   386  004074  0D18               	mullw	24
   387  004076  0E02               	movlw	low _df
   388  004078  24F3               	addwf	prodl,w,c
   389  00407A  0100               	movlb	__Lparam shr (0+8)
   390  00407C  6F43               	movwf	?_WriteTrack^(__Lparam& (0+65280)),b
   391  00407E  0E02               	movlw	high _df
   392  004080  20F4               	addwfc	prodh,w,c
   393  004082  6F44               	movwf	(?_WriteTrack+1)^(__Lparam& (0+65280)),b
   394  004084  DAC7               	call	_WriteTrack	;wreg free
   395  004086                     L6:
   396                           ;adf.c: 75: RB4=0;
   397  004086  9881               	bcf	3969,4,c	;volatile
   398  004088                     l19:
   399                           ;adf.c: 76: }
   400  004088  0012               	return	
   401  00408A  FFFF               	dw	65535	; Nop inserted for errata
   402  00408C  D7BB               	goto	f3922
   403  00408E                     __end_of_HandleFDD:
   404                           ;adf.c: 79: void UpdateDriveStatus(void)
   405                           ;adf.c: 80: {
   406  00408E                     _UpdateDriveStatus:
   407                           ; errata NOP at function entry point
   408  00408E  FFFF               	dw	65535
   409  004090                     f3952:
   410  000000                     
   411                           ;adf.c: 81: unsigned char i;
   412  004090  0100               	movlb	__Lparam shr (0+8)
   413  004092  6B42               	clrf	?a_UpdateDriveStatus^(__Lparam& (0+65280))
      +                          ,b
   414                           ;adf.c: 85: for(i=0; i < 0x04; i++)
   415  004094  6AD9               	clrf	fsr2l,c
   416  004096                     l22:
   417                           ;adf.c: 86: { status |= (df[i].status << i); }
   418  004096  CFD9 F000          	movff	fsr2l,btemp
   419  00409A  50D9               	movf	fsr2l,w,c
   420  00409C  0D18               	mullw	24
   421  00409E  0E02               	movlw	low _df
   422  0040A0  24F3               	addwf	prodl,w,c
   423  0040A2  6EE9               	movwf	fsr0l,c
   424  0040A4  0E02               	movlw	high _df
   425  0040A6  20F4               	addwfc	prodh,w,c
   426  0040A8  6EEA               	movwf	fsr0h,c
   427  0040AA  50EF               	movf	indf0,w,c
   428  0040AC  6E01               	movwf	btemp+1,c
   429  0040AE  2A00               	incf	btemp,f,c
   430  0040B0  D002               	goto	u44
   431  0040B2                     u45:
   432  0040B2  90D8               	bcf	status,0,c
   433  0040B4  3601               	rlcf	btemp+1,f,c
   434  0040B6                     u44:
   435  0040B6  2E00               	decfsz	btemp,f,c
   436  0040B8  D7FC               	goto	u45
   437  0040BA  5001               	movf	btemp+1,w,c
   438  0040BC  0100               	movlb	__Lparam shr (0+8)
   439  0040BE  1342               	iorwf	?a_UpdateDriveStatus^(__Lparam& (0+65280)
      +                          ),f,b
   440  0040C0  2AD9               	incf	fsr2l,f,c
   441  0040C2  0E03               	movlw	3
   442  0040C4  64D9               	cpfsgt	fsr2l,c
   443  0040C6  D7E7               	goto	l22
   444                           ;adf.c: 88: RA1=0;
   445  0040C8  9280               	bcf	3968,1,c	;volatile
   446                           ;adf.c: 89: SPI(0x10);
   447  0040CA  0E10               	movlw	16
   448  0040CC  EC35  F03C         	call	_SPI
   449                           ;adf.c: 90: SPI(status);
   450  0040D0  0100               	movlb	__Lparam shr (0+8)
   451  0040D2  5142               	movf	?a_UpdateDriveStatus^(__Lparam& (0+65280))
      +                          ,w
   452  0040D4  EC35  F03C         	call	_SPI
   453                           ;adf.c: 91: RA1=1;
   454  0040D8  8280               	bsf	3968,1,c	;volatile
   455                           ;adf.c: 92: }
   456  0040DA  0012               	return	
   457  0040DC  FFFF               	dw	65535	; Nop inserted for errata
   458  0040DE  D7D8               	goto	f3952
   459  0040E0                     __end_of_UpdateDriveStatus:
   460                           ;adf.c: 96: void InsertFloppy(struct adfTYPE *dr
      +                          ive)
   461                           ;adf.c: 97: {
   462  0040E0  0046               	dw	?_InsertFloppy
   463  0040E2                     _InsertFloppy:
   464                           ; errata NOP at function entry point
   465  0040E2  FFFF               	dw	65535
   466  0040E4                     f3972:
   467  000000                     
   468                           ;adf.c: 98: unsigned char i;
   469  0040E4  EC20  F039         	call	_OsdClear	;wreg free
   470                           ;adf.c: 102: OsdWrite(1,"     Inserting",0);
   471  0040E8  0100               	movlb	__Lparam shr (0+8)
   472  0040EA  0ED9               	movlw	low u19
   473  0040EC  6F5D               	movwf	?_OsdWrite^(__Lparam& (0+65280)),b
   474  0040EE  0E0F               	movlw	high u19
   475  0040F0  6F5E               	movwf	(?_OsdWrite+1)^(__Lparam& (0+65280)),b
   476  0040F2  6B5F               	clrf	(?_OsdWrite+2)^(__Lparam& (0+65280)),b
   477  0040F4  0E01               	movlw	1
   478  0040F6  ECE8  F037         	call	_OsdWrite
   479                           ;adf.c: 103: OsdWrite(2,"     floppy...",0);
   480  0040FA  0100               	movlb	__Lparam shr (0+8)
   481  0040FC  0EE8               	movlw	low u29
   482  0040FE  6F5D               	movwf	?_OsdWrite^(__Lparam& (0+65280)),b
   483  004100  0E0F               	movlw	high u29
   484  004102  6F5E               	movwf	(?_OsdWrite+1)^(__Lparam& (0+65280)),b
   485  004104  6B5F               	clrf	(?_OsdWrite+2)^(__Lparam& (0+65280)),b
   486  004106  0E02               	movlw	2
   487  004108  ECE8  F037         	call	_OsdWrite
   488                           ;adf.c: 106: for (i=0;i<12;i++)
   489  00410C  6AF3               	clrf	prodl,c
   490  00410E                     l26:
   491                           ;adf.c: 107: { drive->name[i]=file.name[i]; }
   492                           ; _drive loaded to fsr2
   493  00410E  C046  FFD9         	movff	?_InsertFloppy,fsr2l
   494  004112  C047  FFDA         	movff	?_InsertFloppy+1,fsr2h
   495  004116  50F3               	movf	prodl,w,c
   496  004118  EE02  F09E         	lfsr	0,_file
   497  00411C  26E9               	addwf	fsr0l,f,c
   498  00411E  0E00               	movlw	0
   499  004120  22EA               	addwfc	fsr0h,f,c
   500  004122  50F3               	movf	prodl,w,c
   501  004124  24D9               	addwf	fsr2l,w,c
   502  004126  6E00               	movwf	btemp,c
   503  004128  0E00               	movlw	0
   504  00412A  20DA               	addwfc	fsr2h,w,c
   505  00412C  6E01               	movwf	btemp+1,c
   506  00412E  0E0C               	movlw	12
   507  004130  2400               	addwf	btemp,w,c
   508  004132  6EE1               	movwf	fsr1l,c
   509  004134  0E00               	movlw	0
   510  004136  2001               	addwfc	btemp+1,w,c
   511  004138  6EE2               	movwf	fsr1h,c
   512  00413A  CFEF FFE7          	movff	indf0,indf1
   513  00413E  2AF3               	incf	prodl,f,c
   514  004140  0E0B               	movlw	11
   515  004142  64F3               	cpfsgt	prodl,c
   516  004144  D7E4               	goto	l26
   517                           ;adf.c: 110: drive->status = 0x01;
   518  004146  0E01               	movlw	1
   519  004148  6EDF               	movwf	indf2,c
   520                           ;adf.c: 113: if (!(file.attributes & (1 << 0)))
   521  00414A  0102               	movlb	(_file+12) shr (0+8)
   522  00414C  B1AA               	btfsc	(_file+12)& (0+255),0,b
   523  00414E  D002               	goto	l29
   524                           ;adf.c: 114: { drive->status |= 0x10; }
   525  004150  0E10               	movlw	16
   526  004152  12DF               	iorwf	indf2,f,c
   527  004154                     l29:
   528                           ;adf.c: 116: drive->firstCluster = file.firstClu
      +                          ster;
   529  004154  EE00 F001          	lfsr	0,1
   530  004158  50D9               	movf	fsr2l,w,c
   531  00415A  26E9               	addwf	fsr0l,f,c
   532  00415C  50DA               	movf	fsr2h,w,c
   533  00415E  22EA               	addwfc	fsr0h,f,c
   534  004160  C2B9  FFEE         	movff	_file+27,postinc0
   535  004164  C2BA  FFEE         	movff	_file+28,postinc0
   536  004168  C2BB  FFEE         	movff	_file+29,postinc0
   537  00416C  C2BC  FFEE         	movff	_file+30,postinc0
   538                           ;adf.c: 117: drive->clusteroffset=drive->firstCl
      +                          uster;
   539  004170  EE10 F001          	lfsr	1,1
   540  004174  50D9               	movf	fsr2l,w,c
   541  004176  26E1               	addwf	fsr1l,f,c
   542  004178  50DA               	movf	fsr2h,w,c
   543  00417A  22E2               	addwfc	fsr1h,f,c
   544  00417C  EE00 F005          	lfsr	0,5
   545  004180  50D9               	movf	fsr2l,w,c
   546  004182  26E9               	addwf	fsr0l,f,c
   547  004184  50DA               	movf	fsr2h,w,c
   548  004186  22EA               	addwfc	fsr0h,f,c
   549  004188  CFE6 FFEE          	movff	postinc1,postinc0
   550  00418C  CFE6 FFEE          	movff	postinc1,postinc0
   551  004190  CFE6 FFEE          	movff	postinc1,postinc0
   552  004194  CFE5 FFED          	movff	postdec1,postdec0
   553  004198  52ED               	movf	postdec0,f,c
   554  00419A  52ED               	movf	postdec0,f,c
   555                           ;adf.c: 118: drive->sectoroffset=0;
   556  00419C  EE00 F009          	lfsr	0,9
   557  0041A0  50D9               	movf	fsr2l,w,c
   558  0041A2  26E9               	addwf	fsr0l,f,c
   559  0041A4  50DA               	movf	fsr2h,w,c
   560  0041A6  22EA               	addwfc	fsr0h,f,c
   561  0041A8  6AEF               	clrf	indf0,c
   562                           ;adf.c: 119: drive->track=0;
   563  0041AA  EE00 F00A          	lfsr	0,10
   564  0041AE  50D9               	movf	fsr2l,w,c
   565  0041B0  26E9               	addwf	fsr0l,f,c
   566  0041B2  50DA               	movf	fsr2h,w,c
   567  0041B4  22EA               	addwfc	fsr0h,f,c
   568  0041B6  6AEF               	clrf	indf0,c
   569                           ;adf.c: 120: drive->trackprev=-1;
   570  0041B8  EE00 F00B          	lfsr	0,11
   571  0041BC  50D9               	movf	fsr2l,w,c
   572  0041BE  26E9               	addwf	fsr0l,f,c
   573  0041C0  50DA               	movf	fsr2h,w,c
   574  0041C2  22EA               	addwfc	fsr0h,f,c
   575  0041C4  0EFF               	movlw	-1
   576  0041C6  6EEF               	movwf	indf0,c
   577                           ;adf.c: 127: }
   578  0041C8  0CFF               	retlw	255
   579  0041CA  FFFF               	dw	65535	; Nop inserted for errata
   580  0041CC  D78B               	goto	f3972
   581  0041CE                     __end_of_InsertFloppy:
   582                           ;adf.c: 132: void CheckTrack(struct adfTYPE *dri
      +                          ve)
   583                           ;adf.c: 133: {
   584  0041CE  0037               	dw	?_CheckTrack
   585  0041D0                     _CheckTrack:
   586                           ; errata NOP at function entry point
   587  0041D0  FFFF               	dw	65535
   588  0041D2                     f4012:
   589  000000                     
   590                           ;adf.c: 134: RA1=0;
   591  0041D2  9280               	bcf	3968,1,c	;volatile
   592                           ;adf.c: 135: SPI(0x00);
   593  0041D4  0E00               	movlw	0
   594  0041D6  EC35  F03C         	call	_SPI
   595                           ;adf.c: 136: SPI(0x00);
   596  0041DA  0E00               	movlw	0
   597  0041DC  EC35  F03C         	call	_SPI
   598                           ;adf.c: 137: SPI(0x00);
   599  0041E0  0E00               	movlw	0
   600  0041E2  EC35  F03C         	call	_SPI
   601                           ;adf.c: 138: SPI(drive->status);
   602  0041E6  C037  FFE9         	movff	?_CheckTrack,fsr0l
   603  0041EA  C038  FFEA         	movff	?_CheckTrack+1,fsr0h
   604  0041EE  50EF               	movf	indf0,w,c
   605  0041F0  EC35  F03C         	call	_SPI
   606                           ;adf.c: 139: RA1=1;
   607  0041F4  8280               	bsf	3968,1,c	;volatile
   608                           ;adf.c: 140: }
   609  0041F6  0012               	return	
   610  0041F8  FFFF               	dw	65535	; Nop inserted for errata
   611  0041FA  D7EB               	goto	f4012
   612  0041FC                     __end_of_CheckTrack:
   613                           ;adf.c: 145: void ReadTrack(struct adfTYPE *driv
      +                          e)
   614                           ;adf.c: 146: {
   615  0041FC  0043               	dw	?_ReadTrack
   616  0041FE                     _ReadTrack:
   617                           ; errata NOP at function entry point
   618  0041FE  FFFF               	dw	65535
   619  004200                     f4022:
   620  000000                     
   621                           ;_drive stored from fsr2
   622                           ;_drive stored from fsr2
   623                           ;adf.c: 147: unsigned char sector;
   624                           ; _drive loaded to fsr2
   625  004200  C043  FFD9         	movff	?_ReadTrack,fsr2l
   626  004204  C044  FFDA         	movff	?_ReadTrack+1,fsr2h
   627  004208  EE00 F00B          	lfsr	0,11
   628  00420C  50D9               	movf	fsr2l,w,c
   629  00420E  26E9               	addwf	fsr0l,f,c
   630  004210  50DA               	movf	fsr2h,w,c
   631  004212  22EA               	addwfc	fsr0h,f,c
   632  004214  50EF               	movf	indf0,w,c
   633  004216  6E00               	movwf	btemp,c
   634  004218  EE00 F00A          	lfsr	0,10
   635  00421C  50D9               	movf	fsr2l,w,c
   636  00421E  26E9               	addwf	fsr0l,f,c
   637  004220  50DA               	movf	fsr2h,w,c
   638  004222  22EA               	addwfc	fsr0h,f,c
   639  004224  50EF               	movf	indf0,w,c
   640  004226  1800               	xorwf	btemp,w,c
   641  004228  E062               	bz	l32
   642                           ;adf.c: 159: {
   643  00422A  EE10 F00A          	lfsr	1,10
   644  00422E  50D9               	movf	fsr2l,w,c
   645  004230  26E1               	addwf	fsr1l,f,c
   646  004232  50DA               	movf	fsr2h,w,c
   647  004234  22E2               	addwfc	fsr1h,f,c
   648  004236  EE00 F00B          	lfsr	0,11
   649  00423A  50D9               	movf	fsr2l,w,c
   650  00423C  26E9               	addwf	fsr0l,f,c
   651  00423E  50DA               	movf	fsr2h,w,c
   652  004240  22EA               	addwfc	fsr0h,f,c
   653  004242  CFE7 FFEF          	movff	indf1,indf0
   654                           ;adf.c: 162: sector = 0;
   655  004246  0100               	movlb	__Lparam shr (0+8)
   656  004248  6B4B               	clrf	(?a_ReadTrack+6)^(__Lparam& (0+65280)),b
   657                           ;adf.c: 164: file.firstCluster = drive->firstClu
      +                          ster;
   658  00424A  EE00 F001          	lfsr	0,1
   659  00424E  50D9               	movf	fsr2l,w,c
   660  004250  26E9               	addwf	fsr0l,f,c
   661  004252  50DA               	movf	fsr2h,w,c
   662  004254  22EA               	addwfc	fsr0h,f,c
   663  004256  CFEE F2B9          	movff	postinc0,_file+27
   664  00425A  CFEE F2BA          	movff	postinc0,_file+28
   665  00425E  CFEE F2BB          	movff	postinc0,_file+29
   666  004262  CFED F2BC          	movff	postdec0,_file+30
   667  004266  52ED               	movf	postdec0,f,c
   668  004268  52ED               	movf	postdec0,f,c
   669                           ;adf.c: 165: seekSector = (unsigned long)drive->
      +                          track;
   670  00426A  EE00 F00A          	lfsr	0,10
   671  00426E  50D9               	movf	fsr2l,w,c
   672  004270  26E9               	addwf	fsr0l,f,c
   673  004272  50DA               	movf	fsr2h,w,c
   674  004274  22EA               	addwfc	fsr0h,f,c
   675  004276  50EF               	movf	indf0,w,c
   676  004278  6F4E               	movwf	(?a_ReadTrack+9)^(__Lparam& (0+65280)),b
   677  00427A  6B4F               	clrf	(?a_ReadTrack+10)^(__Lparam& (0+65280)),b
   678  00427C  6B50               	clrf	(?a_ReadTrack+11)^(__Lparam& (0+65280)),b
   679  00427E  6B51               	clrf	(?a_ReadTrack+12)^(__Lparam& (0+65280)),b
   680                           ;_drive stored from fsr2
   681  004280  CFD9 F043          	movff	fsr2l,?_ReadTrack
   682  004284  CFDA F044          	movff	fsr2h,?_ReadTrack+1
   683                           ;adf.c: 166: seekSector *=11;
   684  004288  0E0B               	movlw	11
   685  00428A  6E04               	movwf	btemp+4,c
   686  00428C  6A05               	clrf	btemp+5,c
   687  00428E  6A06               	clrf	btemp+6,c
   688  004290  6A07               	clrf	btemp+7,c
   689  004292  0E4E               	movlw	low (?a_ReadTrack+9)
   690  004294  6EE9               	movwf	fsr0l,c
   691  004296  0E00               	movlw	high (?a_ReadTrack+9)
   692  004298  6EEA               	movwf	fsr0h,c
   693  00429A  ECD7  F03E         	call	llmul_f
   694                           ;adf.c: 167: FileSeek(&file, seekSector);
   695  00429E  0E9E               	movlw	low _file
   696  0042A0  6FD9               	movwf	?_FileSeek^(__Lparam& (0+65280)),b
   697  0042A2  0E02               	movlw	high _file
   698  0042A4  6FDA               	movwf	(?_FileSeek+1)^(__Lparam& (0+65280)),b
   699  0042A6  C04E  F0DB         	movff	?a_ReadTrack+9,?_FileSeek+2
   700  0042AA  C04F  F0DC         	movff	?a_ReadTrack+10,?_FileSeek+3
   701  0042AE  C050  F0DD         	movff	?a_ReadTrack+11,?_FileSeek+4
   702  0042B2  C051  F0DE         	movff	?a_ReadTrack+12,?_FileSeek+5
   703  0042B6  ECB3  F019         	call	_FileSeek	;wreg free
   704                           ;adf.c: 169: drive->sectoroffset = sector;
   705                           ; _drive loaded to fsr2
   706  0042BA  C043  FFD9         	movff	?_ReadTrack,fsr2l
   707  0042BE  C044  FFDA         	movff	?_ReadTrack+1,fsr2h
   708  0042C2  EE00 F009          	lfsr	0,9
   709  0042C6  50D9               	movf	fsr2l,w,c
   710  0042C8  26E9               	addwf	fsr0l,f,c
   711  0042CA  50DA               	movf	fsr2h,w,c
   712  0042CC  22EA               	addwfc	fsr0h,f,c
   713  0042CE  6AEF               	clrf	indf0,c
   714                           ;adf.c: 170: drive->clusteroffset = file.cluster
      +                          ;
   715  0042D0  EE00 F005          	lfsr	0,5
   716  0042D4  50D9               	movf	fsr2l,w,c
   717  0042D6  26E9               	addwf	fsr0l,f,c
   718  0042D8  50DA               	movf	fsr2h,w,c
   719  0042DA  22EA               	addwfc	fsr0h,f,c
   720  0042DC  C2B5  FFEE         	movff	_file+23,postinc0
   721  0042E0  C2B6  FFEE         	movff	_file+24,postinc0
   722  0042E4  C2B7  FFEE         	movff	_file+25,postinc0
   723  0042E8  C2B8  FFEE         	movff	_file+26,postinc0
   724                           ;adf.c: 171: }
   725  0042EC  D038               	goto	l33
   726  0042EE                     l32:
   727                           ;adf.c: 172: else
   728  0042EE  EE00 F009          	lfsr	0,9
   729  0042F2  50D9               	movf	fsr2l,w,c
   730  0042F4  26E9               	addwf	fsr0l,f,c
   731  0042F6  50DA               	movf	fsr2h,w,c
   732  0042F8  22EA               	addwfc	fsr0h,f,c
   733  0042FA  50EF               	movf	indf0,w,c
   734  0042FC  0100               	movlb	__Lparam shr (0+8)
   735  0042FE  6F4B               	movwf	(?a_ReadTrack+6)^(__Lparam& (0+65280)),b
   736                           ;adf.c: 176: file.cluster = drive->clusteroffset
      +                          ;
   737  004300  EE00 F005          	lfsr	0,5
   738  004304  50D9               	movf	fsr2l,w,c
   739  004306  26E9               	addwf	fsr0l,f,c
   740  004308  50DA               	movf	fsr2h,w,c
   741  00430A  22EA               	addwfc	fsr0h,f,c
   742  00430C  CFEE F2B5          	movff	postinc0,_file+23
   743  004310  CFEE F2B6          	movff	postinc0,_file+24
   744  004314  CFEE F2B7          	movff	postinc0,_file+25
   745  004318  CFED F2B8          	movff	postdec0,_file+26
   746  00431C  52ED               	movf	postdec0,f,c
   747  00431E  52ED               	movf	postdec0,f,c
   748                           ;adf.c: 177: file.sector = (drive->track*11) + s
      +                          ector;
   749  004320  EE00 F00A          	lfsr	0,10
   750  004324  50D9               	movf	fsr2l,w,c
   751  004326  26E9               	addwf	fsr0l,f,c
   752  004328  50DA               	movf	fsr2h,w,c
   753  00432A  22EA               	addwfc	fsr0h,f,c
   754  00432C  50EF               	movf	indf0,w,c
   755  00432E  0D0B               	mullw	11
   756  004330  514B               	movf	(?a_ReadTrack+6)^(__Lparam& (0+65280)),w
   757  004332  24F3               	addwf	prodl,w,c
   758  004334  6E00               	movwf	btemp,c
   759  004336  0E00               	movlw	0
   760  004338  20F4               	addwfc	prodh,w,c
   761  00433A  6E01               	movwf	btemp+1,c
   762  00433C  6A02               	clrf	btemp+2,c
   763  00433E  BE01               	btfsc	btemp+1,7,c
   764  004340  0602               	decf	btemp+2,f,c
   765  004342  5002               	movf	btemp+2,w,c
   766  004344  6E03               	movwf	btemp+3,c
   767  004346  C000  F2AD         	movff	btemp,_file+15
   768  00434A  C001  F2AE         	movff	btemp+1,_file+16
   769  00434E  C002  F2AF         	movff	btemp+2,_file+17
   770  004352  C003  F2B0         	movff	btemp+3,_file+18
   771                           ;_drive stored from fsr2
   772  004356  CFD9 F043          	movff	fsr2l,?_ReadTrack
   773  00435A  CFDA F044          	movff	fsr2h,?_ReadTrack+1
   774  00435E                     l33:
   775                           ;adf.c: 178: }
   776  00435E  9280               	bcf	3968,1,c	;volatile
   777                           ;adf.c: 181: c1 = SPI(0);
   778  004360  0E00               	movlw	0
   779  004362  EC35  F03C         	call	_SPI
   780  004366  0100               	movlb	__Lparam shr (0+8)
   781  004368  6F45               	movwf	?a_ReadTrack^(__Lparam& (0+65280)),b
   782                           ;adf.c: 182: c2 = SPI(0);
   783  00436A  0E00               	movlw	0
   784  00436C  EC35  F03C         	call	_SPI
   785  004370  0100               	movlb	__Lparam shr (0+8)
   786  004372  6F46               	movwf	(?a_ReadTrack+1)^(__Lparam& (0+65280)),b
   787                           ;adf.c: 183: dsksynch = SPI(0);
   788  004374  0E00               	movlw	0
   789  004376  EC35  F03C         	call	_SPI
   790  00437A  0100               	movlb	__Lparam shr (0+8)
   791  00437C  6F47               	movwf	(?a_ReadTrack+2)^(__Lparam& (0+65280)),b
   792                           ;adf.c: 184: dsksyncl = SPI(0);
   793  00437E  0E00               	movlw	0
   794  004380  EC35  F03C         	call	_SPI
   795  004384  0100               	movlb	__Lparam shr (0+8)
   796  004386  6F48               	movwf	(?a_ReadTrack+3)^(__Lparam& (0+65280)),b
   797                           ;adf.c: 185: c3 = 0x3F & SPI(0);
   798  004388  0E00               	movlw	0
   799  00438A  EC35  F03C         	call	_SPI
   800  00438E  0B3F               	andlw	63
   801  004390  0100               	movlb	__Lparam shr (0+8)
   802  004392  6F49               	movwf	(?a_ReadTrack+4)^(__Lparam& (0+65280)),b
   803                           ;adf.c: 186: c4 = SPI(0);
   804  004394  0E00               	movlw	0
   805  004396  EC35  F03C         	call	_SPI
   806  00439A  0100               	movlb	__Lparam shr (0+8)
   807  00439C  6F4A               	movwf	(?a_ReadTrack+5)^(__Lparam& (0+65280)),b
   808                           ;adf.c: 187: RA1=1;
   809  00439E  8280               	bsf	3968,1,c	;volatile
   810                           ;adf.c: 194: if ((c3>0x17) || (c3==0x17 && c4>=0
      +                          x60))
   811  0043A0  0E17               	movlw	23
   812  0043A2  6549               	cpfsgt	(?a_ReadTrack+4)^(__Lparam& (0+65280)),b
   813  0043A4  D001               	goto	u91
   814  0043A6  D006               	goto	u130
   815  0043A8                     u91:
   816  0043A8  5149               	movf	(?a_ReadTrack+4)^(__Lparam& (0+65280)),w
   817  0043AA  0A17               	xorlw	23
   818  0043AC  E13D               	bnz	l36
   819  0043AE  0E5F               	movlw	95
   820  0043B0  654A               	cpfsgt	(?a_ReadTrack+5)^(__Lparam& (0+65280)),b
   821  0043B2  D03A               	goto	l36
   822  0043B4                     u130:
   823                           ;adf.c: 195: {
   824  0043B4  0100               	movlb	__Lparam shr (0+8)
   825  0043B6  6B4B               	clrf	(?a_ReadTrack+6)^(__Lparam& (0+65280)),b
   826                           ;adf.c: 198: file.firstCluster = drive->firstClu
      +                          ster;
   827                           ; _drive loaded to fsr1
   828  0043B8  C043  FFE1         	movff	?_ReadTrack,fsr1l
   829  0043BC  C044  FFE2         	movff	?_ReadTrack+1,fsr1h
   830  0043C0  EE00 F001          	lfsr	0,1
   831  0043C4  50E1               	movf	fsr1l,w,c
   832  0043C6  26E9               	addwf	fsr0l,f,c
   833  0043C8  50E2               	movf	fsr1h,w,c
   834  0043CA  22EA               	addwfc	fsr0h,f,c
   835  0043CC  CFEE F2B9          	movff	postinc0,_file+27
   836  0043D0  CFEE F2BA          	movff	postinc0,_file+28
   837  0043D4  CFEE F2BB          	movff	postinc0,_file+29
   838  0043D8  CFED F2BC          	movff	postdec0,_file+30
   839  0043DC  52ED               	movf	postdec0,f,c
   840  0043DE  52ED               	movf	postdec0,f,c
   841                           ;adf.c: 199: seekSector = (unsigned long)drive->
      +                          track;
   842  0043E0  EE00 F00A          	lfsr	0,10
   843  0043E4  50E1               	movf	fsr1l,w,c
   844  0043E6  26E9               	addwf	fsr0l,f,c
   845  0043E8  50E2               	movf	fsr1h,w,c
   846  0043EA  22EA               	addwfc	fsr0h,f,c
   847  0043EC  50EF               	movf	indf0,w,c
   848  0043EE  6F4E               	movwf	(?a_ReadTrack+9)^(__Lparam& (0+65280)),b
   849  0043F0  6B4F               	clrf	(?a_ReadTrack+10)^(__Lparam& (0+65280)),b
   850  0043F2  6B50               	clrf	(?a_ReadTrack+11)^(__Lparam& (0+65280)),b
   851  0043F4  6B51               	clrf	(?a_ReadTrack+12)^(__Lparam& (0+65280)),b
   852                           ;adf.c: 200: seekSector *=11;
   853  0043F6  0E0B               	movlw	11
   854  0043F8  6E04               	movwf	btemp+4,c
   855  0043FA  6A05               	clrf	btemp+5,c
   856  0043FC  6A06               	clrf	btemp+6,c
   857  0043FE  6A07               	clrf	btemp+7,c
   858  004400  0E4E               	movlw	low (?a_ReadTrack+9)
   859  004402  6EE9               	movwf	fsr0l,c
   860  004404  0E00               	movlw	high (?a_ReadTrack+9)
   861  004406  6EEA               	movwf	fsr0h,c
   862  004408  ECD7  F03E         	call	llmul_f
   863                           ;adf.c: 201: FileSeek(&file, seekSector);
   864  00440C  0E9E               	movlw	low _file
   865  00440E  6FD9               	movwf	?_FileSeek^(__Lparam& (0+65280)),b
   866  004410  0E02               	movlw	high _file
   867  004412  6FDA               	movwf	(?_FileSeek+1)^(__Lparam& (0+65280)),b
   868  004414  C04E  F0DB         	movff	?a_ReadTrack+9,?_FileSeek+2
   869  004418  C04F  F0DC         	movff	?a_ReadTrack+10,?_FileSeek+3
   870  00441C  C050  F0DD         	movff	?a_ReadTrack+11,?_FileSeek+4
   871  004420  C051  F0DE         	movff	?a_ReadTrack+12,?_FileSeek+5
   872  004424  ECB3  F019         	call	_FileSeek	;wreg free
   873  004428                     l36:
   874                           ;adf.c: 202: }
   875                           ;adf.c: 205: {
   876  004428  0100               	movlb	__Lparam shr (0+8)
   877  00442A  0E9E               	movlw	low _file
   878  00442C  6FD9               	movwf	?_FileRead^(__Lparam& (0+65280)),b
   879  00442E  0E02               	movlw	high _file
   880  004430  6FDA               	movwf	(?_FileRead+1)^(__Lparam& (0+65280)),b
   881  004432  EC9B  F01B         	call	_FileRead	;wreg free
   882                           ;adf.c: 208: RA1=0;
   883  004436  9280               	bcf	3968,1,c	;volatile
   884                           ;adf.c: 211: c1 = SPI(0);
   885  004438  0E00               	movlw	0
   886  00443A  EC35  F03C         	call	_SPI
   887  00443E  0100               	movlb	__Lparam shr (0+8)
   888  004440  6F45               	movwf	?a_ReadTrack^(__Lparam& (0+65280)),b
   889                           ;adf.c: 212: c2 = SPI(0);
   890  004442  0E00               	movlw	0
   891  004444  EC35  F03C         	call	_SPI
   892  004448  0100               	movlb	__Lparam shr (0+8)
   893  00444A  6F46               	movwf	(?a_ReadTrack+1)^(__Lparam& (0+65280)),b
   894                           ;adf.c: 213: dsksynch = SPI(0);
   895  00444C  0E00               	movlw	0
   896  00444E  EC35  F03C         	call	_SPI
   897  004452  0100               	movlb	__Lparam shr (0+8)
   898  004454  6F47               	movwf	(?a_ReadTrack+2)^(__Lparam& (0+65280)),b
   899                           ;adf.c: 214: dsksyncl = SPI(0);
   900  004456  0E00               	movlw	0
   901  004458  EC35  F03C         	call	_SPI
   902  00445C  0100               	movlb	__Lparam shr (0+8)
   903  00445E  6F48               	movwf	(?a_ReadTrack+3)^(__Lparam& (0+65280)),b
   904                           ;adf.c: 215: c3 = SPI(0);
   905  004460  0E00               	movlw	0
   906  004462  EC35  F03C         	call	_SPI
   907  004466  0100               	movlb	__Lparam shr (0+8)
   908  004468  6F49               	movwf	(?a_ReadTrack+4)^(__Lparam& (0+65280)),b
   909                           ;adf.c: 216: c4 = SPI(0);
   910  00446A  0E00               	movlw	0
   911  00446C  EC35  F03C         	call	_SPI
   912  004470  0100               	movlb	__Lparam shr (0+8)
   913  004472  6F4A               	movwf	(?a_ReadTrack+5)^(__Lparam& (0+65280)),b
   914                           ; _drive loaded to fsr2
   915  004474  C043  FFD9         	movff	?_ReadTrack,fsr2l
   916  004478  C044  FFDA         	movff	?_ReadTrack+1,fsr2h
   917                           ;adf.c: 218: if ((dsksynch==0x00 && dsksyncl==0x
      +                          00) || (dsksynch==0x89 && dsksyncl==0x14))
   918  00447C  5147               	movf	(?a_ReadTrack+2)^(__Lparam& (0+65280)),w
   919  00447E  B4D8               	btfsc	status,2,c
   920  004480  5148               	movf	(?a_ReadTrack+3)^(__Lparam& (0+65280)),w
   921  004482  E006               	bz	u200
   922  004484  5147               	movf	(?a_ReadTrack+2)^(__Lparam& (0+65280)),w
   923  004486  0A89               	xorlw	-119
   924  004488  E108               	bnz	l38
   925  00448A  5148               	movf	(?a_ReadTrack+3)^(__Lparam& (0+65280)),w
   926  00448C  0A14               	xorlw	20
   927  00448E  E105               	bnz	l38
   928  004490                     u200:
   929                           ;adf.c: 219: {
   930  004490  0E44               	movlw	68
   931  004492  0100               	movlb	__Lparam shr (0+8)
   932  004494  6F47               	movwf	(?a_ReadTrack+2)^(__Lparam& (0+65280)),b
   933                           ;adf.c: 222: dsksyncl = 0x89;
   934  004496  0E89               	movlw	137
   935  004498  6F48               	movwf	(?a_ReadTrack+3)^(__Lparam& (0+65280)),b
   936  00449A                     l38:
   937                           ;adf.c: 223: }
   938  00449A  0E3F               	movlw	63
   939  00449C  0100               	movlb	__Lparam shr (0+8)
   940  00449E  1749               	andwf	(?a_ReadTrack+4)^(__Lparam& (0+65280)),f,
      +                          b
   941                           ;adf.c: 238: if (c2 == drive->track)
   942  0044A0  EE00 F00A          	lfsr	0,10
   943  0044A4  50D9               	movf	fsr2l,w,c
   944  0044A6  26E9               	addwf	fsr0l,f,c
   945  0044A8  50DA               	movf	fsr2h,w,c
   946  0044AA  22EA               	addwfc	fsr0h,f,c
   947  0044AC  50EF               	movf	indf0,w,c
   948  0044AE  1946               	xorwf	(?a_ReadTrack+1)^(__Lparam& (0+65280)),w
   949  0044B0  B4D8               	btfsc	status,2,c
   950                           ;adf.c: 239: {
   951  0044B2  A145               	btfss	?a_ReadTrack^(__Lparam& (0+65280)),0,b
   952  0044B4  D03D               	goto	l39
   953                           ;adf.c: 242: {
   954  0044B6  5149               	movf	(?a_ReadTrack+4)^(__Lparam& (0+65280)),w
   955  0044B8  E10B               	bnz	l41
   956  0044BA  0E04               	movlw	4
   957  0044BC  614A               	cpfslt	(?a_ReadTrack+5)^(__Lparam& (0+65280)),b
   958  0044BE  D008               	goto	l41
   959                           ;adf.c: 244: { SectorHeaderToFpga(c4, dsksynch, 
      +                          dsksyncl); }
   960  0044C0  5147               	movf	(?a_ReadTrack+2)^(__Lparam& (0+65280)),w
   961  0044C2  6F52               	movwf	?_SectorHeaderToFpga^(__Lparam& (0+65280)
      +                          ),b
   962  0044C4  5148               	movf	(?a_ReadTrack+3)^(__Lparam& (0+65280)),w
   963  0044C6  6F53               	movwf	(?_SectorHeaderToFpga+1)^(__Lparam& (0+65
      +                          280)),b
   964  0044C8  514A               	movf	(?a_ReadTrack+5)^(__Lparam& (0+65280)),w
   965  0044CA  EC3E  F028         	call	_SectorHeaderToFpga
   966  0044CE  D030               	goto	l39
   967  0044D0                     l41:
   968                           ;adf.c: 245: else
   969  0044D0  0100               	movlb	__Lparam shr (0+8)
   970  0044D2  EE00 F00A          	lfsr	0,10
   971  0044D6  5143               	movf	?_ReadTrack^(__Lparam& (0+65280)),w
   972  0044D8  26E9               	addwf	fsr0l,f,c
   973  0044DA  5144               	movf	(?_ReadTrack+1)^(__Lparam& (0+65280)),w
   974  0044DC  22EA               	addwfc	fsr0h,f,c
   975  0044DE  50EF               	movf	indf0,w,c
   976  0044E0  6F52               	movwf	?_SectorToFpga^(__Lparam& (0+65280)),b
   977  0044E2  5147               	movf	(?a_ReadTrack+2)^(__Lparam& (0+65280)),w
   978  0044E4  6F53               	movwf	(?_SectorToFpga+1)^(__Lparam& (0+65280)),
      +                          b
   979  0044E6  5148               	movf	(?a_ReadTrack+3)^(__Lparam& (0+65280)),w
   980  0044E8  6F54               	movwf	(?_SectorToFpga+2)^(__Lparam& (0+65280)),
      +                          b
   981  0044EA  514B               	movf	(?a_ReadTrack+6)^(__Lparam& (0+65280)),w
   982  0044EC  ECCF  F026         	call	_SectorToFpga
   983  0044F0  C000  F04C         	movff	btemp,?a_ReadTrack+7
   984  0044F4  C001  F04D         	movff	btemp+1,?a_ReadTrack+8
   985                           ;adf.c: 254: n--;
   986  0044F8  0100               	movlb	__Lparam shr (0+8)
   987  0044FA  074C               	decf	(?a_ReadTrack+7)^(__Lparam& (0+65280)),f,b
   988  0044FC  A0D8               	btfss	status,0,c
   989  0044FE  074D               	decf	(?a_ReadTrack+8)^(__Lparam& (0+65280)),f,b
   990                           ;adf.c: 255: c3 = (n>>8) & 0x3F;
   991  004500  514D               	movf	(?a_ReadTrack+8)^(__Lparam& (0+65280)),w
   992  004502  0B3F               	andlw	63
   993  004504  6ED9               	movwf	fsr2l,c
   994                           ;adf.c: 256: c4 = (unsigned char)n;
   995  004506  514C               	movf	(?a_ReadTrack+7)^(__Lparam& (0+65280)),w
   996  004508  6F4A               	movwf	(?a_ReadTrack+5)^(__Lparam& (0+65280)),b
   997                           ;adf.c: 258: if (c3==0 && c4<4)
   998  00450A  50D9               	movf	fsr2l,w,c
   999  00450C  E10B               	bnz	l43
  1000  00450E  0E04               	movlw	4
  1001  004510  614A               	cpfslt	(?a_ReadTrack+5)^(__Lparam& (0+65280)),b
  1002  004512  D008               	goto	l43
  1003                           ;adf.c: 259: {
  1004  004514  5147               	movf	(?a_ReadTrack+2)^(__Lparam& (0+65280)),w
  1005  004516  6F52               	movwf	?_SectorHeaderToFpga^(__Lparam& (0+65280)
      +                          ),b
  1006  004518  5148               	movf	(?a_ReadTrack+3)^(__Lparam& (0+65280)),w
  1007  00451A  6F53               	movwf	(?_SectorHeaderToFpga+1)^(__Lparam& (0+65
      +                          280)),b
  1008  00451C  514A               	movf	(?a_ReadTrack+5)^(__Lparam& (0+65280)),w
  1009  00451E  EC3E  F028         	call	_SectorHeaderToFpga
  1010                           ;adf.c: 264: }
  1011  004522  D006               	goto	l39
  1012  004524                     l43:
  1013                           ;adf.c: 265: else if (sector == 10)
  1014  004524  0100               	movlb	__Lparam shr (0+8)
  1015  004526  514B               	movf	(?a_ReadTrack+6)^(__Lparam& (0+65280)),w
  1016  004528  0A0A               	xorlw	10
  1017  00452A  B4D8               	btfsc	status,2,c
  1018                           ;adf.c: 266: {
  1019  00452C  EC2D  F028         	call	_SectorGapToFpga	;wreg free
  1020  004530                     l39:
  1021                           ;adf.c: 271: }
  1022  004530  8280               	bsf	3968,1,c	;volatile
  1023                           ;adf.c: 280: if (c2!=drive->track)
  1024                           ; _drive loaded to fsr2
  1025  004532  C043  FFD9         	movff	?_ReadTrack,fsr2l
  1026  004536  C044  FFDA         	movff	?_ReadTrack+1,fsr2h
  1027  00453A  EE00 F00A          	lfsr	0,10
  1028  00453E  50D9               	movf	fsr2l,w,c
  1029  004540  26E9               	addwf	fsr0l,f,c
  1030  004542  50DA               	movf	fsr2h,w,c
  1031  004544  22EA               	addwfc	fsr0h,f,c
  1032  004546  50EF               	movf	indf0,w,c
  1033  004548  0100               	movlb	__Lparam shr (0+8)
  1034  00454A  1946               	xorwf	(?a_ReadTrack+1)^(__Lparam& (0+65280)),w
  1035  00454C  E15F               	bnz	l37
  1036                           ;adf.c: 281: { break; }
  1037                           ;adf.c: 284: if (!(c1 & 0x01))
  1038  00454E  A145               	btfss	?a_ReadTrack^(__Lparam& (0+65280)),0,b
  1039  004550  D05D               	goto	l37
  1040                           ;adf.c: 285: { break; }
  1041                           ;adf.c: 287: sector++;
  1042  004552  0100               	movlb	__Lparam shr (0+8)
  1043  004554  2B4B               	incf	(?a_ReadTrack+6)^(__Lparam& (0+65280)),f,b
  1044                           ;adf.c: 288: if (sector < 11)
  1045  004556  0E0B               	movlw	11
  1046  004558  614B               	cpfslt	(?a_ReadTrack+6)^(__Lparam& (0+65280)),b
  1047  00455A  D007               	goto	l48
  1048                           ;adf.c: 289: { FileNextSector(&file); }
  1049  00455C  0E9E               	movlw	low _file
  1050  00455E  6F65               	movwf	?_FileNextSector^(__Lparam& (0+65280)),b
  1051  004560  0E02               	movlw	high _file
  1052  004562  6F66               	movwf	(?_FileNextSector+1)^(__Lparam& (0+65280)
      +                          ),b
  1053  004564  EC73  F019         	call	_FileNextSector	;wreg free
  1054  004568  D036               	goto	l49
  1055  00456A                     l48:
  1056                           ;adf.c: 290: else
  1057  00456A  0100               	movlb	__Lparam shr (0+8)
  1058  00456C  6B4B               	clrf	(?a_ReadTrack+6)^(__Lparam& (0+65280)),b
  1059                           ;adf.c: 295: file.firstCluster = drive->firstClu
      +                          ster;
  1060  00456E  EE00 F001          	lfsr	0,1
  1061  004572  50D9               	movf	fsr2l,w,c
  1062  004574  26E9               	addwf	fsr0l,f,c
  1063  004576  50DA               	movf	fsr2h,w,c
  1064  004578  22EA               	addwfc	fsr0h,f,c
  1065  00457A  CFEE F2B9          	movff	postinc0,_file+27
  1066  00457E  CFEE F2BA          	movff	postinc0,_file+28
  1067  004582  CFEE F2BB          	movff	postinc0,_file+29
  1068  004586  CFED F2BC          	movff	postdec0,_file+30
  1069  00458A  52ED               	movf	postdec0,f,c
  1070  00458C  52ED               	movf	postdec0,f,c
  1071                           ;adf.c: 296: seekSector = (unsigned long)drive->
      +                          track;
  1072  00458E  EE00 F00A          	lfsr	0,10
  1073  004592  50D9               	movf	fsr2l,w,c
  1074  004594  26E9               	addwf	fsr0l,f,c
  1075  004596  50DA               	movf	fsr2h,w,c
  1076  004598  22EA               	addwfc	fsr0h,f,c
  1077  00459A  50EF               	movf	indf0,w,c
  1078  00459C  6F4E               	movwf	(?a_ReadTrack+9)^(__Lparam& (0+65280)),b
  1079  00459E  6B4F               	clrf	(?a_ReadTrack+10)^(__Lparam& (0+65280)),b
  1080  0045A0  6B50               	clrf	(?a_ReadTrack+11)^(__Lparam& (0+65280)),b
  1081  0045A2  6B51               	clrf	(?a_ReadTrack+12)^(__Lparam& (0+65280)),b
  1082                           ;adf.c: 297: seekSector *=11;
  1083  0045A4  0E0B               	movlw	11
  1084  0045A6  6E04               	movwf	btemp+4,c
  1085  0045A8  6A05               	clrf	btemp+5,c
  1086  0045AA  6A06               	clrf	btemp+6,c
  1087  0045AC  6A07               	clrf	btemp+7,c
  1088  0045AE  0E4E               	movlw	low (?a_ReadTrack+9)
  1089  0045B0  6EE9               	movwf	fsr0l,c
  1090  0045B2  0E00               	movlw	high (?a_ReadTrack+9)
  1091  0045B4  6EEA               	movwf	fsr0h,c
  1092  0045B6  ECD7  F03E         	call	llmul_f
  1093                           ;adf.c: 298: FileSeek(&file, seekSector);
  1094  0045BA  0E9E               	movlw	low _file
  1095  0045BC  6FD9               	movwf	?_FileSeek^(__Lparam& (0+65280)),b
  1096  0045BE  0E02               	movlw	high _file
  1097  0045C0  6FDA               	movwf	(?_FileSeek+1)^(__Lparam& (0+65280)),b
  1098  0045C2  C04E  F0DB         	movff	?a_ReadTrack+9,?_FileSeek+2
  1099  0045C6  C04F  F0DC         	movff	?a_ReadTrack+10,?_FileSeek+3
  1100  0045CA  C050  F0DD         	movff	?a_ReadTrack+11,?_FileSeek+4
  1101  0045CE  C051  F0DE         	movff	?a_ReadTrack+12,?_FileSeek+5
  1102  0045D2  ECB3  F019         	call	_FileSeek	;wreg free
  1103  0045D6                     l49:
  1104                           ;adf.c: 299: }
  1105                           ; _drive loaded to fsr1
  1106  0045D6  C043  FFE1         	movff	?_ReadTrack,fsr1l
  1107  0045DA  C044  FFE2         	movff	?_ReadTrack+1,fsr1h
  1108  0045DE  EE00 F009          	lfsr	0,9
  1109  0045E2  50E1               	movf	fsr1l,w,c
  1110  0045E4  26E9               	addwf	fsr0l,f,c
  1111  0045E6  50E2               	movf	fsr1h,w,c
  1112  0045E8  22EA               	addwfc	fsr0h,f,c
  1113  0045EA  C04B  FFEF         	movff	?a_ReadTrack+6,indf0
  1114                           ;adf.c: 303: drive->clusteroffset = file.cluster
      +                          ;
  1115  0045EE  EE00 F005          	lfsr	0,5
  1116  0045F2  50E1               	movf	fsr1l,w,c
  1117  0045F4  26E9               	addwf	fsr0l,f,c
  1118  0045F6  50E2               	movf	fsr1h,w,c
  1119  0045F8  22EA               	addwfc	fsr0h,f,c
  1120  0045FA  C2B5  FFEE         	movff	_file+23,postinc0
  1121  0045FE  C2B6  FFEE         	movff	_file+24,postinc0
  1122  004602  C2B7  FFEE         	movff	_file+25,postinc0
  1123  004606  C2B8  FFEE         	movff	_file+26,postinc0
  1124  00460A  D70E               	goto	l36
  1125  00460C                     l37:
  1126                           ;adf.c: 308: }
  1127  00460C  0012               	return	
  1128  00460E  FFFF               	dw	65535	; Nop inserted for errata
  1129  004610  D5F7               	goto	f4022
  1130  004612                     __end_of_ReadTrack:
  1131                           ;adf.c: 317: void WriteTrack(struct adfTYPE *dri
      +                          ve)
  1132                           ;adf.c: 318: {
  1133  004612  0043               	dw	?_WriteTrack
  1134  004614                     _WriteTrack:
  1135                           ; errata NOP at function entry point
  1136  004614  FFFF               	dw	65535
  1137  004616                     f4092:
  1138  000000                     
  1139                           ;adf.c: 319: unsigned char sector;
  1140  004616  0100               	movlb	__Lparam shr (0+8)
  1141  004618  EE00 F001          	lfsr	0,1
  1142  00461C  5143               	movf	?_WriteTrack^(__Lparam& (0+65280)),w
  1143  00461E  26E9               	addwf	fsr0l,f,c
  1144  004620  5144               	movf	(?_WriteTrack+1)^(__Lparam& (0+65280)),w
  1145  004622  22EA               	addwfc	fsr0h,f,c
  1146  004624  CFEE F2B9          	movff	postinc0,_file+27
  1147  004628  CFEE F2BA          	movff	postinc0,_file+28
  1148  00462C  CFEE F2BB          	movff	postinc0,_file+29
  1149  004630  CFED F2BC          	movff	postdec0,_file+30
  1150  004634  52ED               	movf	postdec0,f,c
  1151  004636  52ED               	movf	postdec0,f,c
  1152                           ;adf.c: 326: seekSector = (unsigned long)drive->
      +                          track;
  1153  004638  EE00 F00A          	lfsr	0,10
  1154  00463C  5143               	movf	?_WriteTrack^(__Lparam& (0+65280)),w
  1155  00463E  26E9               	addwf	fsr0l,f,c
  1156  004640  5144               	movf	(?_WriteTrack+1)^(__Lparam& (0+65280)),w
  1157  004642  22EA               	addwfc	fsr0h,f,c
  1158  004644  50EF               	movf	indf0,w,c
  1159  004646  6F48               	movwf	(?a_WriteTrack+3)^(__Lparam& (0+65280)),b
  1160  004648  6B49               	clrf	(?a_WriteTrack+4)^(__Lparam& (0+65280)),b
  1161  00464A  6B4A               	clrf	(?a_WriteTrack+5)^(__Lparam& (0+65280)),b
  1162  00464C  6B4B               	clrf	(?a_WriteTrack+6)^(__Lparam& (0+65280)),b
  1163                           ;adf.c: 327: seekSector *=11;
  1164  00464E  0E0B               	movlw	11
  1165  004650  6E04               	movwf	btemp+4,c
  1166  004652  6A05               	clrf	btemp+5,c
  1167  004654  6A06               	clrf	btemp+6,c
  1168  004656  6A07               	clrf	btemp+7,c
  1169  004658  0E48               	movlw	low (?a_WriteTrack+3)
  1170  00465A  6EE9               	movwf	fsr0l,c
  1171  00465C  0E00               	movlw	high (?a_WriteTrack+3)
  1172  00465E  6EEA               	movwf	fsr0h,c
  1173  004660  ECD7  F03E         	call	llmul_f
  1174                           ;adf.c: 328: FileSeek(&file, seekSector);
  1175  004664  0E9E               	movlw	low _file
  1176  004666  6FD9               	movwf	?_FileSeek^(__Lparam& (0+65280)),b
  1177  004668  0E02               	movlw	high _file
  1178  00466A  6FDA               	movwf	(?_FileSeek+1)^(__Lparam& (0+65280)),b
  1179  00466C  C048  F0DB         	movff	?a_WriteTrack+3,?_FileSeek+2
  1180  004670  C049  F0DC         	movff	?a_WriteTrack+4,?_FileSeek+3
  1181  004674  C04A  F0DD         	movff	?a_WriteTrack+5,?_FileSeek+4
  1182  004678  C04B  F0DE         	movff	?a_WriteTrack+6,?_FileSeek+5
  1183  00467C  ECB3  F019         	call	_FileSeek	;wreg free
  1184                           ;adf.c: 330: sector = 0;
  1185  004680  0100               	movlb	__Lparam shr (0+8)
  1186  004682  6B46               	clrf	(?a_WriteTrack+1)^(__Lparam& (0+65280)),b
  1187                           ;adf.c: 333: drive->trackprev = drive->track + 1
      +                          ;
  1188                           ; _drive loaded to fsr2
  1189  004684  C043  FFD9         	movff	?_WriteTrack,fsr2l
  1190  004688  C044  FFDA         	movff	?_WriteTrack+1,fsr2h
  1191  00468C  EE10 F00B          	lfsr	1,11
  1192  004690  50D9               	movf	fsr2l,w,c
  1193  004692  26E1               	addwf	fsr1l,f,c
  1194  004694  50DA               	movf	fsr2h,w,c
  1195  004696  22E2               	addwfc	fsr1h,f,c
  1196  004698  EE00 F00A          	lfsr	0,10
  1197  00469C  50D9               	movf	fsr2l,w,c
  1198  00469E  26E9               	addwf	fsr0l,f,c
  1199  0046A0  50DA               	movf	fsr2h,w,c
  1200  0046A2  22EA               	addwfc	fsr0h,f,c
  1201  0046A4  50EF               	movf	indf0,w,c
  1202  0046A6  6E00               	movwf	btemp,c
  1203  0046A8  2800               	incf	btemp,w,c
  1204  0046AA  6EE7               	movwf	indf1,c
  1205                           ;adf.c: 339: while (FindSync(drive))
  1206  0046AC                     l51:
  1207  0046AC  C043  F04C         	movff	?_WriteTrack,?_FindSync
  1208  0046B0  C044  F04D         	movff	?_WriteTrack+1,?_FindSync+1
  1209  0046B4  D89A               	call	_FindSync	;wreg free
  1210  0046B6  6E00               	movwf	btemp,c
  1211  0046B8  C000  F002         	movff	btemp,btemp+2
  1212  0046BC  6A03               	clrf	btemp+3,c
  1213  0046BE  5003               	movf	btemp+3,w,c
  1214  0046C0  1002               	iorwf	btemp+2,w,c
  1215  0046C2  E101 D08E          	bz	u400
  1216                           ;adf.c: 340: {
  1217  0046C6  0100               	movlb	__Lparam shr (0+8)
  1218  0046C8  0E45               	movlw	low ?a_WriteTrack
  1219  0046CA  6F4C               	movwf	?_GetHeader^(__Lparam& (0+65280)),b
  1220  0046CC  0E00               	movlw	high ?a_WriteTrack
  1221  0046CE  6F4D               	movwf	(?_GetHeader+1)^(__Lparam& (0+65280)),b
  1222  0046D0  0E47               	movlw	low (?a_WriteTrack+2)
  1223  0046D2  6F4E               	movwf	(?_GetHeader+2)^(__Lparam& (0+65280)),b
  1224  0046D4  0E00               	movlw	high (?a_WriteTrack+2)
  1225  0046D6  6F4F               	movwf	(?_GetHeader+3)^(__Lparam& (0+65280)),b
  1226  0046D8  D8E1               	call	_GetHeader	;wreg free
  1227  0046DA  6E00               	movwf	btemp,c
  1228  0046DC  C000  F002         	movff	btemp,btemp+2
  1229  0046E0  6A03               	clrf	btemp+3,c
  1230  0046E2  5003               	movf	btemp+3,w,c
  1231  0046E4  1002               	iorwf	btemp+2,w,c
  1232  0046E6  E06F               	bz	l54
  1233                           ;adf.c: 342: {
  1234  0046E8  0100               	movlb	__Lparam shr (0+8)
  1235  0046EA  EE00 F00A          	lfsr	0,10
  1236  0046EE  5143               	movf	?_WriteTrack^(__Lparam& (0+65280)),w
  1237  0046F0  26E9               	addwf	fsr0l,f,c
  1238  0046F2  5144               	movf	(?_WriteTrack+1)^(__Lparam& (0+65280)),w
  1239  0046F4  22EA               	addwfc	fsr0h,f,c
  1240  0046F6  50EF               	movf	indf0,w,c
  1241  0046F8  1945               	xorwf	?a_WriteTrack^(__Lparam& (0+65280)),w
  1242  0046FA  E049               	bz	l56
  1243  0046FC  D061               	goto	l55
  1244                           ;adf.c: 345: {
  1245  0046FE                     l57:
  1246                           ;adf.c: 347: {
  1247  0046FE  0100               	movlb	__Lparam shr (0+8)
  1248  004700  5147               	movf	(?a_WriteTrack+2)^(__Lparam& (0+65280)),w
  1249  004702  6146               	cpfslt	(?a_WriteTrack+1)^(__Lparam& (0+65280)),
      +                          b
  1250  004704  D009               	goto	l59
  1251                           ;adf.c: 349: {
  1252  004706  0E9E               	movlw	low _file
  1253  004708  6F65               	movwf	?_FileNextSector^(__Lparam& (0+65280)),b
  1254  00470A  0E02               	movlw	high _file
  1255  00470C  6F66               	movwf	(?_FileNextSector+1)^(__Lparam& (0+65280)
      +                          ),b
  1256  00470E  EC73  F019         	call	_FileNextSector	;wreg free
  1257                           ;adf.c: 351: sector++;
  1258  004712  0100               	movlb	__Lparam shr (0+8)
  1259  004714  2B46               	incf	(?a_WriteTrack+1)^(__Lparam& (0+65280)),f,
      +                          b
  1260                           ;adf.c: 352: }
  1261  004716  D03B               	goto	l56
  1262  004718                     l59:
  1263                           ;adf.c: 353: else
  1264                           ; _drive loaded to fsr1
  1265  004718  C043  FFE1         	movff	?_WriteTrack,fsr1l
  1266  00471C  C044  FFE2         	movff	?_WriteTrack+1,fsr1h
  1267  004720  EE00 F001          	lfsr	0,1
  1268  004724  50E1               	movf	fsr1l,w,c
  1269  004726  26E9               	addwf	fsr0l,f,c
  1270  004728  50E2               	movf	fsr1h,w,c
  1271  00472A  22EA               	addwfc	fsr0h,f,c
  1272  00472C  CFEE F2B9          	movff	postinc0,_file+27
  1273  004730  CFEE F2BA          	movff	postinc0,_file+28
  1274  004734  CFEE F2BB          	movff	postinc0,_file+29
  1275  004738  CFED F2BC          	movff	postdec0,_file+30
  1276  00473C  52ED               	movf	postdec0,f,c
  1277  00473E  52ED               	movf	postdec0,f,c
  1278                           ;adf.c: 356: seekSector = (unsigned long)drive->
      +                          track;
  1279  004740  EE00 F00A          	lfsr	0,10
  1280  004744  50E1               	movf	fsr1l,w,c
  1281  004746  26E9               	addwf	fsr0l,f,c
  1282  004748  50E2               	movf	fsr1h,w,c
  1283  00474A  22EA               	addwfc	fsr0h,f,c
  1284  00474C  50EF               	movf	indf0,w,c
  1285  00474E  0100               	movlb	__Lparam shr (0+8)
  1286  004750  6F48               	movwf	(?a_WriteTrack+3)^(__Lparam& (0+65280)),b
  1287  004752  6B49               	clrf	(?a_WriteTrack+4)^(__Lparam& (0+65280)),b
  1288  004754  6B4A               	clrf	(?a_WriteTrack+5)^(__Lparam& (0+65280)),b
  1289  004756  6B4B               	clrf	(?a_WriteTrack+6)^(__Lparam& (0+65280)),b
  1290                           ;adf.c: 357: seekSector *=11;
  1291  004758  0E0B               	movlw	11
  1292  00475A  6E04               	movwf	btemp+4,c
  1293  00475C  6A05               	clrf	btemp+5,c
  1294  00475E  6A06               	clrf	btemp+6,c
  1295  004760  6A07               	clrf	btemp+7,c
  1296  004762  0E48               	movlw	low (?a_WriteTrack+3)
  1297  004764  6EE9               	movwf	fsr0l,c
  1298  004766  0E00               	movlw	high (?a_WriteTrack+3)
  1299  004768  6EEA               	movwf	fsr0h,c
  1300  00476A  ECD7  F03E         	call	llmul_f
  1301                           ;adf.c: 358: FileSeek(&file, seekSector);
  1302  00476E  0E9E               	movlw	low _file
  1303  004770  6FD9               	movwf	?_FileSeek^(__Lparam& (0+65280)),b
  1304  004772  0E02               	movlw	high _file
  1305  004774  6FDA               	movwf	(?_FileSeek+1)^(__Lparam& (0+65280)),b
  1306  004776  C048  F0DB         	movff	?a_WriteTrack+3,?_FileSeek+2
  1307  00477A  C049  F0DC         	movff	?a_WriteTrack+4,?_FileSeek+3
  1308  00477E  C04A  F0DD         	movff	?a_WriteTrack+5,?_FileSeek+4
  1309  004782  C04B  F0DE         	movff	?a_WriteTrack+6,?_FileSeek+5
  1310  004786  ECB3  F019         	call	_FileSeek	;wreg free
  1311                           ;adf.c: 360: sector = 0;
  1312  00478A  0100               	movlb	__Lparam shr (0+8)
  1313  00478C  6B46               	clrf	(?a_WriteTrack+1)^(__Lparam& (0+65280)),b
  1314  00478E                     l56:
  1315  00478E  0100               	movlb	__Lparam shr (0+8)
  1316  004790  5147               	movf	(?a_WriteTrack+2)^(__Lparam& (0+65280)),w
  1317  004792  6346               	cpfseq	(?a_WriteTrack+1)^(__Lparam& (0+65280)),
      +                          b
  1318  004794  D7B4               	goto	l57
  1319                           ;adf.c: 361: }
  1320  004796  D9C2               	call	_GetData	;wreg free
  1321  004798  0900               	iorlw	0
  1322  00479A  E015               	bz	l54
  1323                           ;adf.c: 366: {
  1324  00479C  C043  FFE9         	movff	?_WriteTrack,fsr0l
  1325  0047A0  C044  FFEA         	movff	?_WriteTrack+1,fsr0h
  1326  0047A4  50EF               	movf	indf0,w,c
  1327  0047A6  6E00               	movwf	btemp,c
  1328  0047A8  A800               	btfss	btemp,4,c
  1329  0047AA  D008               	goto	l62
  1330                           ;adf.c: 368: { FileWrite(&file); }
  1331  0047AC  0100               	movlb	__Lparam shr (0+8)
  1332  0047AE  0E9E               	movlw	low _file
  1333  0047B0  6FD9               	movwf	?_FileWrite^(__Lparam& (0+65280)),b
  1334  0047B2  0E02               	movlw	high _file
  1335  0047B4  6FDA               	movwf	(?_FileWrite+1)^(__Lparam& (0+65280)),b
  1336  0047B6  ECB3  F01B         	call	_FileWrite	;wreg free
  1337  0047BA  D005               	goto	l54
  1338  0047BC                     l62:
  1339                           ;adf.c: 369: else
  1340  0047BC  0E1E               	movlw	30
  1341  0047BE  D001               	goto	L7
  1342                           ;adf.c: 375: }
  1343  0047C0                     l55:
  1344                           ;adf.c: 378: else
  1345  0047C0  0E1B               	movlw	27
  1346  0047C2                     L7:
  1347  0047C2  CFE8 F5FF          	movff	wreg,_Error
  1348  0047C6                     l54:
  1349                           ;adf.c: 382: }
  1350  0047C6  0105               	movlb	_Error shr (0+8)
  1351  0047C8  53FF               	movf	_Error& (0+255),f,b
  1352  0047CA  E101 D76F          	bz	l51
  1353                           ;adf.c: 386: {
  1354  0047CE  0100               	movlb	__Lparam shr (0+8)
  1355  0047D0  0ECC               	movlw	low u39
  1356  0047D2  6F4C               	movwf	?_ErrorMessage^(__Lparam& (0+65280)),b
  1357  0047D4  0E0F               	movlw	high u39
  1358  0047D6  6F4D               	movwf	(?_ErrorMessage+1)^(__Lparam& (0+65280)),
      +                          b
  1359  0047D8  C5FF  F04E         	movff	_Error,?_ErrorMessage+2
  1360  0047DC  ECAD  F012         	call	_ErrorMessage	;wreg free
  1361  0047E0  D765               	goto	l51
  1362  0047E2                     u400:
  1363                           ;adf.c: 391: }
  1364  0047E2  0012               	return	
  1365  0047E4  FFFF               	dw	65535	; Nop inserted for errata
  1366  0047E6  D717               	goto	f4092
  1367  0047E8                     __end_of_WriteTrack:
  1368                           ;adf.c: 399: unsigned char FindSync(struct adfTY
      +                          PE * drive)
  1369                           ;adf.c: 400: {
  1370  0047E8  004C               	dw	?_FindSync
  1371  0047EA                     _FindSync:
  1372                           ; errata NOP at function entry point
  1373  0047EA  FFFF               	dw	65535
  1374  0047EC                     f4152:
  1375  000000                     
  1376  0047EC  D025               	goto	l68
  1377                           ;adf.c: 419: { break; }
  1378  0047EE                     l72:
  1379                           ;adf.c: 421: n = ((c3 & 0x3F) << 8) + c4;
  1380  0047EE  0100               	movlb	__Lparam shr (0+8)
  1381  0047F0  5150               	movf	(?a_FindSync+2)^(__Lparam& (0+65280)),w
  1382  0047F2  0B3F               	andlw	63
  1383  0047F4  6F53               	movwf	(?a_FindSync+5)^(__Lparam& (0+65280)),b
  1384  0047F6  C051  F052         	movff	?a_FindSync+3,?a_FindSync+4
  1385                           ;adf.c: 423: while (n--)
  1386  0047FA                     l73:
  1387  0047FA  0100               	movlb	__Lparam shr (0+8)
  1388  0047FC  5152               	movf	(?a_FindSync+4)^(__Lparam& (0+65280)),w
  1389  0047FE  6E00               	movwf	btemp,c
  1390  004800  5153               	movf	(?a_FindSync+5)^(__Lparam& (0+65280)),w
  1391  004802  6E01               	movwf	btemp+1,c
  1392  004804  0752               	decf	(?a_FindSync+4)^(__Lparam& (0+65280)),f,b
  1393  004806  0E00               	movlw	0
  1394  004808  5B53               	subwfb	(?a_FindSync+5)^(__Lparam& (0+65280)),f,
      +                          b
  1395  00480A  5001               	movf	btemp+1,w,c
  1396  00480C  1000               	iorwf	btemp,w,c
  1397  00480E  E013               	bz	u490
  1398                           ;adf.c: 424: {
  1399  004810  0E00               	movlw	0
  1400  004812  EC35  F03C         	call	_SPI
  1401  004816  0100               	movlb	__Lparam shr (0+8)
  1402  004818  6F50               	movwf	(?a_FindSync+2)^(__Lparam& (0+65280)),b
  1403                           ;adf.c: 426: c4 = SPI(0);
  1404  00481A  0E00               	movlw	0
  1405  00481C  EC35  F03C         	call	_SPI
  1406  004820  0100               	movlb	__Lparam shr (0+8)
  1407  004822  6F51               	movwf	(?a_FindSync+3)^(__Lparam& (0+65280)),b
  1408                           ;adf.c: 427: if (c3==0x44 && c4==0x89)
  1409  004824  5150               	movf	(?a_FindSync+2)^(__Lparam& (0+65280)),w
  1410  004826  0A44               	xorlw	68
  1411  004828  E1E8               	bnz	l73
  1412  00482A  5151               	movf	(?a_FindSync+3)^(__Lparam& (0+65280)),w
  1413  00482C  0A89               	xorlw	-119
  1414  00482E  E1E5               	bnz	l73
  1415                           ;adf.c: 428: {
  1416  004830  8280               	bsf	3968,1,c	;volatile
  1417                           ;adf.c: 433: return 1;
  1418  004832  0E01               	movlw	1
  1419  004834  D02F               	goto	l66
  1420  004836                     u490:
  1421                           ;adf.c: 434: }
  1422  004836  8280               	bsf	3968,1,c	;volatile
  1423  004838                     l68:
  1424                           ;adf.c: 401: unsigned char c1, c2, c3, c4;
  1425                           ;adf.c: 405: {
  1426  004838  9280               	bcf	3968,1,c	;volatile
  1427                           ;adf.c: 407: c1 = SPI(0);
  1428  00483A  0E00               	movlw	0
  1429  00483C  EC35  F03C         	call	_SPI
  1430  004840  0100               	movlb	__Lparam shr (0+8)
  1431  004842  6F4E               	movwf	?a_FindSync^(__Lparam& (0+65280)),b
  1432                           ;adf.c: 408: c2 = SPI(0);
  1433  004844  0E00               	movlw	0
  1434  004846  EC35  F03C         	call	_SPI
  1435  00484A  0100               	movlb	__Lparam shr (0+8)
  1436  00484C  6F4F               	movwf	(?a_FindSync+1)^(__Lparam& (0+65280)),b
  1437                           ;adf.c: 409: if (!(c1 & 0x02))
  1438  00484E  A34E               	btfss	?a_FindSync^(__Lparam& (0+65280)),1,b
  1439  004850  D01F               	goto	l69
  1440                           ;adf.c: 410: { break; }
  1441                           ;adf.c: 411: if (c2 != drive->track)
  1442  004852  0100               	movlb	__Lparam shr (0+8)
  1443  004854  EE00 F00A          	lfsr	0,10
  1444  004858  514C               	movf	?_FindSync^(__Lparam& (0+65280)),w
  1445  00485A  26E9               	addwf	fsr0l,f,c
  1446  00485C  514D               	movf	(?_FindSync+1)^(__Lparam& (0+65280)),w
  1447  00485E  22EA               	addwfc	fsr0h,f,c
  1448  004860  50EF               	movf	indf0,w,c
  1449  004862  194F               	xorwf	(?a_FindSync+1)^(__Lparam& (0+65280)),w
  1450  004864  E115               	bnz	l69
  1451                           ;adf.c: 412: { break; }
  1452                           ;adf.c: 413: SPI(0);
  1453  004866  0E00               	movlw	0
  1454  004868  EC35  F03C         	call	_SPI
  1455                           ;adf.c: 414: SPI(0);
  1456  00486C  0E00               	movlw	0
  1457  00486E  EC35  F03C         	call	_SPI
  1458                           ;adf.c: 415: c3 = SPI(0) & 0xBF;
  1459  004872  0E00               	movlw	0
  1460  004874  EC35  F03C         	call	_SPI
  1461  004878  0BBF               	andlw	-65
  1462  00487A  0100               	movlb	__Lparam shr (0+8)
  1463  00487C  6F50               	movwf	(?a_FindSync+2)^(__Lparam& (0+65280)),b
  1464                           ;adf.c: 416: c4 = SPI(0);
  1465  00487E  0E00               	movlw	0
  1466  004880  EC35  F03C         	call	_SPI
  1467  004884  0100               	movlb	__Lparam shr (0+8)
  1468  004886  6F51               	movwf	(?a_FindSync+3)^(__Lparam& (0+65280)),b
  1469                           ;adf.c: 418: if (c3==0 && c4==0)
  1470  004888  5150               	movf	(?a_FindSync+2)^(__Lparam& (0+65280)),w
  1471  00488A  E1B1               	bnz	l72
  1472  00488C  5151               	movf	(?a_FindSync+3)^(__Lparam& (0+65280)),w
  1473  00488E  E1AF               	bnz	l72
  1474  004890                     l69:
  1475                           ;adf.c: 437: }
  1476  004890  8280               	bsf	3968,1,c	;volatile
  1477                           ;adf.c: 441: return 0;
  1478  004892  0E00               	movlw	0
  1479                           ;adf.c: 442: }
  1480  004894                     l66:
  1481  004894  0012               	return	
  1482  004896  FFFF               	dw	65535	; Nop inserted for errata
  1483  004898  D7A9               	goto	f4152
  1484  00489A                     __end_of_FindSync:
  1485                           ;adf.c: 446: unsigned char GetHeader(unsigned ch
      +                          ar * pTrack, unsigned char * pSector)
  1486                           ;adf.c: 447: {
  1487  00489A  004C               	dw	?_GetHeader
  1488  00489C                     _GetHeader:
  1489                           ; errata NOP at function entry point
  1490  00489C  FFFF               	dw	65535
  1491  00489E                     f4162:
  1492  000000                     
  1493                           ;adf.c: 448: unsigned char c, c1, c2, c3, c4;
  1494  00489E  0105               	movlb	_Error shr (0+8)
  1495  0048A0  6BFF               	clrf	_Error& (0+255),b
  1496  0048A2                     l79:
  1497                           ;adf.c: 453: while (1)
  1498                           ;adf.c: 454: {
  1499  0048A2  9280               	bcf	3968,1,c	;volatile
  1500                           ;adf.c: 456: c1 = SPI(0);
  1501  0048A4  0E00               	movlw	0
  1502  0048A6  EC35  F03C         	call	_SPI
  1503  0048AA  0100               	movlb	__Lparam shr (0+8)
  1504  0048AC  6F52               	movwf	(?a_GetHeader+2)^(__Lparam& (0+65280)),b
  1505                           ;adf.c: 457: c2 = SPI(0);
  1506  0048AE  0E00               	movlw	0
  1507  0048B0  EC35  F03C         	call	_SPI
  1508  0048B4  0100               	movlb	__Lparam shr (0+8)
  1509  0048B6  6F53               	movwf	(?a_GetHeader+3)^(__Lparam& (0+65280)),b
  1510                           ;adf.c: 458: if (!(c1 & 0x02))
  1511  0048B8  A352               	btfss	(?a_GetHeader+2)^(__Lparam& (0+65280)),1,
      +                          b
  1512  0048BA  D12B               	goto	l80
  1513                           ;adf.c: 459: break;
  1514                           ;adf.c: 460: SPI(0);
  1515  0048BC  0E00               	movlw	0
  1516  0048BE  EC35  F03C         	call	_SPI
  1517                           ;adf.c: 461: SPI(0);
  1518  0048C2  0E00               	movlw	0
  1519  0048C4  EC35  F03C         	call	_SPI
  1520                           ;adf.c: 462: c3 = SPI(0);
  1521  0048C8  0E00               	movlw	0
  1522  0048CA  EC35  F03C         	call	_SPI
  1523  0048CE  0100               	movlb	__Lparam shr (0+8)
  1524  0048D0  6F54               	movwf	(?a_GetHeader+4)^(__Lparam& (0+65280)),b
  1525                           ;adf.c: 463: c4 = SPI(0);
  1526  0048D2  0E00               	movlw	0
  1527  0048D4  EC35  F03C         	call	_SPI
  1528  0048D8  0100               	movlb	__Lparam shr (0+8)
  1529  0048DA  6F51               	movwf	(?a_GetHeader+1)^(__Lparam& (0+65280)),b
  1530                           ;adf.c: 465: if ((c3 & 0x3F) != 0 || c4 > 24)
  1531  0048DC  5154               	movf	(?a_GetHeader+4)^(__Lparam& (0+65280)),w
  1532  0048DE  0B3F               	andlw	63
  1533  0048E0  E103               	bnz	u530
  1534  0048E2  0E18               	movlw	24
  1535  0048E4  6551               	cpfsgt	(?a_GetHeader+1)^(__Lparam& (0+65280)),b
  1536  0048E6  D10C               	goto	l82
  1537  0048E8                     u530:
  1538                           ;adf.c: 466: {
  1539  0048E8  0E00               	movlw	0
  1540  0048EA  EC35  F03C         	call	_SPI
  1541  0048EE  0100               	movlb	__Lparam shr (0+8)
  1542  0048F0  6F52               	movwf	(?a_GetHeader+2)^(__Lparam& (0+65280)),b
  1543                           ;adf.c: 468: c2 = SPI(0);
  1544  0048F2  0E00               	movlw	0
  1545  0048F4  EC35  F03C         	call	_SPI
  1546  0048F8  0100               	movlb	__Lparam shr (0+8)
  1547  0048FA  6F53               	movwf	(?a_GetHeader+3)^(__Lparam& (0+65280)),b
  1548                           ;adf.c: 469: if (c1 != 0x44 || c2 != 0x89)
  1549  0048FC  5152               	movf	(?a_GetHeader+2)^(__Lparam& (0+65280)),w
  1550  0048FE  0A44               	xorlw	68
  1551  004900  E103               	bnz	u560
  1552  004902  5153               	movf	(?a_GetHeader+3)^(__Lparam& (0+65280)),w
  1553  004904  0A89               	xorlw	-119
  1554  004906  E002               	bz	l83
  1555  004908                     u560:
  1556                           ;adf.c: 470: {
  1557  004908  0E15               	movlw	21
  1558  00490A  D0FE               	goto	L4
  1559                           ;adf.c: 475: break;
  1560  00490C                     l83:
  1561                           ;adf.c: 476: }
  1562  00490C  0E00               	movlw	0
  1563  00490E  EC35  F03C         	call	_SPI
  1564  004912  0100               	movlb	__Lparam shr (0+8)
  1565  004914  6F55               	movwf	(?a_GetHeader+5)^(__Lparam& (0+65280)),b
  1566                           ;adf.c: 479: checksum[0] = c;
  1567  004916  5155               	movf	(?a_GetHeader+5)^(__Lparam& (0+65280)),w
  1568  004918  6F56               	movwf	(?a_GetHeader+6)^(__Lparam& (0+65280)),b
  1569                           ;adf.c: 480: c1 = (c&0x55)<<1;
  1570  00491A  C055  F000         	movff	?a_GetHeader+5,btemp
  1571  00491E  0E55               	movlw	85
  1572  004920  1600               	andwf	btemp,f,c
  1573  004922  90D8               	bcf	status,0,c
  1574  004924  3400               	rlcf	btemp,w,c
  1575  004926  6F52               	movwf	(?a_GetHeader+2)^(__Lparam& (0+65280)),b
  1576                           ;adf.c: 481: c = SPI(0);
  1577  004928  0E00               	movlw	0
  1578  00492A  EC35  F03C         	call	_SPI
  1579  00492E  0100               	movlb	__Lparam shr (0+8)
  1580  004930  6F55               	movwf	(?a_GetHeader+5)^(__Lparam& (0+65280)),b
  1581                           ;adf.c: 482: checksum[1] = c;
  1582  004932  5155               	movf	(?a_GetHeader+5)^(__Lparam& (0+65280)),w
  1583  004934  6F57               	movwf	(?a_GetHeader+7)^(__Lparam& (0+65280)),b
  1584                           ;adf.c: 483: c2 = (c&0x55)<<1;
  1585  004936  C055  F000         	movff	?a_GetHeader+5,btemp
  1586  00493A  0E55               	movlw	85
  1587  00493C  1600               	andwf	btemp,f,c
  1588  00493E  90D8               	bcf	status,0,c
  1589  004940  3400               	rlcf	btemp,w,c
  1590  004942  6F53               	movwf	(?a_GetHeader+3)^(__Lparam& (0+65280)),b
  1591                           ;adf.c: 484: c = SPI(0);
  1592  004944  0E00               	movlw	0
  1593  004946  EC35  F03C         	call	_SPI
  1594  00494A  0100               	movlb	__Lparam shr (0+8)
  1595  00494C  6F55               	movwf	(?a_GetHeader+5)^(__Lparam& (0+65280)),b
  1596                           ;adf.c: 485: checksum[2] = c;
  1597  00494E  5155               	movf	(?a_GetHeader+5)^(__Lparam& (0+65280)),w
  1598  004950  6F58               	movwf	(?a_GetHeader+8)^(__Lparam& (0+65280)),b
  1599                           ;adf.c: 486: c3 = (c&0x55)<<1;
  1600  004952  C055  F000         	movff	?a_GetHeader+5,btemp
  1601  004956  0E55               	movlw	85
  1602  004958  1600               	andwf	btemp,f,c
  1603  00495A  90D8               	bcf	status,0,c
  1604  00495C  3400               	rlcf	btemp,w,c
  1605  00495E  6F54               	movwf	(?a_GetHeader+4)^(__Lparam& (0+65280)),b
  1606                           ;adf.c: 487: c = SPI(0);
  1607  004960  0E00               	movlw	0
  1608  004962  EC35  F03C         	call	_SPI
  1609  004966  0100               	movlb	__Lparam shr (0+8)
  1610  004968  6F55               	movwf	(?a_GetHeader+5)^(__Lparam& (0+65280)),b
  1611                           ;adf.c: 488: checksum[3] = c;
  1612  00496A  5155               	movf	(?a_GetHeader+5)^(__Lparam& (0+65280)),w
  1613  00496C  6F59               	movwf	(?a_GetHeader+9)^(__Lparam& (0+65280)),b
  1614                           ;adf.c: 489: c4 = (c&0x55)<<1;
  1615  00496E  C055  F000         	movff	?a_GetHeader+5,btemp
  1616  004972  0E55               	movlw	85
  1617  004974  1600               	andwf	btemp,f,c
  1618  004976  90D8               	bcf	status,0,c
  1619  004978  3400               	rlcf	btemp,w,c
  1620  00497A  6F51               	movwf	(?a_GetHeader+1)^(__Lparam& (0+65280)),b
  1621                           ;adf.c: 491: c = SPI(0);
  1622  00497C  0E00               	movlw	0
  1623  00497E  EC35  F03C         	call	_SPI
  1624  004982  0100               	movlb	__Lparam shr (0+8)
  1625  004984  6F55               	movwf	(?a_GetHeader+5)^(__Lparam& (0+65280)),b
  1626                           ;adf.c: 492: checksum[0] ^= c;
  1627  004986  5155               	movf	(?a_GetHeader+5)^(__Lparam& (0+65280)),w
  1628  004988  1B56               	xorwf	(?a_GetHeader+6)^(__Lparam& (0+65280)),f,
      +                          b
  1629                           ;adf.c: 493: c1 |= c&0x55;
  1630  00498A  5155               	movf	(?a_GetHeader+5)^(__Lparam& (0+65280)),w
  1631  00498C  0B55               	andlw	85
  1632  00498E  1352               	iorwf	(?a_GetHeader+2)^(__Lparam& (0+65280)),f,
      +                          b
  1633                           ;adf.c: 494: c = SPI(0);
  1634  004990  0E00               	movlw	0
  1635  004992  EC35  F03C         	call	_SPI
  1636  004996  0100               	movlb	__Lparam shr (0+8)
  1637  004998  6F55               	movwf	(?a_GetHeader+5)^(__Lparam& (0+65280)),b
  1638                           ;adf.c: 495: checksum[1] ^= c;
  1639  00499A  5155               	movf	(?a_GetHeader+5)^(__Lparam& (0+65280)),w
  1640  00499C  1B57               	xorwf	(?a_GetHeader+7)^(__Lparam& (0+65280)),f,
      +                          b
  1641                           ;adf.c: 496: c2 |= c&0x55;
  1642  00499E  5155               	movf	(?a_GetHeader+5)^(__Lparam& (0+65280)),w
  1643  0049A0  0B55               	andlw	85
  1644  0049A2  1353               	iorwf	(?a_GetHeader+3)^(__Lparam& (0+65280)),f,
      +                          b
  1645                           ;adf.c: 497: c = SPI(0);
  1646  0049A4  0E00               	movlw	0
  1647  0049A6  EC35  F03C         	call	_SPI
  1648  0049AA  0100               	movlb	__Lparam shr (0+8)
  1649  0049AC  6F55               	movwf	(?a_GetHeader+5)^(__Lparam& (0+65280)),b
  1650                           ;adf.c: 498: checksum[2] ^= c;
  1651  0049AE  5155               	movf	(?a_GetHeader+5)^(__Lparam& (0+65280)),w
  1652  0049B0  1B58               	xorwf	(?a_GetHeader+8)^(__Lparam& (0+65280)),f,
      +                          b
  1653                           ;adf.c: 499: c3 |= c&0x55;
  1654  0049B2  5155               	movf	(?a_GetHeader+5)^(__Lparam& (0+65280)),w
  1655  0049B4  0B55               	andlw	85
  1656  0049B6  1354               	iorwf	(?a_GetHeader+4)^(__Lparam& (0+65280)),f,
      +                          b
  1657                           ;adf.c: 500: c = SPI(0);
  1658  0049B8  0E00               	movlw	0
  1659  0049BA  EC35  F03C         	call	_SPI
  1660  0049BE  0100               	movlb	__Lparam shr (0+8)
  1661  0049C0  6F55               	movwf	(?a_GetHeader+5)^(__Lparam& (0+65280)),b
  1662                           ;adf.c: 501: checksum[3] ^= c;
  1663  0049C2  5155               	movf	(?a_GetHeader+5)^(__Lparam& (0+65280)),w
  1664  0049C4  1B59               	xorwf	(?a_GetHeader+9)^(__Lparam& (0+65280)),f,
      +                          b
  1665                           ;adf.c: 502: c4 |= c&0x55;
  1666  0049C6  5155               	movf	(?a_GetHeader+5)^(__Lparam& (0+65280)),w
  1667  0049C8  0B55               	andlw	85
  1668  0049CA  1351               	iorwf	(?a_GetHeader+1)^(__Lparam& (0+65280)),f,
      +                          b
  1669                           ;adf.c: 504: if (c1 != 0xFF)
  1670  0049CC  2952               	incf	(?a_GetHeader+2)^(__Lparam& (0+65280)),w
  1671  0049CE  E002               	bz	l84
  1672                           ;adf.c: 505: Error = 22;
  1673  0049D0  0E16               	movlw	22
  1674  0049D2  D014               	goto	L8
  1675  0049D4                     l84:
  1676                           ;adf.c: 506: else if (c2 > 159)
  1677  0049D4  0E9F               	movlw	-97
  1678  0049D6  0100               	movlb	__Lparam shr (0+8)
  1679  0049D8  6553               	cpfsgt	(?a_GetHeader+3)^(__Lparam& (0+65280)),b
  1680  0049DA  D002               	goto	l86
  1681                           ;adf.c: 507: Error = 23;
  1682  0049DC  0E17               	movlw	23
  1683  0049DE  D00E               	goto	L8
  1684  0049E0                     l86:
  1685                           ;adf.c: 508: else if (c3 > 10)
  1686  0049E0  0E0A               	movlw	10
  1687  0049E2  0100               	movlb	__Lparam shr (0+8)
  1688  0049E4  6554               	cpfsgt	(?a_GetHeader+4)^(__Lparam& (0+65280)),b
  1689  0049E6  D002               	goto	l88
  1690                           ;adf.c: 509: Error = 24;
  1691  0049E8  0E18               	movlw	24
  1692  0049EA  D008               	goto	L8
  1693  0049EC                     l88:
  1694                           ;adf.c: 510: else if (c4 > 11 || c4==0)
  1695  0049EC  0E0B               	movlw	11
  1696  0049EE  0100               	movlb	__Lparam shr (0+8)
  1697  0049F0  6551               	cpfsgt	(?a_GetHeader+1)^(__Lparam& (0+65280)),b
  1698  0049F2  D001               	goto	u601
  1699  0049F4  D002               	goto	u620
  1700  0049F6                     u601:
  1701  0049F6  5151               	movf	(?a_GetHeader+1)^(__Lparam& (0+65280)),w
  1702  0049F8  E103               	bnz	l85
  1703  0049FA                     u620:
  1704                           ;adf.c: 511: Error = 25;
  1705  0049FA  0E19               	movlw	25
  1706  0049FC                     L8:
  1707  0049FC  CFE8 F5FF          	movff	wreg,_Error
  1708  004A00                     l85:
  1709                           ;adf.c: 513: if (Error)
  1710  004A00  0105               	movlb	_Error shr (0+8)
  1711  004A02  53FF               	movf	_Error& (0+255),f,b
  1712  004A04  E001 D085          	bnz	l80
  1713                           ;adf.c: 514: {
  1714                           ;adf.c: 519: }
  1715  004A08  C04C  FFE9         	movff	?_GetHeader,fsr0l
  1716  004A0C  C04D  FFEA         	movff	?_GetHeader+1,fsr0h
  1717  004A10  C053  FFEF         	movff	?a_GetHeader+3,indf0
  1718                           ;adf.c: 526: *pSector = c3;
  1719  004A14  C04E  FFE9         	movff	?_GetHeader+2,fsr0l
  1720  004A18  C04F  FFEA         	movff	?_GetHeader+3,fsr0h
  1721  004A1C  C054  FFEF         	movff	?a_GetHeader+4,indf0
  1722                           ;adf.c: 528: for (i = 0; i < 8; i++)
  1723  004A20  0100               	movlb	__Lparam shr (0+8)
  1724  004A22  6B50               	clrf	?a_GetHeader^(__Lparam& (0+65280)),b
  1725  004A24                     l92:
  1726                           ;adf.c: 529: {
  1727  004A24  0E00               	movlw	0
  1728  004A26  EC35  F03C         	call	_SPI
  1729  004A2A  0100               	movlb	__Lparam shr (0+8)
  1730  004A2C  1B56               	xorwf	(?a_GetHeader+6)^(__Lparam& (0+65280)),f,
      +                          b
  1731                           ;adf.c: 531: checksum[1] ^= SPI(0);
  1732  004A2E  0E00               	movlw	0
  1733  004A30  EC35  F03C         	call	_SPI
  1734  004A34  0100               	movlb	__Lparam shr (0+8)
  1735  004A36  1B57               	xorwf	(?a_GetHeader+7)^(__Lparam& (0+65280)),f,
      +                          b
  1736                           ;adf.c: 532: checksum[2] ^= SPI(0);
  1737  004A38  0E00               	movlw	0
  1738  004A3A  EC35  F03C         	call	_SPI
  1739  004A3E  0100               	movlb	__Lparam shr (0+8)
  1740  004A40  1B58               	xorwf	(?a_GetHeader+8)^(__Lparam& (0+65280)),f,
      +                          b
  1741                           ;adf.c: 533: checksum[3] ^= SPI(0);
  1742  004A42  0E00               	movlw	0
  1743  004A44  EC35  F03C         	call	_SPI
  1744  004A48  0100               	movlb	__Lparam shr (0+8)
  1745  004A4A  1B59               	xorwf	(?a_GetHeader+9)^(__Lparam& (0+65280)),f,
      +                          b
  1746  004A4C  2B50               	incf	?a_GetHeader^(__Lparam& (0+65280)),f,b
  1747  004A4E  0E07               	movlw	7
  1748  004A50  6550               	cpfsgt	?a_GetHeader^(__Lparam& (0+65280)),b
  1749  004A52  D7E8               	goto	l92
  1750                           ;adf.c: 534: }
  1751  004A54  0E55               	movlw	85
  1752  004A56  1756               	andwf	(?a_GetHeader+6)^(__Lparam& (0+65280)),f,
      +                          b
  1753                           ;adf.c: 537: checksum[1] &= 0x55;
  1754  004A58  1757               	andwf	(?a_GetHeader+7)^(__Lparam& (0+65280)),f,
      +                          b
  1755                           ;adf.c: 538: checksum[2] &= 0x55;
  1756  004A5A  1758               	andwf	(?a_GetHeader+8)^(__Lparam& (0+65280)),f,
      +                          b
  1757                           ;adf.c: 539: checksum[3] &= 0x55;
  1758  004A5C  1759               	andwf	(?a_GetHeader+9)^(__Lparam& (0+65280)),f,
      +                          b
  1759                           ;adf.c: 541: c1 = (SPI(0)&0x55)<<1;
  1760  004A5E  0E00               	movlw	0
  1761  004A60  EC35  F03C         	call	_SPI
  1762  004A64  6E00               	movwf	btemp,c
  1763  004A66  0E55               	movlw	85
  1764  004A68  1600               	andwf	btemp,f,c
  1765  004A6A  90D8               	bcf	status,0,c
  1766  004A6C  3400               	rlcf	btemp,w,c
  1767  004A6E  0100               	movlb	__Lparam shr (0+8)
  1768  004A70  6F52               	movwf	(?a_GetHeader+2)^(__Lparam& (0+65280)),b
  1769                           ;adf.c: 542: c2 = (SPI(0)&0x55)<<1;
  1770  004A72  0E00               	movlw	0
  1771  004A74  EC35  F03C         	call	_SPI
  1772  004A78  6E00               	movwf	btemp,c
  1773  004A7A  0E55               	movlw	85
  1774  004A7C  1600               	andwf	btemp,f,c
  1775  004A7E  90D8               	bcf	status,0,c
  1776  004A80  3400               	rlcf	btemp,w,c
  1777  004A82  0100               	movlb	__Lparam shr (0+8)
  1778  004A84  6F53               	movwf	(?a_GetHeader+3)^(__Lparam& (0+65280)),b
  1779                           ;adf.c: 543: c3 = (SPI(0)&0x55)<<1;
  1780  004A86  0E00               	movlw	0
  1781  004A88  EC35  F03C         	call	_SPI
  1782  004A8C  6E00               	movwf	btemp,c
  1783  004A8E  0E55               	movlw	85
  1784  004A90  1600               	andwf	btemp,f,c
  1785  004A92  90D8               	bcf	status,0,c
  1786  004A94  3400               	rlcf	btemp,w,c
  1787  004A96  0100               	movlb	__Lparam shr (0+8)
  1788  004A98  6F54               	movwf	(?a_GetHeader+4)^(__Lparam& (0+65280)),b
  1789                           ;adf.c: 544: c4 = (SPI(0)&0x55)<<1;
  1790  004A9A  0E00               	movlw	0
  1791  004A9C  EC35  F03C         	call	_SPI
  1792  004AA0  6E00               	movwf	btemp,c
  1793  004AA2  0E55               	movlw	85
  1794  004AA4  1600               	andwf	btemp,f,c
  1795  004AA6  90D8               	bcf	status,0,c
  1796  004AA8  3400               	rlcf	btemp,w,c
  1797  004AAA  0100               	movlb	__Lparam shr (0+8)
  1798  004AAC  6F51               	movwf	(?a_GetHeader+1)^(__Lparam& (0+65280)),b
  1799                           ;adf.c: 546: c1 |= SPI(0)&0x55;
  1800  004AAE  0E00               	movlw	0
  1801  004AB0  EC35  F03C         	call	_SPI
  1802  004AB4  0B55               	andlw	85
  1803  004AB6  0100               	movlb	__Lparam shr (0+8)
  1804  004AB8  1352               	iorwf	(?a_GetHeader+2)^(__Lparam& (0+65280)),f,
      +                          b
  1805                           ;adf.c: 547: c2 |= SPI(0)&0x55;
  1806  004ABA  0E00               	movlw	0
  1807  004ABC  EC35  F03C         	call	_SPI
  1808  004AC0  0B55               	andlw	85
  1809  004AC2  0100               	movlb	__Lparam shr (0+8)
  1810  004AC4  1353               	iorwf	(?a_GetHeader+3)^(__Lparam& (0+65280)),f,
      +                          b
  1811                           ;adf.c: 548: c3 |= SPI(0)&0x55;
  1812  004AC6  0E00               	movlw	0
  1813  004AC8  EC35  F03C         	call	_SPI
  1814  004ACC  0B55               	andlw	85
  1815  004ACE  0100               	movlb	__Lparam shr (0+8)
  1816  004AD0  1354               	iorwf	(?a_GetHeader+4)^(__Lparam& (0+65280)),f,
      +                          b
  1817                           ;adf.c: 549: c4 |= SPI(0)&0x55;
  1818  004AD2  0E00               	movlw	0
  1819  004AD4  EC35  F03C         	call	_SPI
  1820  004AD8  0B55               	andlw	85
  1821  004ADA  0100               	movlb	__Lparam shr (0+8)
  1822  004ADC  1351               	iorwf	(?a_GetHeader+1)^(__Lparam& (0+65280)),f,
      +                          b
  1823                           ;adf.c: 551: if (c1!=checksum[0] || c2!=checksum
      +                          [1] || c3!=checksum[2] || c4!=checksum[3])
  1824  004ADE  5152               	movf	(?a_GetHeader+2)^(__Lparam& (0+65280)),w
  1825  004AE0  1956               	xorwf	(?a_GetHeader+6)^(__Lparam& (0+65280)),w
  1826  004AE2  E109               	bnz	u710
  1827  004AE4  5157               	movf	(?a_GetHeader+7)^(__Lparam& (0+65280)),w
  1828  004AE6  1953               	xorwf	(?a_GetHeader+3)^(__Lparam& (0+65280)),w
  1829  004AE8  E106               	bnz	u710
  1830  004AEA  5158               	movf	(?a_GetHeader+8)^(__Lparam& (0+65280)),w
  1831  004AEC  1954               	xorwf	(?a_GetHeader+4)^(__Lparam& (0+65280)),w
  1832  004AEE  E103               	bnz	u710
  1833  004AF0  5159               	movf	(?a_GetHeader+9)^(__Lparam& (0+65280)),w
  1834  004AF2  1951               	xorwf	(?a_GetHeader+1)^(__Lparam& (0+65280)),w
  1835  004AF4  E002               	bz	l95
  1836  004AF6                     u710:
  1837                           ;adf.c: 552: {
  1838  004AF6  0E1A               	movlw	26
  1839  004AF8  D007               	goto	L4
  1840                           ;adf.c: 554: break;
  1841  004AFA                     l95:
  1842                           ;adf.c: 555: }
  1843  004AFA  8280               	bsf	3968,1,c	;volatile
  1844                           ;adf.c: 558: return 1;
  1845  004AFC  0E01               	movlw	1
  1846  004AFE  D00B               	goto	l77
  1847  004B00                     l82:
  1848                           ;adf.c: 560: else
  1849  004B00  0100               	movlb	__Lparam shr (0+8)
  1850  004B02  BF54               	btfsc	(?a_GetHeader+4)^(__Lparam& (0+65280)),7,
      +                          b
  1851  004B04  D004               	goto	l96
  1852                           ;adf.c: 562: {
  1853  004B06  0E14               	movlw	20
  1854  004B08                     L4:
  1855  004B08  CFE8 F5FF          	movff	wreg,_Error
  1856                           ;adf.c: 564: break;
  1857  004B0C  D002               	goto	l80
  1858  004B0E                     l96:
  1859                           ;adf.c: 565: }
  1860  004B0E  8280               	bsf	3968,1,c	;volatile
  1861  004B10  D6C8               	goto	l79
  1862  004B12                     l80:
  1863                           ;adf.c: 568: }
  1864  004B12  8280               	bsf	3968,1,c	;volatile
  1865                           ;adf.c: 571: return 0;
  1866  004B14  0E00               	movlw	0
  1867                           ;adf.c: 572: }
  1868  004B16                     l77:
  1869  004B16  0012               	return	
  1870  004B18  FFFF               	dw	65535	; Nop inserted for errata
  1871  004B1A  D6C1               	goto	f4162
  1872  004B1C                     __end_of_GetHeader:
  1873                           ;adf.c: 575: unsigned char GetData(void)
  1874                           ;adf.c: 576: {
  1875  004B1C                     _GetData:
  1876                           ; errata NOP at function entry point
  1877  004B1C  FFFF               	dw	65535
  1878  004B1E                     f4172:
  1879  000000                     
  1880                           ;adf.c: 577: unsigned char c, c1, c2, c3, c4;
  1881  004B1E  0105               	movlb	_Error shr (0+8)
  1882  004B20  6BFF               	clrf	_Error& (0+255),b
  1883  004B22                     l100:
  1884                           ;adf.c: 584: while (1)
  1885                           ;adf.c: 585: {
  1886  004B22  9280               	bcf	3968,1,c	;volatile
  1887                           ;adf.c: 587: c1 = SPI(0);
  1888  004B24  0E00               	movlw	0
  1889  004B26  EC35  F03C         	call	_SPI
  1890  004B2A  0100               	movlb	__Lparam shr (0+8)
  1891  004B2C  6F4D               	movwf	(?a_GetData+1)^(__Lparam& (0+65280)),b
  1892                           ;adf.c: 588: c2 = SPI(0);
  1893  004B2E  0E00               	movlw	0
  1894  004B30  EC35  F03C         	call	_SPI
  1895  004B34  0100               	movlb	__Lparam shr (0+8)
  1896  004B36  6F4C               	movwf	?a_GetData^(__Lparam& (0+65280)),b
  1897                           ;adf.c: 589: if (!(c1 & 0x02))
  1898  004B38  A34D               	btfss	(?a_GetData+1)^(__Lparam& (0+65280)),1,b
  1899  004B3A  D12B               	goto	l101
  1900                           ;adf.c: 590: break;
  1901                           ;adf.c: 591: SPI(0);
  1902  004B3C  0E00               	movlw	0
  1903  004B3E  EC35  F03C         	call	_SPI
  1904                           ;adf.c: 592: SPI(0);
  1905  004B42  0E00               	movlw	0
  1906  004B44  EC35  F03C         	call	_SPI
  1907                           ;adf.c: 593: c3 = SPI(0);
  1908  004B48  0E00               	movlw	0
  1909  004B4A  EC35  F03C         	call	_SPI
  1910  004B4E  0100               	movlb	__Lparam shr (0+8)
  1911  004B50  6F50               	movwf	(?a_GetData+4)^(__Lparam& (0+65280)),b
  1912                           ;adf.c: 594: c4 = SPI(0);
  1913  004B52  0E00               	movlw	0
  1914  004B54  EC35  F03C         	call	_SPI
  1915  004B58  0100               	movlb	__Lparam shr (0+8)
  1916  004B5A  6F4E               	movwf	(?a_GetData+2)^(__Lparam& (0+65280)),b
  1917                           ;adf.c: 596: n = ((c3&0x3F)<<8) + c4;
  1918  004B5C  5150               	movf	(?a_GetData+4)^(__Lparam& (0+65280)),w
  1919  004B5E  0B3F               	andlw	63
  1920  004B60  6EF4               	movwf	prodh,c
  1921  004B62  C04E  FFF3         	movff	?a_GetData+2,prodl
  1922                           ;adf.c: 598: if (n >= 0x204)
  1923  004B66  0E02               	movlw	2
  1924  004B68  5CF4               	subwf	prodh,w,c
  1925  004B6A  0E04               	movlw	4
  1926  004B6C  B4D8               	btfsc	status,2,c
  1927  004B6E  5CF3               	subwf	prodl,w,c
  1928  004B70  E201 D106          	bnc	l103
  1929                           ;adf.c: 599: {
  1930  004B74  0E00               	movlw	0
  1931  004B76  EC35  F03C         	call	_SPI
  1932  004B7A  6E00               	movwf	btemp,c
  1933  004B7C  0E55               	movlw	85
  1934  004B7E  1600               	andwf	btemp,f,c
  1935  004B80  90D8               	bcf	status,0,c
  1936  004B82  3400               	rlcf	btemp,w,c
  1937  004B84  0100               	movlb	__Lparam shr (0+8)
  1938  004B86  6F4D               	movwf	(?a_GetData+1)^(__Lparam& (0+65280)),b
  1939                           ;adf.c: 601: c2 = (SPI(0)&0x55)<<1;
  1940  004B88  0E00               	movlw	0
  1941  004B8A  EC35  F03C         	call	_SPI
  1942  004B8E  6E00               	movwf	btemp,c
  1943  004B90  0E55               	movlw	85
  1944  004B92  1600               	andwf	btemp,f,c
  1945  004B94  90D8               	bcf	status,0,c
  1946  004B96  3400               	rlcf	btemp,w,c
  1947  004B98  0100               	movlb	__Lparam shr (0+8)
  1948  004B9A  6F4C               	movwf	?a_GetData^(__Lparam& (0+65280)),b
  1949                           ;adf.c: 602: c3 = (SPI(0)&0x55)<<1;
  1950  004B9C  0E00               	movlw	0
  1951  004B9E  EC35  F03C         	call	_SPI
  1952  004BA2  6E00               	movwf	btemp,c
  1953  004BA4  0E55               	movlw	85
  1954  004BA6  1600               	andwf	btemp,f,c
  1955  004BA8  90D8               	bcf	status,0,c
  1956  004BAA  3400               	rlcf	btemp,w,c
  1957  004BAC  0100               	movlb	__Lparam shr (0+8)
  1958  004BAE  6F50               	movwf	(?a_GetData+4)^(__Lparam& (0+65280)),b
  1959                           ;adf.c: 603: c4 = (SPI(0)&0x55)<<1;
  1960  004BB0  0E00               	movlw	0
  1961  004BB2  EC35  F03C         	call	_SPI
  1962  004BB6  6E00               	movwf	btemp,c
  1963  004BB8  0E55               	movlw	85
  1964  004BBA  1600               	andwf	btemp,f,c
  1965  004BBC  90D8               	bcf	status,0,c
  1966  004BBE  3400               	rlcf	btemp,w,c
  1967  004BC0  0100               	movlb	__Lparam shr (0+8)
  1968  004BC2  6F4E               	movwf	(?a_GetData+2)^(__Lparam& (0+65280)),b
  1969                           ;adf.c: 605: c1 |= SPI(0)&0x55;
  1970  004BC4  0E00               	movlw	0
  1971  004BC6  EC35  F03C         	call	_SPI
  1972  004BCA  0B55               	andlw	85
  1973  004BCC  0100               	movlb	__Lparam shr (0+8)
  1974  004BCE  134D               	iorwf	(?a_GetData+1)^(__Lparam& (0+65280)),f,b
  1975                           ;adf.c: 606: c2 |= SPI(0)&0x55;
  1976  004BD0  0E00               	movlw	0
  1977  004BD2  EC35  F03C         	call	_SPI
  1978  004BD6  0B55               	andlw	85
  1979  004BD8  0100               	movlb	__Lparam shr (0+8)
  1980  004BDA  134C               	iorwf	?a_GetData^(__Lparam& (0+65280)),f,b
  1981                           ;adf.c: 607: c3 |= SPI(0)&0x55;
  1982  004BDC  0E00               	movlw	0
  1983  004BDE  EC35  F03C         	call	_SPI
  1984  004BE2  0B55               	andlw	85
  1985  004BE4  0100               	movlb	__Lparam shr (0+8)
  1986  004BE6  1350               	iorwf	(?a_GetData+4)^(__Lparam& (0+65280)),f,b
  1987                           ;adf.c: 608: c4 |= SPI(0)&0x55;
  1988  004BE8  0E00               	movlw	0
  1989  004BEA  EC35  F03C         	call	_SPI
  1990  004BEE  0B55               	andlw	85
  1991  004BF0  0100               	movlb	__Lparam shr (0+8)
  1992  004BF2  134E               	iorwf	(?a_GetData+2)^(__Lparam& (0+65280)),f,b
  1993                           ;adf.c: 610: checksum[0] = 0;
  1994  004BF4  6B54               	clrf	(?a_GetData+8)^(__Lparam& (0+65280)),b
  1995                           ;adf.c: 611: checksum[1] = 0;
  1996  004BF6  6B55               	clrf	(?a_GetData+9)^(__Lparam& (0+65280)),b
  1997                           ;adf.c: 612: checksum[2] = 0;
  1998  004BF8  6B56               	clrf	(?a_GetData+10)^(__Lparam& (0+65280)),b
  1999                           ;adf.c: 613: checksum[3] = 0;
  2000  004BFA  6B57               	clrf	(?a_GetData+11)^(__Lparam& (0+65280)),b
  2001                           ;adf.c: 616: i = 128;
  2002  004BFC  0E80               	movlw	128
  2003  004BFE  6F4F               	movwf	(?a_GetData+3)^(__Lparam& (0+65280)),b
  2004                           ;adf.c: 617: p = secbuf;
  2005  004C00  0EFF               	movlw	low _secbuf
  2006  004C02  6F52               	movwf	(?a_GetData+6)^(__Lparam& (0+65280)),b
  2007  004C04  0E03               	movlw	high _secbuf
  2008  004C06  6F53               	movwf	(?a_GetData+7)^(__Lparam& (0+65280)),b
  2009  004C08                     l106:
  2010                           ;adf.c: 618: do
  2011                           ;adf.c: 619: {
  2012  004C08  0E00               	movlw	0
  2013  004C0A  EC35  F03C         	call	_SPI
  2014  004C0E  0100               	movlb	__Lparam shr (0+8)
  2015  004C10  6F51               	movwf	(?a_GetData+5)^(__Lparam& (0+65280)),b
  2016                           ;adf.c: 621: checksum[0] ^= c;
  2017  004C12  5151               	movf	(?a_GetData+5)^(__Lparam& (0+65280)),w
  2018  004C14  1B54               	xorwf	(?a_GetData+8)^(__Lparam& (0+65280)),f,b
  2019                           ;adf.c: 622: *p++ = (c&0x55)<<1;
  2020  004C16  C051  F000         	movff	?a_GetData+5,btemp
  2021  004C1A  0E55               	movlw	85
  2022  004C1C  1600               	andwf	btemp,f,c
  2023  004C1E  90D8               	bcf	status,0,c
  2024  004C20  3400               	rlcf	btemp,w,c
  2025  004C22  C052  FFE9         	movff	?a_GetData+6,fsr0l
  2026  004C26  C053  FFEA         	movff	?a_GetData+7,fsr0h
  2027  004C2A  6EEF               	movwf	indf0,c
  2028  004C2C  4B52               	infsnz	(?a_GetData+6)^(__Lparam& (0+65280)),f,b
  2029  004C2E  2B53               	incf	(?a_GetData+7)^(__Lparam& (0+65280)),f,b
  2030                           ;adf.c: 623: c = SPI(0);
  2031  004C30  0E00               	movlw	0
  2032  004C32  EC35  F03C         	call	_SPI
  2033  004C36  0100               	movlb	__Lparam shr (0+8)
  2034  004C38  6F51               	movwf	(?a_GetData+5)^(__Lparam& (0+65280)),b
  2035                           ;adf.c: 624: checksum[1] ^= c;
  2036  004C3A  5151               	movf	(?a_GetData+5)^(__Lparam& (0+65280)),w
  2037  004C3C  1B55               	xorwf	(?a_GetData+9)^(__Lparam& (0+65280)),f,b
  2038                           ;adf.c: 625: *p++ = (c&0x55)<<1;
  2039  004C3E  C051  F000         	movff	?a_GetData+5,btemp
  2040  004C42  0E55               	movlw	85
  2041  004C44  1600               	andwf	btemp,f,c
  2042  004C46  90D8               	bcf	status,0,c
  2043  004C48  3400               	rlcf	btemp,w,c
  2044  004C4A  C052  FFE9         	movff	?a_GetData+6,fsr0l
  2045  004C4E  C053  FFEA         	movff	?a_GetData+7,fsr0h
  2046  004C52  6EEF               	movwf	indf0,c
  2047  004C54  4B52               	infsnz	(?a_GetData+6)^(__Lparam& (0+65280)),f,b
  2048  004C56  2B53               	incf	(?a_GetData+7)^(__Lparam& (0+65280)),f,b
  2049                           ;adf.c: 626: c = SPI(0);
  2050  004C58  0E00               	movlw	0
  2051  004C5A  EC35  F03C         	call	_SPI
  2052  004C5E  0100               	movlb	__Lparam shr (0+8)
  2053  004C60  6F51               	movwf	(?a_GetData+5)^(__Lparam& (0+65280)),b
  2054                           ;adf.c: 627: checksum[2] ^= c;
  2055  004C62  5151               	movf	(?a_GetData+5)^(__Lparam& (0+65280)),w
  2056  004C64  1B56               	xorwf	(?a_GetData+10)^(__Lparam& (0+65280)),f,b
  2057                           ;adf.c: 628: *p++ = (c&0x55)<<1;
  2058  004C66  C051  F000         	movff	?a_GetData+5,btemp
  2059  004C6A  0E55               	movlw	85
  2060  004C6C  1600               	andwf	btemp,f,c
  2061  004C6E  90D8               	bcf	status,0,c
  2062  004C70  3400               	rlcf	btemp,w,c
  2063  004C72  C052  FFE9         	movff	?a_GetData+6,fsr0l
  2064  004C76  C053  FFEA         	movff	?a_GetData+7,fsr0h
  2065  004C7A  6EEF               	movwf	indf0,c
  2066  004C7C  4B52               	infsnz	(?a_GetData+6)^(__Lparam& (0+65280)),f,b
  2067  004C7E  2B53               	incf	(?a_GetData+7)^(__Lparam& (0+65280)),f,b
  2068                           ;adf.c: 629: c = SPI(0);
  2069  004C80  0E00               	movlw	0
  2070  004C82  EC35  F03C         	call	_SPI
  2071  004C86  0100               	movlb	__Lparam shr (0+8)
  2072  004C88  6F51               	movwf	(?a_GetData+5)^(__Lparam& (0+65280)),b
  2073                           ;adf.c: 630: checksum[3] ^= c;
  2074  004C8A  5151               	movf	(?a_GetData+5)^(__Lparam& (0+65280)),w
  2075  004C8C  1B57               	xorwf	(?a_GetData+11)^(__Lparam& (0+65280)),f,b
  2076                           ;adf.c: 631: *p++ = (c&0x55)<<1;
  2077  004C8E  C051  F000         	movff	?a_GetData+5,btemp
  2078  004C92  0E55               	movlw	85
  2079  004C94  1600               	andwf	btemp,f,c
  2080  004C96  90D8               	bcf	status,0,c
  2081  004C98  3400               	rlcf	btemp,w,c
  2082  004C9A  C052  FFE9         	movff	?a_GetData+6,fsr0l
  2083  004C9E  C053  FFEA         	movff	?a_GetData+7,fsr0h
  2084  004CA2  6EEF               	movwf	indf0,c
  2085  004CA4  4B52               	infsnz	(?a_GetData+6)^(__Lparam& (0+65280)),f,b
  2086  004CA6  2B53               	incf	(?a_GetData+7)^(__Lparam& (0+65280)),f,b
  2087                           ;adf.c: 632: }
  2088  004CA8  2F4F               	decfsz	(?a_GetData+3)^(__Lparam& (0+65280)),f,b
  2089  004CAA  D7AE               	goto	l106
  2090                           ;adf.c: 636: i = 128;
  2091  004CAC  0E80               	movlw	128
  2092  004CAE  6F4F               	movwf	(?a_GetData+3)^(__Lparam& (0+65280)),b
  2093                           ;adf.c: 637: p = secbuf;
  2094  004CB0  0EFF               	movlw	low _secbuf
  2095  004CB2  6F52               	movwf	(?a_GetData+6)^(__Lparam& (0+65280)),b
  2096  004CB4  0E03               	movlw	high _secbuf
  2097  004CB6  6F53               	movwf	(?a_GetData+7)^(__Lparam& (0+65280)),b
  2098  004CB8                     l109:
  2099                           ;adf.c: 638: do
  2100                           ;adf.c: 639: {
  2101  004CB8  0E00               	movlw	0
  2102  004CBA  EC35  F03C         	call	_SPI
  2103  004CBE  0100               	movlb	__Lparam shr (0+8)
  2104  004CC0  6F51               	movwf	(?a_GetData+5)^(__Lparam& (0+65280)),b
  2105                           ;adf.c: 641: checksum[0] ^= c;
  2106  004CC2  5151               	movf	(?a_GetData+5)^(__Lparam& (0+65280)),w
  2107  004CC4  1B54               	xorwf	(?a_GetData+8)^(__Lparam& (0+65280)),f,b
  2108                           ;adf.c: 642: *p++ |= c&0x55;
  2109  004CC6  C051  F000         	movff	?a_GetData+5,btemp
  2110  004CCA  0E55               	movlw	85
  2111  004CCC  1600               	andwf	btemp,f,c
  2112  004CCE  C052  FFE9         	movff	?a_GetData+6,fsr0l
  2113  004CD2  C053  FFEA         	movff	?a_GetData+7,fsr0h
  2114  004CD6  5000               	movf	btemp,w,c
  2115  004CD8  12EF               	iorwf	indf0,f,c
  2116  004CDA  4B52               	infsnz	(?a_GetData+6)^(__Lparam& (0+65280)),f,b
  2117  004CDC  2B53               	incf	(?a_GetData+7)^(__Lparam& (0+65280)),f,b
  2118                           ;adf.c: 643: c = SPI(0);
  2119  004CDE  0E00               	movlw	0
  2120  004CE0  EC35  F03C         	call	_SPI
  2121  004CE4  0100               	movlb	__Lparam shr (0+8)
  2122  004CE6  6F51               	movwf	(?a_GetData+5)^(__Lparam& (0+65280)),b
  2123                           ;adf.c: 644: checksum[1] ^= c;
  2124  004CE8  5151               	movf	(?a_GetData+5)^(__Lparam& (0+65280)),w
  2125  004CEA  1B55               	xorwf	(?a_GetData+9)^(__Lparam& (0+65280)),f,b
  2126                           ;adf.c: 645: *p++ |= c&0x55;
  2127  004CEC  C051  F000         	movff	?a_GetData+5,btemp
  2128  004CF0  0E55               	movlw	85
  2129  004CF2  1600               	andwf	btemp,f,c
  2130  004CF4  C052  FFE9         	movff	?a_GetData+6,fsr0l
  2131  004CF8  C053  FFEA         	movff	?a_GetData+7,fsr0h
  2132  004CFC  5000               	movf	btemp,w,c
  2133  004CFE  12EF               	iorwf	indf0,f,c
  2134  004D00  4B52               	infsnz	(?a_GetData+6)^(__Lparam& (0+65280)),f,b
  2135  004D02  2B53               	incf	(?a_GetData+7)^(__Lparam& (0+65280)),f,b
  2136                           ;adf.c: 646: c = SPI(0);
  2137  004D04  0E00               	movlw	0
  2138  004D06  EC35  F03C         	call	_SPI
  2139  004D0A  0100               	movlb	__Lparam shr (0+8)
  2140  004D0C  6F51               	movwf	(?a_GetData+5)^(__Lparam& (0+65280)),b
  2141                           ;adf.c: 647: checksum[2] ^= c;
  2142  004D0E  5151               	movf	(?a_GetData+5)^(__Lparam& (0+65280)),w
  2143  004D10  1B56               	xorwf	(?a_GetData+10)^(__Lparam& (0+65280)),f,b
  2144                           ;adf.c: 648: *p++ |= c&0x55;
  2145  004D12  C051  F000         	movff	?a_GetData+5,btemp
  2146  004D16  0E55               	movlw	85
  2147  004D18  1600               	andwf	btemp,f,c
  2148  004D1A  C052  FFE9         	movff	?a_GetData+6,fsr0l
  2149  004D1E  C053  FFEA         	movff	?a_GetData+7,fsr0h
  2150  004D22  5000               	movf	btemp,w,c
  2151  004D24  12EF               	iorwf	indf0,f,c
  2152  004D26  4B52               	infsnz	(?a_GetData+6)^(__Lparam& (0+65280)),f,b
  2153  004D28  2B53               	incf	(?a_GetData+7)^(__Lparam& (0+65280)),f,b
  2154                           ;adf.c: 649: c = SPI(0);
  2155  004D2A  0E00               	movlw	0
  2156  004D2C  EC35  F03C         	call	_SPI
  2157  004D30  0100               	movlb	__Lparam shr (0+8)
  2158  004D32  6F51               	movwf	(?a_GetData+5)^(__Lparam& (0+65280)),b
  2159                           ;adf.c: 650: checksum[3] ^= c;
  2160  004D34  5151               	movf	(?a_GetData+5)^(__Lparam& (0+65280)),w
  2161  004D36  1B57               	xorwf	(?a_GetData+11)^(__Lparam& (0+65280)),f,b
  2162                           ;adf.c: 651: *p++ |= c&0x55;
  2163  004D38  C051  F000         	movff	?a_GetData+5,btemp
  2164  004D3C  0E55               	movlw	85
  2165  004D3E  1600               	andwf	btemp,f,c
  2166  004D40  C052  FFE9         	movff	?a_GetData+6,fsr0l
  2167  004D44  C053  FFEA         	movff	?a_GetData+7,fsr0h
  2168  004D48  5000               	movf	btemp,w,c
  2169  004D4A  12EF               	iorwf	indf0,f,c
  2170  004D4C  4B52               	infsnz	(?a_GetData+6)^(__Lparam& (0+65280)),f,b
  2171  004D4E  2B53               	incf	(?a_GetData+7)^(__Lparam& (0+65280)),f,b
  2172                           ;adf.c: 652: }
  2173  004D50  2F4F               	decfsz	(?a_GetData+3)^(__Lparam& (0+65280)),f,b
  2174  004D52  D7B2               	goto	l109
  2175                           ;adf.c: 655: checksum[0] &= 0x55;
  2176  004D54  0E55               	movlw	85
  2177  004D56  1754               	andwf	(?a_GetData+8)^(__Lparam& (0+65280)),f,b
  2178                           ;adf.c: 656: checksum[1] &= 0x55;
  2179  004D58  1755               	andwf	(?a_GetData+9)^(__Lparam& (0+65280)),f,b
  2180                           ;adf.c: 657: checksum[2] &= 0x55;
  2181  004D5A  1756               	andwf	(?a_GetData+10)^(__Lparam& (0+65280)),f,b
  2182                           ;adf.c: 658: checksum[3] &= 0x55;
  2183  004D5C  1757               	andwf	(?a_GetData+11)^(__Lparam& (0+65280)),f,b
  2184                           ;adf.c: 660: if (c1 != checksum[0] || c2 != chec
      +                          ksum[1] || c3 != checksum[2] || c4 != checksum[3
      +                          ])
  2185  004D5E  514D               	movf	(?a_GetData+1)^(__Lparam& (0+65280)),w
  2186  004D60  1954               	xorwf	(?a_GetData+8)^(__Lparam& (0+65280)),w
  2187  004D62  E109               	bnz	u810
  2188  004D64  5155               	movf	(?a_GetData+9)^(__Lparam& (0+65280)),w
  2189  004D66  194C               	xorwf	?a_GetData^(__Lparam& (0+65280)),w
  2190  004D68  E106               	bnz	u810
  2191  004D6A  5156               	movf	(?a_GetData+10)^(__Lparam& (0+65280)),w
  2192  004D6C  1950               	xorwf	(?a_GetData+4)^(__Lparam& (0+65280)),w
  2193  004D6E  E103               	bnz	u810
  2194  004D70  5157               	movf	(?a_GetData+11)^(__Lparam& (0+65280)),w
  2195  004D72  194E               	xorwf	(?a_GetData+2)^(__Lparam& (0+65280)),w
  2196  004D74  E002               	bz	l110
  2197  004D76                     u810:
  2198                           ;adf.c: 661: {
  2199  004D76  0E1D               	movlw	29
  2200  004D78  D007               	goto	L5
  2201                           ;adf.c: 663: break;
  2202  004D7A                     l110:
  2203                           ;adf.c: 664: }
  2204  004D7A  8280               	bsf	3968,1,c	;volatile
  2205                           ;adf.c: 667: return 1;
  2206  004D7C  0E01               	movlw	1
  2207  004D7E  D00B               	goto	l98
  2208  004D80                     l103:
  2209                           ;adf.c: 669: else
  2210  004D80  0100               	movlb	__Lparam shr (0+8)
  2211  004D82  BF50               	btfsc	(?a_GetData+4)^(__Lparam& (0+65280)),7,b
  2212  004D84  D004               	goto	l111
  2213                           ;adf.c: 671: {
  2214  004D86  0E1C               	movlw	28
  2215  004D88                     L5:
  2216  004D88  CFE8 F5FF          	movff	wreg,_Error
  2217                           ;adf.c: 673: break;
  2218  004D8C  D002               	goto	l101
  2219  004D8E                     l111:
  2220                           ;adf.c: 674: }
  2221  004D8E  8280               	bsf	3968,1,c	;volatile
  2222  004D90  D6C8               	goto	l100
  2223  004D92                     l101:
  2224                           ;adf.c: 677: }
  2225  004D92  8280               	bsf	3968,1,c	;volatile
  2226                           ;adf.c: 679: return 0;
  2227  004D94  0E00               	movlw	0
  2228                           ;adf.c: 680: }
  2229  004D96                     l98:
  2230  004D96  0012               	return	
  2231  004D98  FFFF               	dw	65535	; Nop inserted for errata
  2232  004D9A  D6C1               	goto	f4172
  2233  004D9C                     __end_of_GetData:
  2234                           ;adf.c: 689: unsigned short SectorToFpga(unsigne
      +                          d char sector, unsigned char track, unsigned cha
      +                          r dsksynch, unsigned char dsksyncl)
  2235                           ;adf.c: 690: {
  2236  004D9C  0052               	dw	?_SectorToFpga
  2237  004D9E                     _SectorToFpga:
  2238                           ; errata NOP at function entry point
  2239  004D9E  FFFF               	dw	65535
  2240  004DA0                     f4192:
  2241  000000                     
  2242                           ;_sector stored from wreg
  2243  004DA0  0100               	movlb	__Lparam shr (0+8)
  2244  004DA2  6F55               	movwf	?a_SectorToFpga^(__Lparam& (0+65280)),b
  2245                           ;adf.c: 691: unsigned char c, i;
  2246  004DA4  0EAA               	movlw	170
  2247  004DA6  EC35  F03C         	call	_SPI
  2248                           ;adf.c: 698: SPI(0xAA);
  2249  004DAA  0EAA               	movlw	170
  2250  004DAC  EC35  F03C         	call	_SPI
  2251                           ;adf.c: 699: SPI(0xAA);
  2252  004DB0  0EAA               	movlw	170
  2253  004DB2  EC35  F03C         	call	_SPI
  2254                           ;adf.c: 700: SPI(0xAA);
  2255  004DB6  0EAA               	movlw	170
  2256  004DB8  EC35  F03C         	call	_SPI
  2257                           ;adf.c: 703: SPI(dsksynch);
  2258  004DBC  0100               	movlb	__Lparam shr (0+8)
  2259  004DBE  5153               	movf	(?_SectorToFpga+1)^(__Lparam& (0+65280)),w
  2260  004DC0  EC35  F03C         	call	_SPI
  2261                           ;adf.c: 704: SPI(dsksyncl);
  2262  004DC4  0100               	movlb	__Lparam shr (0+8)
  2263  004DC6  5154               	movf	(?_SectorToFpga+2)^(__Lparam& (0+65280)),w
  2264  004DC8  EC35  F03C         	call	_SPI
  2265                           ;adf.c: 705: SPI(dsksynch);
  2266  004DCC  0100               	movlb	__Lparam shr (0+8)
  2267  004DCE  5153               	movf	(?_SectorToFpga+1)^(__Lparam& (0+65280)),w
  2268  004DD0  EC35  F03C         	call	_SPI
  2269                           ;adf.c: 706: SPI(dsksyncl);
  2270  004DD4  0100               	movlb	__Lparam shr (0+8)
  2271  004DD6  5154               	movf	(?_SectorToFpga+2)^(__Lparam& (0+65280)),w
  2272  004DD8  EC35  F03C         	call	_SPI
  2273                           ;adf.c: 709: csum[0]=0;
  2274  004DDC  0100               	movlb	__Lparam shr (0+8)
  2275  004DDE  6B58               	clrf	(?a_SectorToFpga+3)^(__Lparam& (0+65280)),
      +                          b
  2276                           ;adf.c: 710: csum[1]=0;
  2277  004DE0  6B59               	clrf	(?a_SectorToFpga+4)^(__Lparam& (0+65280)),
      +                          b
  2278                           ;adf.c: 711: csum[2]=0;
  2279  004DE2  6B5A               	clrf	(?a_SectorToFpga+5)^(__Lparam& (0+65280)),
      +                          b
  2280                           ;adf.c: 712: csum[3]=0;
  2281  004DE4  6B5B               	clrf	(?a_SectorToFpga+6)^(__Lparam& (0+65280)),
      +                          b
  2282                           ;adf.c: 715: c=0x55;
  2283                           ; _c allocated to fsr2l
  2284  004DE6  0E55               	movlw	85
  2285  004DE8  6ED9               	movwf	fsr2l,c
  2286                           ;adf.c: 716: csum[0]^=c;
  2287  004DEA  1B58               	xorwf	(?a_SectorToFpga+3)^(__Lparam& (0+65280))
      +                          ,f,b
  2288                           ;adf.c: 717: SPI(c);
  2289  004DEC  EC35  F03C         	call	_SPI
  2290                           ;adf.c: 718: c=(track>>1)&0x55;
  2291  004DF0  0100               	movlb	__Lparam shr (0+8)
  2292  004DF2  90D8               	bcf	status,0,c
  2293  004DF4  3152               	rrcf	?_SectorToFpga^(__Lparam& (0+65280)),w
  2294  004DF6  0B55               	andlw	85
  2295  004DF8  6F57               	movwf	(?a_SectorToFpga+2)^(__Lparam& (0+65280))
      +                          ,b
  2296                           ;adf.c: 719: csum[1]^=c;
  2297  004DFA  5157               	movf	(?a_SectorToFpga+2)^(__Lparam& (0+65280)),
      +                          w
  2298  004DFC  1B59               	xorwf	(?a_SectorToFpga+4)^(__Lparam& (0+65280))
      +                          ,f,b
  2299                           ;adf.c: 720: SPI(c);
  2300  004DFE  5157               	movf	(?a_SectorToFpga+2)^(__Lparam& (0+65280)),
      +                          w
  2301  004E00  EC35  F03C         	call	_SPI
  2302                           ;adf.c: 721: c=(sector>>1)&0x55;
  2303  004E04  0100               	movlb	__Lparam shr (0+8)
  2304  004E06  90D8               	bcf	status,0,c
  2305  004E08  3155               	rrcf	?a_SectorToFpga^(__Lparam& (0+65280)),w
  2306  004E0A  0B55               	andlw	85
  2307  004E0C  6F57               	movwf	(?a_SectorToFpga+2)^(__Lparam& (0+65280))
      +                          ,b
  2308                           ;adf.c: 722: csum[2]^=c;
  2309  004E0E  5157               	movf	(?a_SectorToFpga+2)^(__Lparam& (0+65280)),
      +                          w
  2310  004E10  1B5A               	xorwf	(?a_SectorToFpga+5)^(__Lparam& (0+65280))
      +                          ,f,b
  2311                           ;adf.c: 723: SPI(c);
  2312  004E12  5157               	movf	(?a_SectorToFpga+2)^(__Lparam& (0+65280)),
      +                          w
  2313  004E14  EC35  F03C         	call	_SPI
  2314                           ;adf.c: 724: c=((11-sector)>>1)&0x55;
  2315  004E18  0100               	movlb	__Lparam shr (0+8)
  2316  004E1A  5155               	movf	?a_SectorToFpga^(__Lparam& (0+65280)),w
  2317  004E1C  080B               	sublw	11
  2318  004E1E  6E00               	movwf	btemp,c
  2319  004E20  90D8               	bcf	status,0,c
  2320  004E22  3000               	rrcf	btemp,w,c
  2321  004E24  0B55               	andlw	85
  2322  004E26  6F57               	movwf	(?a_SectorToFpga+2)^(__Lparam& (0+65280))
      +                          ,b
  2323                           ;adf.c: 725: csum[3]^=c;
  2324  004E28  5157               	movf	(?a_SectorToFpga+2)^(__Lparam& (0+65280)),
      +                          w
  2325  004E2A  1B5B               	xorwf	(?a_SectorToFpga+6)^(__Lparam& (0+65280))
      +                          ,f,b
  2326                           ;adf.c: 726: SPI(c);
  2327  004E2C  5157               	movf	(?a_SectorToFpga+2)^(__Lparam& (0+65280)),
      +                          w
  2328  004E2E  EC35  F03C         	call	_SPI
  2329                           ;adf.c: 729: c=0x55;
  2330  004E32  0E55               	movlw	85
  2331  004E34  6ED9               	movwf	fsr2l,c
  2332                           ;adf.c: 730: csum[0]^=c;
  2333  004E36  0100               	movlb	__Lparam shr (0+8)
  2334  004E38  1B58               	xorwf	(?a_SectorToFpga+3)^(__Lparam& (0+65280))
      +                          ,f,b
  2335                           ;adf.c: 731: SPI(c);
  2336  004E3A  EC35  F03C         	call	_SPI
  2337                           ;adf.c: 732: c=track&0x55;
  2338  004E3E  0100               	movlb	__Lparam shr (0+8)
  2339  004E40  5152               	movf	?_SectorToFpga^(__Lparam& (0+65280)),w
  2340  004E42  0B55               	andlw	85
  2341  004E44  6F57               	movwf	(?a_SectorToFpga+2)^(__Lparam& (0+65280))
      +                          ,b
  2342                           ;adf.c: 733: csum[1]^=c;
  2343  004E46  5157               	movf	(?a_SectorToFpga+2)^(__Lparam& (0+65280)),
      +                          w
  2344  004E48  1B59               	xorwf	(?a_SectorToFpga+4)^(__Lparam& (0+65280))
      +                          ,f,b
  2345                           ;adf.c: 734: SPI(c);
  2346  004E4A  5157               	movf	(?a_SectorToFpga+2)^(__Lparam& (0+65280)),
      +                          w
  2347  004E4C  EC35  F03C         	call	_SPI
  2348                           ;adf.c: 735: c=sector&0x55;
  2349  004E50  0100               	movlb	__Lparam shr (0+8)
  2350  004E52  5155               	movf	?a_SectorToFpga^(__Lparam& (0+65280)),w
  2351  004E54  0B55               	andlw	85
  2352  004E56  6F57               	movwf	(?a_SectorToFpga+2)^(__Lparam& (0+65280))
      +                          ,b
  2353                           ;adf.c: 736: csum[2]^=c;
  2354  004E58  5157               	movf	(?a_SectorToFpga+2)^(__Lparam& (0+65280)),
      +                          w
  2355  004E5A  1B5A               	xorwf	(?a_SectorToFpga+5)^(__Lparam& (0+65280))
      +                          ,f,b
  2356                           ;adf.c: 737: SPI(c);
  2357  004E5C  5157               	movf	(?a_SectorToFpga+2)^(__Lparam& (0+65280)),
      +                          w
  2358  004E5E  EC35  F03C         	call	_SPI
  2359                           ;adf.c: 738: c=(11-sector)&0x55;
  2360  004E62  0100               	movlb	__Lparam shr (0+8)
  2361  004E64  5155               	movf	?a_SectorToFpga^(__Lparam& (0+65280)),w
  2362  004E66  080B               	sublw	11
  2363  004E68  0B55               	andlw	85
  2364  004E6A  6F57               	movwf	(?a_SectorToFpga+2)^(__Lparam& (0+65280))
      +                          ,b
  2365                           ;adf.c: 739: csum[3]^=c;
  2366  004E6C  5157               	movf	(?a_SectorToFpga+2)^(__Lparam& (0+65280)),
      +                          w
  2367  004E6E  1B5B               	xorwf	(?a_SectorToFpga+6)^(__Lparam& (0+65280))
      +                          ,f,b
  2368                           ;adf.c: 740: SPI(c);
  2369  004E70  5157               	movf	(?a_SectorToFpga+2)^(__Lparam& (0+65280)),
      +                          w
  2370  004E72  EC35  F03C         	call	_SPI
  2371                           ;adf.c: 743: for (i=0;i<32;i++)
  2372  004E76  0100               	movlb	__Lparam shr (0+8)
  2373  004E78  6B56               	clrf	(?a_SectorToFpga+1)^(__Lparam& (0+65280)),
      +                          b
  2374  004E7A                     l114:
  2375                           ;adf.c: 744: SPI(0x55);
  2376  004E7A  0E55               	movlw	85
  2377  004E7C  EC35  F03C         	call	_SPI
  2378  004E80  0100               	movlb	__Lparam shr (0+8)
  2379  004E82  2B56               	incf	(?a_SectorToFpga+1)^(__Lparam& (0+65280)),
      +                          f,b
  2380  004E84  0E1F               	movlw	31
  2381  004E86  6556               	cpfsgt	(?a_SectorToFpga+1)^(__Lparam& (0+65280)
      +                          ),b
  2382  004E88  D7F8               	goto	l114
  2383                           ;adf.c: 747: SPI((csum[0]>>1)|0xaa);
  2384  004E8A  90D8               	bcf	status,0,c
  2385  004E8C  3158               	rrcf	(?a_SectorToFpga+3)^(__Lparam& (0+65280)),
      +                          w
  2386  004E8E  09AA               	iorlw	-86
  2387  004E90  EC35  F03C         	call	_SPI
  2388                           ;adf.c: 748: SPI((csum[1]>>1)|0xaa);
  2389  004E94  0100               	movlb	__Lparam shr (0+8)
  2390  004E96  90D8               	bcf	status,0,c
  2391  004E98  3159               	rrcf	(?a_SectorToFpga+4)^(__Lparam& (0+65280)),
      +                          w
  2392  004E9A  09AA               	iorlw	-86
  2393  004E9C  EC35  F03C         	call	_SPI
  2394                           ;adf.c: 749: SPI((csum[2]>>1)|0xaa);
  2395  004EA0  0100               	movlb	__Lparam shr (0+8)
  2396  004EA2  90D8               	bcf	status,0,c
  2397  004EA4  315A               	rrcf	(?a_SectorToFpga+5)^(__Lparam& (0+65280)),
      +                          w
  2398  004EA6  09AA               	iorlw	-86
  2399  004EA8  EC35  F03C         	call	_SPI
  2400                           ;adf.c: 750: SPI((csum[3]>>1)|0xaa);
  2401  004EAC  0100               	movlb	__Lparam shr (0+8)
  2402  004EAE  90D8               	bcf	status,0,c
  2403  004EB0  315B               	rrcf	(?a_SectorToFpga+6)^(__Lparam& (0+65280)),
      +                          w
  2404  004EB2  09AA               	iorlw	-86
  2405  004EB4  EC35  F03C         	call	_SPI
  2406                           ;adf.c: 751: SPI(csum[0]|0xaa);
  2407  004EB8  0100               	movlb	__Lparam shr (0+8)
  2408  004EBA  5158               	movf	(?a_SectorToFpga+3)^(__Lparam& (0+65280)),
      +                          w
  2409  004EBC  09AA               	iorlw	-86
  2410  004EBE  EC35  F03C         	call	_SPI
  2411                           ;adf.c: 752: SPI(csum[1]|0xaa);
  2412  004EC2  0100               	movlb	__Lparam shr (0+8)
  2413  004EC4  5159               	movf	(?a_SectorToFpga+4)^(__Lparam& (0+65280)),
      +                          w
  2414  004EC6  09AA               	iorlw	-86
  2415  004EC8  EC35  F03C         	call	_SPI
  2416                           ;adf.c: 753: SPI(csum[2]|0xaa);
  2417  004ECC  0100               	movlb	__Lparam shr (0+8)
  2418  004ECE  515A               	movf	(?a_SectorToFpga+5)^(__Lparam& (0+65280)),
      +                          w
  2419  004ED0  09AA               	iorlw	-86
  2420  004ED2  EC35  F03C         	call	_SPI
  2421                           ;adf.c: 754: SPI(csum[3]|0xaa);
  2422  004ED6  0100               	movlb	__Lparam shr (0+8)
  2423  004ED8  515B               	movf	(?a_SectorToFpga+6)^(__Lparam& (0+65280)),
      +                          w
  2424  004EDA  09AA               	iorlw	-86
  2425  004EDC  EC35  F03C         	call	_SPI
  2426                           ;adf.c: 757: csum[0]=0;
  2427  004EE0  0100               	movlb	__Lparam shr (0+8)
  2428  004EE2  6B58               	clrf	(?a_SectorToFpga+3)^(__Lparam& (0+65280)),
      +                          b
  2429                           ;adf.c: 758: csum[1]=0;
  2430  004EE4  6B59               	clrf	(?a_SectorToFpga+4)^(__Lparam& (0+65280)),
      +                          b
  2431                           ;adf.c: 759: csum[2]=0;
  2432  004EE6  6B5A               	clrf	(?a_SectorToFpga+5)^(__Lparam& (0+65280)),
      +                          b
  2433                           ;adf.c: 760: csum[3]=0;
  2434  004EE8  6B5B               	clrf	(?a_SectorToFpga+6)^(__Lparam& (0+65280)),
      +                          b
  2435                           ;adf.c: 761: i=128;
  2436                           ; _i allocated to fsr0l
  2437  004EEA  0E80               	movlw	128
  2438  004EEC  6EE9               	movwf	fsr0l,c
  2439                           ;adf.c: 762: p=secbuf;
  2440  004EEE  0EFF               	movlw	low _secbuf
  2441  004EF0  6EE1               	movwf	fsr1l,c
  2442  004EF2  0E03               	movlw	high _secbuf
  2443  004EF4  6EE2               	movwf	fsr1h,c
  2444  004EF6                     l119:
  2445                           ;adf.c: 763: do
  2446                           ;adf.c: 764: {
  2447  004EF6  CFE6 FFD9          	movff	postinc1,fsr2l
  2448                           ;adf.c: 766: csum[0]^=c>>1;
  2449  004EFA  90D8               	bcf	status,0,c
  2450  004EFC  30D9               	rrcf	fsr2l,w,c
  2451  004EFE  0100               	movlb	__Lparam shr (0+8)
  2452  004F00  1B58               	xorwf	(?a_SectorToFpga+3)^(__Lparam& (0+65280))
      +                          ,f,b
  2453                           ;adf.c: 767: csum[0]^=c;
  2454  004F02  50D9               	movf	fsr2l,w,c
  2455  004F04  1B58               	xorwf	(?a_SectorToFpga+3)^(__Lparam& (0+65280))
      +                          ,f,b
  2456                           ;adf.c: 768: c=*(p++);
  2457  004F06  CFE6 FFD9          	movff	postinc1,fsr2l
  2458                           ;adf.c: 769: csum[1]^=c>>1;
  2459  004F0A  90D8               	bcf	status,0,c
  2460  004F0C  30D9               	rrcf	fsr2l,w,c
  2461  004F0E  1B59               	xorwf	(?a_SectorToFpga+4)^(__Lparam& (0+65280))
      +                          ,f,b
  2462                           ;adf.c: 770: csum[1]^=c;
  2463  004F10  50D9               	movf	fsr2l,w,c
  2464  004F12  1B59               	xorwf	(?a_SectorToFpga+4)^(__Lparam& (0+65280))
      +                          ,f,b
  2465                           ;adf.c: 771: c=*(p++);
  2466  004F14  CFE6 FFD9          	movff	postinc1,fsr2l
  2467                           ;adf.c: 772: csum[2]^=c>>1;
  2468  004F18  90D8               	bcf	status,0,c
  2469  004F1A  30D9               	rrcf	fsr2l,w,c
  2470  004F1C  1B5A               	xorwf	(?a_SectorToFpga+5)^(__Lparam& (0+65280))
      +                          ,f,b
  2471                           ;adf.c: 773: csum[2]^=c;
  2472  004F1E  50D9               	movf	fsr2l,w,c
  2473  004F20  1B5A               	xorwf	(?a_SectorToFpga+5)^(__Lparam& (0+65280))
      +                          ,f,b
  2474                           ;adf.c: 774: c=*(p++);
  2475  004F22  CFE6 FFD9          	movff	postinc1,fsr2l
  2476                           ;adf.c: 775: csum[3]^=c>>1;
  2477  004F26  90D8               	bcf	status,0,c
  2478  004F28  30D9               	rrcf	fsr2l,w,c
  2479  004F2A  1B5B               	xorwf	(?a_SectorToFpga+6)^(__Lparam& (0+65280))
      +                          ,f,b
  2480                           ;adf.c: 776: csum[3]^=c;
  2481  004F2C  50D9               	movf	fsr2l,w,c
  2482  004F2E  1B5B               	xorwf	(?a_SectorToFpga+6)^(__Lparam& (0+65280))
      +                          ,f,b
  2483                           ;adf.c: 777: }
  2484  004F30  2EE9               	decfsz	fsr0l,f,c
  2485  004F32  D7E1               	goto	l119
  2486                           ;adf.c: 779: csum[0]&=0x55;
  2487  004F34  0E55               	movlw	85
  2488  004F36  1758               	andwf	(?a_SectorToFpga+3)^(__Lparam& (0+65280))
      +                          ,f,b
  2489                           ;adf.c: 780: csum[1]&=0x55;
  2490  004F38  1759               	andwf	(?a_SectorToFpga+4)^(__Lparam& (0+65280))
      +                          ,f,b
  2491                           ;adf.c: 781: csum[2]&=0x55;
  2492  004F3A  175A               	andwf	(?a_SectorToFpga+5)^(__Lparam& (0+65280))
      +                          ,f,b
  2493                           ;adf.c: 782: csum[3]&=0x55;
  2494  004F3C  175B               	andwf	(?a_SectorToFpga+6)^(__Lparam& (0+65280))
      +                          ,f,b
  2495                           ;adf.c: 786: SPI((csum[0]>>1)|0xaa);
  2496  004F3E  90D8               	bcf	status,0,c
  2497  004F40  3158               	rrcf	(?a_SectorToFpga+3)^(__Lparam& (0+65280)),
      +                          w
  2498  004F42  09AA               	iorlw	-86
  2499  004F44  EC35  F03C         	call	_SPI
  2500                           ;adf.c: 787: SPI((csum[1]>>1)|0xaa);
  2501  004F48  0100               	movlb	__Lparam shr (0+8)
  2502  004F4A  90D8               	bcf	status,0,c
  2503  004F4C  3159               	rrcf	(?a_SectorToFpga+4)^(__Lparam& (0+65280)),
      +                          w
  2504  004F4E  09AA               	iorlw	-86
  2505  004F50  EC35  F03C         	call	_SPI
  2506                           ;adf.c: 788: SPI((csum[2]>>1)|0xaa);
  2507  004F54  0100               	movlb	__Lparam shr (0+8)
  2508  004F56  90D8               	bcf	status,0,c
  2509  004F58  315A               	rrcf	(?a_SectorToFpga+5)^(__Lparam& (0+65280)),
      +                          w
  2510  004F5A  09AA               	iorlw	-86
  2511  004F5C  EC35  F03C         	call	_SPI
  2512                           ;adf.c: 789: SPI((csum[3]>>1)|0xaa);
  2513  004F60  0100               	movlb	__Lparam shr (0+8)
  2514  004F62  90D8               	bcf	status,0,c
  2515  004F64  315B               	rrcf	(?a_SectorToFpga+6)^(__Lparam& (0+65280)),
      +                          w
  2516  004F66  09AA               	iorlw	-86
  2517  004F68  EC35  F03C         	call	_SPI
  2518                           ;adf.c: 790: SPI(csum[0]|0xaa);
  2519  004F6C  0100               	movlb	__Lparam shr (0+8)
  2520  004F6E  5158               	movf	(?a_SectorToFpga+3)^(__Lparam& (0+65280)),
      +                          w
  2521  004F70  09AA               	iorlw	-86
  2522  004F72  EC35  F03C         	call	_SPI
  2523                           ;adf.c: 791: SPI(csum[1]|0xaa);
  2524  004F76  0100               	movlb	__Lparam shr (0+8)
  2525  004F78  5159               	movf	(?a_SectorToFpga+4)^(__Lparam& (0+65280)),
      +                          w
  2526  004F7A  09AA               	iorlw	-86
  2527  004F7C  EC35  F03C         	call	_SPI
  2528                           ;adf.c: 792: SPI(csum[2]|0xaa);
  2529  004F80  0100               	movlb	__Lparam shr (0+8)
  2530  004F82  515A               	movf	(?a_SectorToFpga+5)^(__Lparam& (0+65280)),
      +                          w
  2531  004F84  09AA               	iorlw	-86
  2532  004F86  EC35  F03C         	call	_SPI
  2533                           ;adf.c: 793: SPI(csum[3]|0xaa);
  2534  004F8A  0100               	movlb	__Lparam shr (0+8)
  2535  004F8C  515B               	movf	(?a_SectorToFpga+6)^(__Lparam& (0+65280)),
      +                          w
  2536  004F8E  09AA               	iorlw	-86
  2537  004F90  EC35  F03C         	call	_SPI
  2538                           ;adf.c: 796: i=128;
  2539  004F94  0E80               	movlw	128
  2540  004F96  6EE9               	movwf	fsr0l,c
  2541                           ;adf.c: 797: p=secbuf;
  2542  004F98  0EFF               	movlw	low _secbuf
  2543  004F9A  6EE1               	movwf	fsr1l,c
  2544  004F9C  0E03               	movlw	high _secbuf
  2545  004F9E  6EE2               	movwf	fsr1h,c
  2546  004FA0                     l122:
  2547                           ;adf.c: 798: do
  2548                           ;adf.c: 799: {
  2549  004FA0  CFE6 FFD9          	movff	postinc1,fsr2l
  2550                           ;adf.c: 801: c>>=1;
  2551  004FA4  90D8               	bcf	status,0,c
  2552  004FA6  32D9               	rrcf	fsr2l,f,c
  2553                           ;adf.c: 802: c|=0xaa;
  2554  004FA8  0EAA               	movlw	170
  2555  004FAA  12D9               	iorwf	fsr2l,f,c
  2556                           ;adf.c: 803: SSPBUF=c;
  2557  004FAC  CFD9 FFC9          	movff	fsr2l,4041	;volatile
  2558                           ;adf.c: 804: while (!BF);
  2559  004FB0                     l123:
  2560  004FB0  A0C7               	btfss	4039,0,c	;volatile
  2561  004FB2  D7FE               	goto	l123
  2562                           ;adf.c: 806: c=*(p++);
  2563  004FB4  CFE6 FFD9          	movff	postinc1,fsr2l
  2564                           ;adf.c: 807: c>>=1;
  2565  004FB8  90D8               	bcf	status,0,c
  2566  004FBA  32D9               	rrcf	fsr2l,f,c
  2567                           ;adf.c: 808: c|=0xaa;
  2568  004FBC  0EAA               	movlw	170
  2569  004FBE  12D9               	iorwf	fsr2l,f,c
  2570                           ;adf.c: 809: SSPBUF=c;
  2571  004FC0  CFD9 FFC9          	movff	fsr2l,4041	;volatile
  2572                           ;adf.c: 810: while (!BF);
  2573  004FC4                     l126:
  2574  004FC4  A0C7               	btfss	4039,0,c	;volatile
  2575  004FC6  D7FE               	goto	l126
  2576                           ;adf.c: 812: c=*(p++);
  2577  004FC8  CFE6 FFD9          	movff	postinc1,fsr2l
  2578                           ;adf.c: 813: c>>=1;
  2579  004FCC  90D8               	bcf	status,0,c
  2580  004FCE  32D9               	rrcf	fsr2l,f,c
  2581                           ;adf.c: 814: c|=0xaa;
  2582  004FD0  0EAA               	movlw	170
  2583  004FD2  12D9               	iorwf	fsr2l,f,c
  2584                           ;adf.c: 815: SSPBUF=c;
  2585  004FD4  CFD9 FFC9          	movff	fsr2l,4041	;volatile
  2586                           ;adf.c: 816: while (!BF);
  2587  004FD8                     l129:
  2588  004FD8  A0C7               	btfss	4039,0,c	;volatile
  2589  004FDA  D7FE               	goto	l129
  2590                           ;adf.c: 818: c=*(p++);
  2591  004FDC  CFE6 FFD9          	movff	postinc1,fsr2l
  2592                           ;adf.c: 819: c>>=1;
  2593  004FE0  90D8               	bcf	status,0,c
  2594  004FE2  32D9               	rrcf	fsr2l,f,c
  2595                           ;adf.c: 820: c|=0xaa;
  2596  004FE4  0EAA               	movlw	170
  2597  004FE6  12D9               	iorwf	fsr2l,f,c
  2598                           ;adf.c: 821: SSPBUF=c;
  2599  004FE8  CFD9 FFC9          	movff	fsr2l,4041	;volatile
  2600                           ;adf.c: 822: while (!BF);
  2601  004FEC                     l132:
  2602  004FEC  A0C7               	btfss	4039,0,c	;volatile
  2603  004FEE  D7FE               	goto	l132
  2604                           ;adf.c: 823: }
  2605  004FF0  2EE9               	decfsz	fsr0l,f,c
  2606  004FF2  D7D6               	goto	l122
  2607                           ;adf.c: 827: i=128;
  2608                           ; _i allocated to fsr2l
  2609  004FF4  0E80               	movlw	128
  2610  004FF6  6ED9               	movwf	fsr2l,c
  2611                           ;adf.c: 828: p=secbuf;
  2612  004FF8  0EFF               	movlw	low _secbuf
  2613  004FFA  6EE1               	movwf	fsr1l,c
  2614  004FFC  0E03               	movlw	high _secbuf
  2615  004FFE  6EE2               	movwf	fsr1h,c
  2616  005000                     l137:
  2617                           ;adf.c: 829: do
  2618                           ;adf.c: 830: {
  2619                           ; _c allocated to fsr0l
  2620  005000  CFE6 FFE9          	movff	postinc1,fsr0l
  2621                           ;adf.c: 832: SSPBUF=c|0xaa;
  2622  005004  50E9               	movf	fsr0l,w,c
  2623  005006  09AA               	iorlw	-86
  2624  005008  6EC9               	movwf	4041,c	;volatile
  2625                           ;adf.c: 833: while (!BF);
  2626  00500A                     l138:
  2627  00500A  A0C7               	btfss	4039,0,c	;volatile
  2628  00500C  D7FE               	goto	l138
  2629                           ;adf.c: 834: c=*(p++);
  2630  00500E  CFE6 FFE9          	movff	postinc1,fsr0l
  2631                           ;adf.c: 835: SSPBUF=c|0xaa;
  2632  005012  50E9               	movf	fsr0l,w,c
  2633  005014  09AA               	iorlw	-86
  2634  005016  6EC9               	movwf	4041,c	;volatile
  2635                           ;adf.c: 836: while (!BF);
  2636  005018                     l141:
  2637  005018  A0C7               	btfss	4039,0,c	;volatile
  2638  00501A  D7FE               	goto	l141
  2639                           ;adf.c: 837: c=*(p++);
  2640  00501C  CFE6 FFE9          	movff	postinc1,fsr0l
  2641                           ;adf.c: 838: SSPBUF=c|0xaa;
  2642  005020  50E9               	movf	fsr0l,w,c
  2643  005022  09AA               	iorlw	-86
  2644  005024  6EC9               	movwf	4041,c	;volatile
  2645                           ;adf.c: 839: while (!BF);
  2646  005026                     l144:
  2647  005026  A0C7               	btfss	4039,0,c	;volatile
  2648  005028  D7FE               	goto	l144
  2649                           ;adf.c: 840: c3 = SSPBUF;
  2650  00502A  50C9               	movf	4041,w,c	;volatile
  2651  00502C  6EF3               	movwf	prodl,c
  2652                           ;adf.c: 841: c=*(p++);
  2653                           ; _c allocated to prodh
  2654  00502E  CFE6 FFF4          	movff	postinc1,prodh
  2655                           ;adf.c: 842: SSPBUF=c|0xaa;
  2656  005032  50F4               	movf	prodh,w,c
  2657  005034  09AA               	iorlw	-86
  2658  005036  6EC9               	movwf	4041,c	;volatile
  2659                           ;adf.c: 843: while (!BF);
  2660  005038                     l147:
  2661  005038  A0C7               	btfss	4039,0,c	;volatile
  2662  00503A  D7FE               	goto	l147
  2663                           ;adf.c: 844: c4 = SSPBUF;
  2664  00503C  50C9               	movf	4041,w,c	;volatile
  2665  00503E  6EE9               	movwf	fsr0l,c
  2666                           ;adf.c: 845: }
  2667  005040  2ED9               	decfsz	fsr2l,f,c
  2668  005042  D7DE               	goto	l137
  2669                           ;adf.c: 848: return((c3<<8)|c4);
  2670  005044  50E9               	movf	fsr0l,w,c
  2671  005046  CFF3 F000          	movff	prodl,btemp
  2672  00504A  6A01               	clrf	btemp+1,c
  2673  00504C  C000  F001         	movff	btemp,btemp+1
  2674  005050  6A00               	clrf	btemp,c
  2675  005052  1200               	iorwf	btemp,f,c
  2676                           ;adf.c: 849: }
  2677  005054  0C00               	retlw	0
  2678  005056  FFFF               	dw	65535	; Nop inserted for errata
  2679  005058  D6A3               	goto	f4192
  2680  00505A                     __end_of_SectorToFpga:
  2681                           ;adf.c: 852: void SectorGapToFpga()
  2682                           ;adf.c: 853: {
  2683  00505A                     _SectorGapToFpga:
  2684                           ; errata NOP at function entry point
  2685  00505A  FFFF               	dw	65535
  2686  00505C                     f4202:
  2687  000000                     
  2688                           ;adf.c: 854: unsigned char i;
  2689  00505C  0EBE               	movlw	190
  2690  00505E  0100               	movlb	__Lparam shr (0+8)
  2691  005060  6F52               	movwf	?a_SectorGapToFpga^(__Lparam& (0+65280)),
      +                          b
  2692  005062                     l153:
  2693                           ;adf.c: 856: do
  2694                           ;adf.c: 857: {
  2695  005062  0EAA               	movlw	170
  2696  005064  EC35  F03C         	call	_SPI
  2697                           ;adf.c: 859: SPI(0xAA);
  2698  005068  0EAA               	movlw	170
  2699  00506A  EC35  F03C         	call	_SPI
  2700                           ;adf.c: 860: }
  2701  00506E  0100               	movlb	__Lparam shr (0+8)
  2702  005070  2F52               	decfsz	?a_SectorGapToFpga^(__Lparam& (0+65280))
      +                          ,f,b
  2703  005072  D7F7               	goto	l153
  2704                           ;adf.c: 862: }
  2705  005074  0012               	return	
  2706  005076  FFFF               	dw	65535	; Nop inserted for errata
  2707  005078  D7F1               	goto	f4202
  2708  00507A                     __end_of_SectorGapToFpga:
  2709                           ;adf.c: 865: void SectorHeaderToFpga(unsigned ch
      +                          ar n, unsigned char dsksynch, unsigned char dsks
      +                          yncl)
  2710                           ;adf.c: 866: {
  2711  00507A  0052               	dw	?_SectorHeaderToFpga
  2712  00507C                     _SectorHeaderToFpga:
  2713                           ; errata NOP at function entry point
  2714  00507C  FFFF               	dw	65535
  2715  00507E                     f4212:
  2716  000000                     
  2717                           ;_n stored from wreg
  2718                           ;adf.c: 867: if (n)
  2719                           ;_n stored from wreg
  2720  00507E  0100               	movlb	__Lparam shr (0+8)
  2721  005080  6F54               	movwf	?a_SectorHeaderToFpga^(__Lparam& (0+65280
      +                          )),b
  2722  005082  52E8               	movf	wreg,f,c
  2723  005084  E019               	bz	l155
  2724                           ;adf.c: 868: {
  2725  005086  0EAA               	movlw	170
  2726  005088  EC35  F03C         	call	_SPI
  2727                           ;adf.c: 870: SPI(0xAA);
  2728  00508C  0EAA               	movlw	170
  2729  00508E  EC35  F03C         	call	_SPI
  2730                           ;adf.c: 872: if (--n)
  2731  005092  0100               	movlb	__Lparam shr (0+8)
  2732  005094  4F54               	dcfsnz	?a_SectorHeaderToFpga^(__Lparam& (0+6528
      +                          0)),f,b
  2733  005096  D010               	goto	l155
  2734                           ;adf.c: 873: {
  2735  005098  0EAA               	movlw	170
  2736  00509A  EC35  F03C         	call	_SPI
  2737                           ;adf.c: 875: SPI(0xAA);
  2738  00509E  0EAA               	movlw	170
  2739  0050A0  EC35  F03C         	call	_SPI
  2740                           ;adf.c: 877: if (--n)
  2741  0050A4  0100               	movlb	__Lparam shr (0+8)
  2742  0050A6  4F54               	dcfsnz	?a_SectorHeaderToFpga^(__Lparam& (0+6528
      +                          0)),f,b
  2743  0050A8  D007               	goto	l155
  2744                           ;adf.c: 878: {
  2745  0050AA  5152               	movf	?_SectorHeaderToFpga^(__Lparam& (0+65280))
      +                          ,w
  2746  0050AC  EC35  F03C         	call	_SPI
  2747                           ;adf.c: 880: SPI(dsksyncl);
  2748  0050B0  0100               	movlb	__Lparam shr (0+8)
  2749  0050B2  5153               	movf	(?_SectorHeaderToFpga+1)^(__Lparam& (0+652
      +                          80)),w
  2750  0050B4  EC35  F03C         	call	_SPI
  2751  0050B8                     l155:
  2752                           ;adf.c: 881: }
  2753  0050B8  0012               	return	
  2754  0050BA  FFFF               	dw	65535	; Nop inserted for errata
  2755  0050BC  D7E0               	goto	f4212
  2756  0050BE                     __end_of_SectorHeaderToFpga:
  2757                           
  2758                           	psect	const
  2759  000FCC                     u39:
  2760  000FCC  20                 	db	32
  2761  000FCD  20                 	db	32
  2762  000FCE  57                 	db	87	;'W'
  2763  000FCF  72                 	db	114	;'r'
  2764  000FD0  69                 	db	105	;'i'
  2765  000FD1  74                 	db	116	;'t'
  2766  000FD2  65                 	db	101	;'e'
  2767  000FD3  54                 	db	84	;'T'
  2768  000FD4  72                 	db	114	;'r'
  2769  000FD5  61                 	db	97	;'a'
  2770  000FD6  63                 	db	99	;'c'
  2771  000FD7  6B                 	db	107	;'k'
  2772  000FD8  00                 	db	0
  2773  000FD9                     u19:
  2774  000FD9  20                 	db	32
  2775  000FDA  20                 	db	32
  2776  000FDB  20                 	db	32
  2777  000FDC  20                 	db	32
  2778  000FDD  20                 	db	32
  2779  000FDE  49                 	db	73	;'I'
  2780  000FDF  6E                 	db	110	;'n'
  2781  000FE0  73                 	db	115	;'s'
  2782  000FE1  65                 	db	101	;'e'
  2783  000FE2  72                 	db	114	;'r'
  2784  000FE3  74                 	db	116	;'t'
  2785  000FE4  69                 	db	105	;'i'
  2786  000FE5  6E                 	db	110	;'n'
  2787  000FE6  67                 	db	103	;'g'
  2788  000FE7  00                 	db	0
  2789  000FE8                     u29:
  2790  000FE8  20                 	db	32
  2791  000FE9  20                 	db	32
  2792  000FEA  20                 	db	32
  2793  000FEB  20                 	db	32
  2794  000FEC  20                 	db	32
  2795  000FED  66                 	db	102	;'f'
  2796  000FEE  6C                 	db	108	;'l'
  2797  000FEF  6F                 	db	111	;'o'
  2798  000FF0  70                 	db	112	;'p'
  2799  000FF1  70                 	db	112	;'p'
  2800  000FF2  79                 	db	121	;'y'
  2801  000FF3  2E                 	db	46
  2802  000FF4  2E                 	db	46
  2803  000FF5  2E                 	db	46
  2804  000FF6  00                 	db	0
  2805  000000                     
  2806  000000                     
  2807  000000                     
  2808  000000                     
  2809  000000                     
  2810  000000                     
  2811  000000                     
  2812  000000                     
  2813  000000                     
  2814  000000                     
  2815  000000                     
  2816  000000                     
  2817  000000                     
  2818  000000                     
  2819  000000                     
  2820  000000                     
  2821  000000                     
  2822  000000                     
  2823  000000                     
  2824  000000                     
  2825  000000                     
  2826  000000                     
  2827  000000                     
  2828  000000                     
  2829  000000                     
  2830  000000                     
  2831  000000                     
  2832  000000                     
  2833  000000                     
  2834  000000                     
  2835  000000                     
  2836  000000                     
  2837  000000                     
  2838  000000                     
  2839  000000                     
  2840  000000                     
  2841  000000                     
  2842  000000                     
  2843  000000                     
  2844  000000                     
  2845  000000                     
  2846  000000                     
  2847  000000                     
  2848  000000                     
  2849  000000                     
  2850  000000                     
  2851  000000                     
  2852  000000                     
  2853  000000                     
  2854  000000                     
  2855  000000                     
  2856  000000                     
  2857  000000                     
  2858  000000                     
  2859  000000                     
  2860  000000                     
  2861  000000                     
  2862  000000                     
  2863  000000                     
  2864  000000                     
  2865  000000                     
  2866  000000                     
  2867  000000                     
  2868  000000                     
  2869  000000                     
  2870  000000                     
  2871  000000                     
  2872  000000                     
  2873  000000                     
  2874  000000                     
  2875  000000                     
  2876  000000                     
  2877  000000                     
  2878  000000                     
  2879  000000                     
  2880  000000                     
  2881  000000                     
  2882  000000                     
  2883  000000                     
  2884  000000                     
  2885  000000                     
  2886  000000                     
  2887  000000                     
  2888  000000                     
  2889  000000                     
  2890  000000                     
  2891  000000                     
  2892  000000                     
  2893  000000                     
  2894  000000                     
  2895  000000                     
  2896  000000                     
  2897  000000                     
  2898  000000                     
  2899  000000                     
  2900  000000                     
  2901  000000                     
  2902  000000                     
  2903  000000                     
  2904  000000                     
  2905  000000                     
  2906  000000                     
  2907  000000                     
  2908  000000                     
  2909  000000                     
  2910  000000                     
  2911  000000                     
  2912  000000                     
  2913  000000                     
  2914  000000                     
  2915  000000                     
  2916  000000                     
  2917  000000                     
  2918  000000                     
  2919  000000                     
  2920  000000                     
  2921  000000                     
  2922  000000                     
  2923  000000                     
  2924  000000                     
  2925  000000                     
  2926  000000                     
  2927  000000                     
  2928  000000                     
  2929  000000                     
  2930  000000                     
  2931  000000                     
  2932  000000                     
  2933  000000                     
  2934  000000                     
  2935  000000                     
  2936  000000                     
  2937  000000                     
  2938  000000                     
  2939  000000                     
  2940  000000                     
  2941  000000                     
  2942  000000                     
  2943  000000                     
  2944  000000                     
  2945  000000                     
  2946  000000                     
  2947  000000                     
  2948  000000                     
  2949  000000                     
  2950  000000                     
  2951  000000                     
  2952  000000                     
  2953  000000                     
  2954  000000                     
  2955  000000                     
  2956  000000                     
  2957  000000                     
  2958  000000                     
  2959  000000                     
  2960  000000                     
  2961  000000                     
  2962  000000                     
  2963  000000                     
  2964  000000                     
  2965  000000                     
  2966  000000                     
  2967  000000                     
  2968  000000                     
  2969  000000                     
  2970  000000                     
  2971  000000                     
  2972  000000                     
  2973  000000                     
  2974  000000                     
  2975  000000                     
  2976  000000                     
  2977  000000                     
  2978  000000                     
  2979  000000                     
  2980  000000                     
  2981  000000                     
  2982  000000                     
  2983  000000                     
  2984  000000                     
  2985  000000                     
  2986  000000                     
  2987  000000                     
  2988  000000                     
  2989  000000                     
  2990  000000                     
  2991  000000                     
  2992  000000                     
  2993  000000                     
  2994  000000                     
  2995  000000                     
  2996  000000                     
  2997  000000                     
  2998  000000                     
  2999  000000                     
  3000  000000                     
  3001  000000                     
  3002  000000                     
  3003  000000                     
  3004  000000                     
  3005  000000                     
  3006  000000                     
  3007  000000                     
  3008  000000                     
  3009  000000                     
  3010  000000                     
  3011  000000                     
  3012  000000                     
  3013  000000                     
  3014  000000                     
  3015  000000                     
  3016  000000                     
  3017  000000                     
  3018  000000                     
  3019  000000                     
  3020  000000                     
  3021  000000                     
  3022  000000                     
  3023  000000                     
  3024  000000                     
  3025  000000                     
  3026  000000                     
  3027  000000                     
  3028  000000                     
  3029  000000                     
  3030  000000                     
  3031  000000                     
  3032  000000                     
  3033  000000                     
  3034  000000                     
  3035  000000                     
  3036  000000                     
  3037  000000                     
  3038  000000                     
  3039  000000                     
  3040  000000                     
  3041  000000                     
  3042  000000                     
  3043  000000                     
  3044  000000                     
  3045  000000                     
  3046  000000                     
  3047  000000                     
  3048  000000                     
  3049  000000                     
  3050  000000                     
  3051  000000                     
  3052  000000                     
  3053  000000                     
  3054  000000                     
  3055  000000                     
  3056  000000                     
  3057  000000                     
  3058  000000                     
  3059  000000                     
  3060  000000                     
  3061  000000                     
  3062  000000                     
  3063  000000                     
  3064  000000                     
  3065  000000                     
  3066  000000                     
  3067  000000                     
  3068  000000                     
  3069  000000                     
  3070  000000                     
  3071  000000                     
  3072  000000                     
  3073  000000                     
  3074  000000                     
  3075  000000                     
  3076  000000                     
  3077  000000                     
  3078  000000                     
  3079  000000                     
  3080  000000                     
  3081  000000                     
  3082  000000                     
  3083  000000                     
  3084  000000                     
  3085  000000                     
  3086  000000                     
  3087  000000                     
  3088  000000                     
  3089  000000                     
  3090  000000                     
  3091  000000                     
  3092  000000                     
  3093  000000                     
  3094  000000                     
  3095  000000                     
  3096  000000                     
  3097  000000                     
  3098  000000                     
  3099  000000                     
  3100  000000                     
  3101  000000                     
  3102  000000                     
  3103  000000                     
  3104  000000                     
  3105  000000                     
  3106                           
  3107                           	psect	bigbss
  3108  0005FF                     _Error:
  3109  0005FF                     	ds	1
  3110  000000                     
  3111  000000                     
  3112  000000                     
  3113  000000                     
  3114  000000                     
  3115  000000                     
  3116  000000                     
  3117  000000                     
  3118  000000                     
  3119  000000                     
  3120  000000                     
  3121  000000                     
  3122  000000                     
  3123  000000                     
  3124  000000                     
  3125  000000                     
  3126  000000                     
  3127  000000                     
  3128  000000                     
  3129  000000                     
  3130  000000                     
  3131  000000                     
  3132  000000                     
  3133  000000                     
  3134  000000                     
  3135  000000                     
  3136  000000                     
  3137  000000                     
  3138  000000                     
  3139  000000                     
  3140  000000                     
  3141  000000                     
  3142  000000                     
  3143  000000                     
  3144  000000                     
  3145  000000                     
  3146  000000                     
  3147  000000                     
  3148  000000                     
  3149  000000                     
  3150  000000                     
  3151  000000                     
  3152  000000                     
  3153  000000                     
  3154  000000                     
  3155  000000                     
  3156  000000                     
  3157  000000                     
  3158  000000                     
  3159  000000                     
  3160  000000                     
  3161  000000                     
  3162  000000                     
  3163  000000                     
  3164  000000                     
  3165  000000                     
  3166  000000                     
  3167  000000                     
  3168  000000                     
  3169  000000                     
  3170  000000                     
  3171  000000                     
  3172  000000                     
  3173  000000                     
  3174  000000                     
  3175  000000                     
  3176  000000                     
  3177  000000                     
  3178  000000                     
  3179  000000                     
  3180  000000                     
  3181  000000                     
  3182  000000                     
  3183  000000                     
  3184  000000                     
  3185  000000                     
  3186  000000                     
  3187  000000                     
  3188  000000                     
  3189  000000                     
  3190  000000                     
  3191  000000                     
  3192  000000                     
  3193  000000                     
  3194  000000                     
  3195  000000                     
  3196  000000                     
  3197                           
  3198                           	psect	bss
  3199  000200                     _pdfx:
  3200  000200                     	ds	2
  3201  000200                     _df:
  3202  000200                     	ds	96
  3203                           
  3204                           	psect	temp
  3205  000000                     btemp:
  3206  000000                     	ds	8
  3207                           prodh	equ	0xFF4
  3208                           prodl	equ	0xFF3
  3209                           indf0	equ	0xFEF
  3210                           postinc0	equ	0xFEE
  3211                           postdec0	equ	0xFED
  3212                           fsr0h	equ	0xFEA
  3213                           fsr0l	equ	0xFE9
  3214                           wreg	equ	0xFE8
  3215                           indf1	equ	0xFE7
  3216                           postinc1	equ	0xFE6
  3217                           postdec1	equ	0xFE5
  3218                           fsr1h	equ	0xFE2
  3219                           fsr1l	equ	0xFE1
  3220                           indf2	equ	0xFDF
  3221                           fsr2h	equ	0xFDA
  3222                           fsr2l	equ	0xFD9
  3223                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL2
Symbol Table                                           Mon Dec 07 22:12:00 2009

                   _OsdWrite 6FD0                    ?a_GetData 004C  
                  ?_OsdWrite 005D   __end_of_SectorHeaderToFpga 50BE  
                         l22 4096                           l32 42EE  
                         l41 44D0                           l33 435E  
                         l17 4018                           l26 410E  
                         l18 4050                           l51 46AC  
                         l43 4524                           l19 4088  
                         l36 4428                           l37 460C  
                         l29 4154                           l62 47BC  
                         l54 47C6                           l38 449A  
                         l55 47C0                           l39 4530  
                         l80 4B12                           l72 47EE  
                         l56 478E                           l48 456A  
                         l73 47FA                           l57 46FE  
                         l49 45D6                           l82 4B00  
                         l66 4894                           l83 490C  
                         l59 4718                           l92 4A24  
                         l84 49D4                           l68 4838  
                         l77 4B16                           l85 4A00  
                         l69 4890                           l86 49E0  
                         l95 4AFA                           l79 48A2  
                         l96 4B0E                           l88 49EC  
                         l98 4D96                           u19 0FD9  
                         u44 40B6                           u29 0FE8  
                         u45 40B2                           u39 0FCC  
                         u91 43A8                           _df 0202  
                 ?a_FindSync 004E                  ?a_GetHeader 0050  
                        l100 4B22                          l101 4D92  
                        l110 4D7A                          l111 4D8E  
                        l103 4D80                          l122 4FA0  
                        l114 4E7A                          l106 4C08  
                        l123 4FB0                          l132 4FEC  
                        l141 5018                          l109 4CB8  
                        l126 4FC4                          l119 4EF6  
                        l144 5026                          l153 5062  
                        l137 5000                          l129 4FD8  
                        l138 500A                          l155 50B8  
                        l147 5038                          u200 4490  
                        u130 43B4                          u400 47E2  
                        u601 49F6                          u530 48E8  
                        u620 49FA                          u710 4AF6  
                        u560 4908                          u810 4D76  
                        u490 4836                          _SPI 786A  
                        wreg 000FE8                 _SectorToFpga 4D9E  
                       f4012 41D2                         f4022 4200  
                       f4202 505C                         f4212 507E  
                       f4152 47EC                         f4162 489E  
                       f4172 4B1E                         f4092 4616  
                       f4192 4DA0                         f3922 4004  
                       f3952 4090                         f3972 40E4  
       __end_of_SectorToFpga 505A               _FileNextSector 32E6  
        ?a_UpdateDriveStatus 0042              __end_of_GetData 4D9C  
                       _file 029E              ?_FileNextSector 0065  
                       _pdfx 0200                         fsr0h 000FEA  
                       fsr1h 000FE2                         indf0 000FEF  
                       fsr0l 000FE9                         indf1 000FE7  
                       fsr1l 000FE1                         indf2 000FDF  
                       fsr2l 000FD9                         btemp 0000  
                ?a_ReadTrack 0045                         prodh 000FF4  
                       prodl 000FF3      __end_of_SectorGapToFpga 507A  
          ?a_SectorGapToFpga 0052         ?a_SectorHeaderToFpga 0054  
             ?a_SectorToFpga 0055                        _Error 05FF  
                 used_btemp0 0001                   used_btemp1 0001  
                 used_btemp2 0001                   used_btemp3 0001  
                 used_btemp4 0001                   used_btemp5 0001  
                 used_btemp6 0001                   used_btemp7 0001  
                 _WriteTrack 4614           __end_of_WriteTrack 47E8  
              ?_SectorToFpga 0052    __end_of_UpdateDriveStatus 40E0  
           __end_of_FindSync 489A                      _GetData 4B1C  
                ?_WriteTrack 0043                        status 000FD8  
         _SectorHeaderToFpga 507C                   _CheckTrack 41D0  
         __end_of_CheckTrack 41FC                      __Lparam 0037  
               _ErrorMessage 255A                  ?_CheckTrack 0037  
                    __ramtop 0600                 _InsertFloppy 40E2  
        ?_SectorHeaderToFpga 0052                ?_ErrorMessage 004C  
       __end_of_InsertFloppy 41CE            _UpdateDriveStatus 408E  
                    postdec0 000FED                      postdec1 000FE5  
                    postinc0 000FEE                      postinc1 000FE6  
                  _GetHeader 489C            __end_of_GetHeader 4B1C  
                  _HandleFDD 4002            __end_of_HandleFDD 408E  
                     _secbuf 03FF                   ?_GetHeader 004C  
                  _FileWrite 3766                   ?_HandleFDD 0042  
                 ?_FileWrite 00D9                       llmul_f 7DAE  
                   _FileRead 3736                     _FileSeek 3366  
            _SectorGapToFpga 505A                     _FindSync 47EA  
                  ?_FileRead 00D9                    ?_FileSeek 00D9  
               ?a_WriteTrack 0045                    ?_FindSync 004C  
                  _ReadTrack 41FE            __end_of_ReadTrack 4612  
                 ?_ReadTrack 0043                     _OsdClear 7240  
              ?_InsertFloppy 0046  
