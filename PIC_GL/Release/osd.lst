

HI-TECH Software PICC-18 Macro Assembler V9.51PL2
                                                       Mon Dec 07 22:12:01 2009


     1                           	processor	18F252
     2                           	opt	pw 80
     3                           	psect	const,global,class=CODE,delta=1
     4                           	psect	text,global,reloc=2,class=CODE,delta=1
     5                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     6                           	psect	bss,global,class=RAM,space=1,delta=1
     7                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     8                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000                     
    98                           
    99                           	psect	const
   100                           ;pic18fxx2.h: 21: static volatile near unsigned 
      +                          char TOSU @ 0xFFF;
   101                           ;pic18fxx2.h: 22: static volatile near unsigned 
      +                          char TOSH @ 0xFFE;
   102                           ;pic18fxx2.h: 23: static volatile near unsigned 
      +                          char TOSL @ 0xFFD;
   103                           ;pic18fxx2.h: 24: static volatile near unsigned 
      +                          char STKPTR @ 0xFFC;
   104                           ;pic18fxx2.h: 25: static volatile near unsigned 
      +                          char PCLATU @ 0xFFB;
   105                           ;pic18fxx2.h: 26: static volatile near unsigned 
      +                          char PCLATH @ 0xFFA;
   106                           ;pic18fxx2.h: 27: static volatile near unsigned 
      +                          char PCL @ 0xFF9;
   107                           ;pic18fxx2.h: 28: static volatile far unsigned c
      +                          har * TBLPTR @ 0xFF6;
   108                           ;pic18fxx2.h: 29: static volatile near unsigned 
      +                          char TBLPTRU @ 0xFF8;
   109                           ;pic18fxx2.h: 30: static volatile near unsigned 
      +                          char TBLPTRH @ 0xFF7;
   110                           ;pic18fxx2.h: 31: static volatile near unsigned 
      +                          char TBLPTRL @ 0xFF6;
   111                           ;pic18fxx2.h: 32: static volatile near unsigned 
      +                          char TABLAT @ 0xFF5;
   112                           ;pic18fxx2.h: 33: static volatile near unsigned 
      +                          char PRODH @ 0xFF4;
   113                           ;pic18fxx2.h: 34: static volatile near unsigned 
      +                          char PRODL @ 0xFF3;
   114                           ;pic18fxx2.h: 35: static volatile near unsigned 
      +                          char INTCON @ 0xFF2;
   115                           ;pic18fxx2.h: 36: static near unsigned char INTC
      +                          ON2 @ 0xFF1;
   116                           ;pic18fxx2.h: 37: static volatile near unsigned 
      +                          char INTCON3 @ 0xFF0;
   117                           ;pic18fxx2.h: 38: static volatile near unsigned 
      +                          char INDF0 @ 0xFEF;
   118                           ;pic18fxx2.h: 39: static volatile near unsigned 
      +                          char POSTINC0 @ 0xFEE;
   119                           ;pic18fxx2.h: 40: static volatile near unsigned 
      +                          char POSTDEC0 @ 0xFED;
   120                           ;pic18fxx2.h: 41: static volatile near unsigned 
      +                          char PREINC0 @ 0xFEC;
   121                           ;pic18fxx2.h: 42: static volatile near unsigned 
      +                          char PLUSW0 @ 0xFEB;
   122                           ;pic18fxx2.h: 43: static volatile near unsigned 
      +                          char FSR0H @ 0xFEA;
   123                           ;pic18fxx2.h: 44: static volatile near unsigned 
      +                          char FSR0L @ 0xFE9;
   124                           ;pic18fxx2.h: 45: static volatile near unsigned 
      +                          char WREG @ 0xFE8;
   125                           ;pic18fxx2.h: 46: static volatile near unsigned 
      +                          char INDF1 @ 0xFE7;
   126                           ;pic18fxx2.h: 47: static volatile near unsigned 
      +                          char POSTINC1 @ 0xFE6;
   127                           ;pic18fxx2.h: 48: static volatile near unsigned 
      +                          char POSTDEC1 @ 0xFE5;
   128                           ;pic18fxx2.h: 49: static volatile near unsigned 
      +                          char PREINC1 @ 0xFE4;
   129                           ;pic18fxx2.h: 50: static volatile near unsigned 
      +                          char PLUSW1 @ 0xFE3;
   130                           ;pic18fxx2.h: 51: static volatile near unsigned 
      +                          char FSR1H @ 0xFE2;
   131                           ;pic18fxx2.h: 52: static volatile near unsigned 
      +                          char FSR1L @ 0xFE1;
   132                           ;pic18fxx2.h: 53: static near unsigned char BSR 
      +                          @ 0xFE0;
   133                           ;pic18fxx2.h: 54: static volatile near unsigned 
      +                          char INDF2 @ 0xFDF;
   134                           ;pic18fxx2.h: 55: static volatile near unsigned 
      +                          char POSTINC2 @ 0xFDE;
   135                           ;pic18fxx2.h: 56: static volatile near unsigned 
      +                          char POSTDEC2 @ 0xFDD;
   136                           ;pic18fxx2.h: 57: static volatile near unsigned 
      +                          char PREINC2 @ 0xFDC;
   137                           ;pic18fxx2.h: 58: static volatile near unsigned 
      +                          char PLUSW2 @ 0xFDB;
   138                           ;pic18fxx2.h: 59: static volatile near unsigned 
      +                          char FSR2H @ 0xFDA;
   139                           ;pic18fxx2.h: 60: static volatile near unsigned 
      +                          char FSR2L @ 0xFD9;
   140                           ;pic18fxx2.h: 61: static volatile near unsigned 
      +                          char STATUS @ 0xFD8;
   141                           ;pic18fxx2.h: 62: static volatile near unsigned 
      +                          int TMR0 @ 0xFD6;
   142                           ;pic18fxx2.h: 63: static volatile near unsigned 
      +                          char TMR0H @ 0xFD7;
   143                           ;pic18fxx2.h: 64: static volatile near unsigned 
      +                          char TMR0L @ 0xFD6;
   144                           ;pic18fxx2.h: 65: static near unsigned char T0CO
      +                          N @ 0xFD5;
   145                           ;pic18fxx2.h: 66: static volatile near unsigned 
      +                          char OSCCON @ 0xFD3;
   146                           ;pic18fxx2.h: 67: static volatile near unsigned 
      +                          char LVDCON @ 0xFD2;
   147                           ;pic18fxx2.h: 68: static near unsigned char WDTC
      +                          ON @ 0xFD1;
   148                           ;pic18fxx2.h: 69: static volatile near unsigned 
      +                          char RCON @ 0xFD0;
   149                           ;pic18fxx2.h: 70: static volatile near unsigned 
      +                          int TMR1 @ 0xFCE;
   150                           ;pic18fxx2.h: 71: static volatile near unsigned 
      +                          char TMR1H @ 0xFCF;
   151                           ;pic18fxx2.h: 72: static volatile near unsigned 
      +                          char TMR1L @ 0xFCE;
   152                           ;pic18fxx2.h: 73: static near unsigned char T1CO
      +                          N @ 0xFCD;
   153                           ;pic18fxx2.h: 74: static volatile near unsigned 
      +                          char TMR2 @ 0xFCC;
   154                           ;pic18fxx2.h: 75: static volatile near unsigned 
      +                          char PR2 @ 0xFCB;
   155                           ;pic18fxx2.h: 76: static near unsigned char T2CO
      +                          N @ 0xFCA;
   156                           ;pic18fxx2.h: 77: static volatile near unsigned 
      +                          char SSPBUF @ 0xFC9;
   157                           ;pic18fxx2.h: 78: static volatile near unsigned 
      +                          char SSPADD @ 0xFC8;
   158                           ;pic18fxx2.h: 79: static volatile near unsigned 
      +                          char SSPSTAT @ 0xFC7;
   159                           ;pic18fxx2.h: 80: static volatile near unsigned 
      +                          char SSPCON1 @ 0xFC6;
   160                           ;pic18fxx2.h: 81: static volatile near unsigned 
      +                          char SSPCON2 @ 0xFC5;
   161                           ;pic18fxx2.h: 82: static volatile near unsigned 
      +                          int ADRES @ 0xFC3;
   162                           ;pic18fxx2.h: 83: static volatile near unsigned 
      +                          char ADRESH @ 0xFC4;
   163                           ;pic18fxx2.h: 84: static volatile near unsigned 
      +                          char ADRESL @ 0xFC3;
   164                           ;pic18fxx2.h: 85: static volatile near unsigned 
      +                          char ADCON0 @ 0xFC2;
   165                           ;pic18fxx2.h: 86: static near unsigned char ADCO
      +                          N1 @ 0xFC1;
   166                           ;pic18fxx2.h: 87: static volatile near unsigned 
      +                          int CCPR1 @ 0xFBE;
   167                           ;pic18fxx2.h: 88: static volatile near unsigned 
      +                          char CCPR1H @ 0xFBF;
   168                           ;pic18fxx2.h: 89: static volatile near unsigned 
      +                          char CCPR1L @ 0xFBE;
   169                           ;pic18fxx2.h: 90: static volatile near unsigned 
      +                          char CCP1CON @ 0xFBD;
   170                           ;pic18fxx2.h: 91: static volatile near unsigned 
      +                          int CCPR2 @ 0xFBB;
   171                           ;pic18fxx2.h: 92: static volatile near unsigned 
      +                          char CCPR2H @ 0xFBC;
   172                           ;pic18fxx2.h: 93: static volatile near unsigned 
      +                          char CCPR2L @ 0xFBB;
   173                           ;pic18fxx2.h: 94: static volatile near unsigned 
      +                          char CCP2CON @ 0xFBA;
   174                           ;pic18fxx2.h: 95: static volatile near unsigned 
      +                          int TMR3 @ 0xFB2;
   175                           ;pic18fxx2.h: 96: static volatile near unsigned 
      +                          char TMR3H @ 0xFB3;
   176                           ;pic18fxx2.h: 97: static volatile near unsigned 
      +                          char TMR3L @ 0xFB2;
   177                           ;pic18fxx2.h: 98: static near unsigned char T3CO
      +                          N @ 0xFB1;
   178                           ;pic18fxx2.h: 99: static near unsigned char SPBR
      +                          G @ 0xFAF;
   179                           ;pic18fxx2.h: 100: static volatile near unsigned
      +                           char RCREG @ 0xFAE;
   180                           ;pic18fxx2.h: 101: static volatile near unsigned
      +                           char TXREG @ 0xFAD;
   181                           ;pic18fxx2.h: 102: static volatile near unsigned
      +                           char TXSTA @ 0xFAC;
   182                           ;pic18fxx2.h: 103: static volatile near unsigned
      +                           char RCSTA @ 0xFAB;
   183                           ;pic18fxx2.h: 104: static volatile near unsigned
      +                           char EEADR @ 0xFA9;
   184                           ;pic18fxx2.h: 105: static volatile near unsigned
      +                           char EEDATA @ 0xFA8;
   185                           ;pic18fxx2.h: 106: static volatile near unsigned
      +                           char EECON2 @ 0xFA7;
   186                           ;pic18fxx2.h: 107: static volatile near unsigned
      +                           char EECON1 @ 0xFA6;
   187                           ;pic18fxx2.h: 108: static near unsigned char IPR
      +                          2 @ 0xFA2;
   188                           ;pic18fxx2.h: 109: static volatile near unsigned
      +                           char PIR2 @ 0xFA1;
   189                           ;pic18fxx2.h: 110: static near unsigned char PIE
      +                          2 @ 0xFA0;
   190                           ;pic18fxx2.h: 111: static near unsigned char IPR
      +                          1 @ 0xF9F;
   191                           ;pic18fxx2.h: 112: static volatile near unsigned
      +                           char PIR1 @ 0xF9E;
   192                           ;pic18fxx2.h: 113: static near unsigned char PIE
      +                          1 @ 0xF9D;
   193                           ;pic18fxx2.h: 114: static volatile near unsigned
      +                           char TRISC @ 0xF94;
   194                           ;pic18fxx2.h: 115: static volatile near unsigned
      +                           char TRISB @ 0xF93;
   195                           ;pic18fxx2.h: 116: static volatile near unsigned
      +                           char TRISA @ 0xF92;
   196                           ;pic18fxx2.h: 117: static volatile near unsigned
      +                           char LATC @ 0xF8B;
   197                           ;pic18fxx2.h: 118: static volatile near unsigned
      +                           char LATB @ 0xF8A;
   198                           ;pic18fxx2.h: 119: static volatile near unsigned
      +                           char LATA @ 0xF89;
   199                           ;pic18fxx2.h: 120: static volatile near unsigned
      +                           char PORTC @ 0xF82;
   200  000880                     _keycode_table:
   201                           ;       param _invert assigned to ?_OsdWrite+2
   202  000000                     _OsdWrite$invert	set	?_OsdWrite+2
   203  000880  00                 	db	0
   204  000881  31                 	db	49
   205  000882  32                 	db	50
   206  000883  33                 	db	51
   207  000884  34                 	db	52
   208  000885  35                 	db	53
   209  000886  36                 	db	54
   210  000887  37                 	db	55
   211  000888  38                 	db	56
   212  000889  39                 	db	57
   213  00088A  30                 	db	48
   214  00088B  00                 	db	0
   215  00088C  00                 	db	0
   216  00088D  00                 	db	0
   217  00088E  00                 	db	0
   218  00088F  00                 	db	0
   219  000890  51                 	db	81
   220  000891  57                 	db	87
   221  000892  45                 	db	69
   222  000893  52                 	db	82
   223  000894  54                 	db	84
   224  000895  59                 	db	89
   225  000896  55                 	db	85
   226  000897  49                 	db	73
   227  000898  4F                 	db	79
   228  000899  50                 	db	80
   229  00089A  00                 	db	0
   230  00089B  00                 	db	0
   231  00089C  00                 	db	0
   232  00089D  00                 	db	0
   233  00089E  00                 	db	0
   234  00089F  00                 	db	0
   235  0008A0  41                 	db	65
   236  0008A1  53                 	db	83
   237  0008A2  44                 	db	68
   238  0008A3  46                 	db	70
   239  0008A4  47                 	db	71
   240  0008A5  48                 	db	72
   241  0008A6  4A                 	db	74
   242  0008A7  4B                 	db	75
   243  0008A8  4C                 	db	76
   244  0008A9  00                 	db	0
   245  0008AA  00                 	db	0
   246  0008AB  00                 	db	0
   247  0008AC  00                 	db	0
   248  0008AD  00                 	db	0
   249  0008AE  00                 	db	0
   250  0008AF  00                 	db	0
   251  0008B0  00                 	db	0
   252  0008B1  5A                 	db	90
   253  0008B2  58                 	db	88
   254  0008B3  43                 	db	67
   255  0008B4  56                 	db	86
   256  0008B5  42                 	db	66
   257  0008B6  4E                 	db	78
   258  0008B7  4D                 	db	77
   259  0008B8  00                 	db	0
   260  0008B9  00                 	db	0
   261  0008BA  00                 	db	0
   262  0008BB  00                 	db	0
   263  0008BC  00                 	db	0
   264  0008BD  00                 	db	0
   265  0008BE  00                 	db	0
   266  0008BF  00                 	db	0
   267  0008C0  00                 	db	0
   268  0008C1  00                 	db	0
   269  0008C2  00                 	db	0
   270  0008C3  00                 	db	0
   271  0008C4  00                 	db	0
   272  0008C5  00                 	db	0
   273  0008C6  00                 	db	0
   274  0008C7  00                 	db	0
   275  0008C8  00                 	db	0
   276  0008C9  00                 	db	0
   277  0008CA  00                 	db	0
   278  0008CB  00                 	db	0
   279  0008CC  00                 	db	0
   280  0008CD  00                 	db	0
   281  0008CE  00                 	db	0
   282  0008CF  00                 	db	0
   283  0008D0  00                 	db	0
   284  0008D1  00                 	db	0
   285  0008D2  00                 	db	0
   286  0008D3  00                 	db	0
   287  0008D4  00                 	db	0
   288  0008D5  00                 	db	0
   289  0008D6  00                 	db	0
   290  0008D7  00                 	db	0
   291  0008D8  00                 	db	0
   292  0008D9  00                 	db	0
   293  0008DA  00                 	db	0
   294  0008DB  00                 	db	0
   295  0008DC  00                 	db	0
   296  0008DD  00                 	db	0
   297  0008DE  00                 	db	0
   298  0008DF  00                 	db	0
   299  0008E0  00                 	db	0
   300  0008E1  00                 	db	0
   301  0008E2  00                 	db	0
   302  0008E3  00                 	db	0
   303  0008E4  00                 	db	0
   304  0008E5  00                 	db	0
   305  0008E6  00                 	db	0
   306  0008E7  00                 	db	0
   307  0008E8  00                 	db	0
   308  0008E9  00                 	db	0
   309  0008EA  00                 	db	0
   310  0008EB  00                 	db	0
   311  0008EC  00                 	db	0
   312  0008ED  00                 	db	0
   313  0008EE  00                 	db	0
   314  0008EF  00                 	db	0
   315  0008F0  00                 	db	0
   316  0008F1  00                 	db	0
   317  0008F2  00                 	db	0
   318  0008F3  00                 	db	0
   319  0008F4  00                 	db	0
   320  0008F5  00                 	db	0
   321  0008F6  00                 	db	0
   322  0008F7  00                 	db	0
   323  0008F8  00                 	db	0
   324  0008F9  00                 	db	0
   325  0008FA  00                 	db	0
   326  0008FB  00                 	db	0
   327  0008FC  00                 	db	0
   328  0008FD  00                 	db	0
   329  0008FE  00                 	db	0
   330  0008FF  00                 	db	0
   331                           ;osd.c: 54: const char keycode_table[128] =
   332                           ;osd.c: 55: {
   333                           ;osd.c: 56: 0,'1','2','3','4','5','6','7','8','9
      +                          ','0', 0, 0, 0, 0, 0,
   334                           ;osd.c: 57: 'Q','W','E','R','T','Y','U','I','O',
      +                          'P', 0, 0, 0, 0, 0, 0,
   335                           ;osd.c: 58: 'A','S','D','F','G','H','J','K','L',
      +                           0, 0, 0, 0, 0, 0, 0,
   336                           ;osd.c: 59: 0,'Z','X','C','V','B','N','M', 0, 0,
      +                           0, 0, 0, 0, 0, 0,
   337                           ;osd.c: 60: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      +                          0, 0, 0, 0,
   338                           ;osd.c: 61: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      +                          0, 0, 0, 0,
   339                           ;osd.c: 62: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      +                          0, 0, 0, 0,
   340                           ;osd.c: 63: 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      +                          0, 0, 0, 0
   341                           ;osd.c: 64: };
   342                           ;       param _s assigned to ?_OsdWrite+0
   343  000000                     _OsdWrite$s	set	?_OsdWrite
   344                           
   345                           	psect	text
   346                           ;osd.c: 68: void OsdWrite(unsigned char n, const
      +                           unsigned char *s, char invert)
   347                           ;osd.c: 69: {
   348  006FCE  005D               	dw	?_OsdWrite
   349                           ;	_c1 assigned to ?a_OsdGetCtrl+1
   350  000000                     _OsdGetCtrl$c1	set	?a_OsdGetCtrl+1
   351                           ;	_c assigned to ?a_OsdGetCtrl+0
   352  000000                     _OsdGetCtrl$c	set	?a_OsdGetCtrl
   353                           ;	_gayle assigned to ?a_ConfigIDE+0
   354  000000                     _ConfigIDE$gayle	set	?a_ConfigIDE
   355                           ;       param _slave assigned to ?_ConfigIDE+1
   356  000000                     _ConfigIDE$slave	set	?_ConfigIDE+1
   357                           ;       param _master assigned to ?_ConfigIDE+0
   358  000000                     _ConfigIDE$master	set	?_ConfigIDE
   359                           ;	_scanline assigned to ?a_ConfigScanline+0
   360  000000                     _ConfigScanline$scanline	set	?a_ConfigScanline
   361                           ;	_drives assigned to ?a_ConfigFloppy+0
   362  000000                     _ConfigFloppy$drives	set	?a_ConfigFloppy
   363                           ;       param _speed assigned to ?_ConfigFloppy+
      +                          0
   364  000000                     _ConfigFloppy$speed	set	?_ConfigFloppy
   365                           ;	_chipset assigned to ?a_ConfigChipset+0
   366  000000                     _ConfigChipset$chipset	set	?a_ConfigChipset
   367                           ;	_memory assigned to ?a_ConfigMemory+0
   368  000000                     _ConfigMemory$memory	set	?a_ConfigMemory
   369                           ;	_lores assigned to ?a_ConfigFilter+0
   370  000000                     _ConfigFilter$lores	set	?a_ConfigFilter
   371                           ;       param _hires assigned to ?_ConfigFilter+
      +                          0
   372  000000                     _ConfigFilter$hires	set	?_ConfigFilter
   373                           ;	_boot assigned to ?a_OsdReset+0
   374  000000                     _OsdReset$boot	set	?a_OsdReset
   375                           ;	_n assigned to ?a_OsdClear+0
   376  000000                     _OsdClear$n	set	?a_OsdClear
   377                           ;	_p assigned to ?a_OsdWrite+4
   378  000000                     _OsdWrite$p	set	?a_OsdWrite+4
   379                           ;	_byte_cnt assigned to ?a_OsdWrite+2
   380  000000                     _OsdWrite$byte_cnt	set	?a_OsdWrite+2
   381                           ;	_n assigned to ?a_OsdWrite+1
   382  000000                     _OsdWrite$n	set	?a_OsdWrite+1
   383  006FD0                     _OsdWrite:
   384                           ; errata NOP at function entry point
   385  006FD0  FFFF               	dw	65535
   386  006FD2                     f3902:
   387  000000                     
   388                           ;	_b assigned to ?a_OsdWrite+0
   389  000000                     _OsdWrite$b	set	?a_OsdWrite
   390                           ;_n stored from wreg
   391  006FD2  0100               	movlb	__Lparam shr (0+8)
   392  006FD4  6F61               	movwf	(?a_OsdWrite+1)^(__Lparam& (0+65280)),b
   393                           ;osd.c: 70: unsigned short byte_cnt;
   394  006FD6  9A81               	bcf	3969,5,c	;volatile
   395                           ;osd.c: 78: if (invert)
   396  006FD8  515F               	movf	(?_OsdWrite+2)^(__Lparam& (0+65280)),w
   397  006FDA  E005               	bz	l2
   398                           ;osd.c: 79: { SPI(0x20|0x10|n); }
   399  006FDC  5161               	movf	(?a_OsdWrite+1)^(__Lparam& (0+65280)),w
   400  006FDE  0930               	iorlw	48
   401  006FE0  EC35  F03C         	call	_SPI
   402  006FE4  D005               	goto	l3
   403  006FE6                     l2:
   404                           ;osd.c: 80: else
   405  006FE6  0100               	movlb	__Lparam shr (0+8)
   406  006FE8  5161               	movf	(?a_OsdWrite+1)^(__Lparam& (0+65280)),w
   407  006FEA  0920               	iorlw	32
   408  006FEC  EC35  F03C         	call	_SPI
   409  006FF0                     l3:
   410                           ;osd.c: 84: byte_cnt = 0;
   411  006FF0  0100               	movlb	__Lparam shr (0+8)
   412  006FF2  6B62               	clrf	(?a_OsdWrite+2)^(__Lparam& (0+65280)),b
   413  006FF4  6B63               	clrf	(?a_OsdWrite+3)^(__Lparam& (0+65280)),b
   414  006FF6                     l5:
   415                           ;osd.c: 87: while(1)
   416                           ;osd.c: 88: {
   417  006FF6  C05D  FFF6         	movff	?_OsdWrite,tblptrl
   418  006FFA  C05E  FFF7         	movff	?_OsdWrite+1,tblptrh
   419  006FFE  0E05               	movlw	(high __ramtop+-1)
   420  007000  64F7               	cpfsgt	tblptrh,c
   421  007002  D004               	bra	u27
   422  007004  0008               	tblrd		*
   423  007006  FFFF               	dw	65535	; Nop inserted for errata
   424  007008  50F5               	movf	tablat,w,c
   425  00700A  D005               	bra	u20
   426  00700C                     u27:
   427  00700C  CFF6 FFE9          	movff	tblptrl,fsr0l
   428  007010  CFF7 FFEA          	movff	tblptrh,fsr0h
   429  007014  50EF               	movf	indf0,w,c
   430  007016                     u20:
   431  007016  0100               	movlb	__Lparam shr (0+8)
   432  007018  6F60               	movwf	?a_OsdWrite^(__Lparam& (0+65280)),b
   433  00701A  4B5D               	infsnz	?_OsdWrite^(__Lparam& (0+65280)),f,b
   434  00701C  2B5E               	incf	(?_OsdWrite+1)^(__Lparam& (0+65280)),f,b
   435                           ;osd.c: 92: if (0 == b)
   436  00701E  5160               	movf	?a_OsdWrite^(__Lparam& (0+65280)),w
   437  007020  E101 D0FC          	bz	l6
   438                           ;osd.c: 93: { break; }
   439                           ;osd.c: 94: else if (0x0d == b || 0x0a == b)
   440  007024  5160               	movf	?a_OsdWrite^(__Lparam& (0+65280)),w
   441  007026  0A0D               	xorlw	13
   442  007028  E003               	bz	u60
   443  00702A  5160               	movf	?a_OsdWrite^(__Lparam& (0+65280)),w
   444  00702C  0A0A               	xorlw	10
   445  00702E  E11E               	bnz	l9
   446  007030                     u60:
   447                           ;osd.c: 95: {
   448  007030  0100               	movlb	__Lparam shr (0+8)
   449  007032                     L1:
   450  007032  0E01               	movlw	1
   451  007034  5D63               	subwf	(?a_OsdWrite+3)^(__Lparam& (0+65280)),w
   452  007036  0E00               	movlw	0
   453  007038  B4D8               	btfsc	status,2,c
   454  00703A  5D62               	subwf	(?a_OsdWrite+2)^(__Lparam& (0+65280)),w
   455  00703C  E207               	bc	l11
   456                           ;osd.c: 98: { SPI(0x00); }
   457  00703E  0E00               	movlw	0
   458  007040  EC35  F03C         	call	_SPI
   459  007044  0100               	movlb	__Lparam shr (0+8)
   460  007046  4B62               	infsnz	(?a_OsdWrite+2)^(__Lparam& (0+65280)),f,
      +                          b
   461  007048  2B63               	incf	(?a_OsdWrite+3)^(__Lparam& (0+65280)),f,b
   462  00704A  D7F3               	goto	L1
   463  00704C                     l11:
   464                           ;osd.c: 101: byte_cnt = 0;
   465  00704C  0100               	movlb	__Lparam shr (0+8)
   466  00704E  6B62               	clrf	(?a_OsdWrite+2)^(__Lparam& (0+65280)),b
   467  007050  6B63               	clrf	(?a_OsdWrite+3)^(__Lparam& (0+65280)),b
   468                           ;osd.c: 104: if(++n >= 8)
   469  007052  2B61               	incf	(?a_OsdWrite+1)^(__Lparam& (0+65280)),f,b
   470  007054  0E07               	movlw	7
   471  007056  6561               	cpfsgt	(?a_OsdWrite+1)^(__Lparam& (0+65280)),b
   472  007058  D001               	goto	l13
   473                           ;osd.c: 105: { n=0; }
   474  00705A  6B61               	clrf	(?a_OsdWrite+1)^(__Lparam& (0+65280)),b
   475  00705C                     l13:
   476                           ;osd.c: 108: RB5=1;
   477  00705C  8A81               	bsf	3969,5,c	;volatile
   478                           ;osd.c: 109: RB5=0;
   479  00705E  9A81               	bcf	3969,5,c	;volatile
   480                           ;osd.c: 110: SPI(0x20|n);
   481  007060  0100               	movlb	__Lparam shr (0+8)
   482  007062  5161               	movf	(?a_OsdWrite+1)^(__Lparam& (0+65280)),w
   483  007064  0920               	iorlw	32
   484  007066  EC35  F03C         	call	_SPI
   485                           ;osd.c: 111: }
   486  00706A  D7C5               	goto	l5
   487  00706C                     l9:
   488                           ;osd.c: 112: else
   489  00706C  0E00               	movlw	0
   490  00706E  EC35  F03C         	call	_SPI
   491                           ;osd.c: 131: SPI(0x00);
   492  007072  0E00               	movlw	0
   493  007074  EC35  F03C         	call	_SPI
   494                           ;osd.c: 134: p=&charfont[b][0];
   495  007078  0100               	movlb	__Lparam shr (0+8)
   496  00707A  5160               	movf	?a_OsdWrite^(__Lparam& (0+65280)),w
   497  00707C  0D05               	mullw	5
   498  00707E  0E00               	movlw	low _charfont
   499  007080  24F3               	addwf	prodl,w,c
   500  007082  6F64               	movwf	(?a_OsdWrite+4)^(__Lparam& (0+65280)),b
   501  007084  0E06               	movlw	high _charfont
   502  007086  20F4               	addwfc	prodh,w,c
   503  007088  6F65               	movwf	(?a_OsdWrite+5)^(__Lparam& (0+65280)),b
   504                           ;osd.c: 135: SPI(*(p));
   505  00708A  C064  FFF6         	movff	?a_OsdWrite+4,tblptrl
   506  00708E  C065  FFF7         	movff	?a_OsdWrite+5,tblptrh
   507  007092  0E05               	movlw	(high __ramtop+-1)
   508  007094  64F7               	cpfsgt	tblptrh,c
   509  007096  D004               	bra	u107
   510  007098  0008               	tblrd		*
   511  00709A  FFFF               	dw	65535	; Nop inserted for errata
   512  00709C  50F5               	movf	tablat,w,c
   513  00709E  D005               	bra	u100
   514  0070A0                     u107:
   515  0070A0  CFF6 FFE9          	movff	tblptrl,fsr0l
   516  0070A4  CFF7 FFEA          	movff	tblptrh,fsr0h
   517  0070A8  50EF               	movf	indf0,w,c
   518  0070AA                     u100:
   519  0070AA  EC35  F03C         	call	_SPI
   520                           ;osd.c: 136: SPI(*(p++));
   521  0070AE  0100               	movlb	__Lparam shr (0+8)
   522  0070B0  C064  FFF6         	movff	?a_OsdWrite+4,tblptrl
   523  0070B4  C065  FFF7         	movff	?a_OsdWrite+5,tblptrh
   524  0070B8  4B64               	infsnz	(?a_OsdWrite+4)^(__Lparam& (0+65280)),f,
      +                          b
   525  0070BA  2B65               	incf	(?a_OsdWrite+5)^(__Lparam& (0+65280)),f,b
   526  0070BC  0E05               	movlw	(high __ramtop+-1)
   527  0070BE  64F7               	cpfsgt	tblptrh,c
   528  0070C0  D004               	bra	u117
   529  0070C2  0008               	tblrd		*
   530  0070C4  FFFF               	dw	65535	; Nop inserted for errata
   531  0070C6  50F5               	movf	tablat,w,c
   532  0070C8  D005               	bra	u110
   533  0070CA                     u117:
   534  0070CA  CFF6 FFE9          	movff	tblptrl,fsr0l
   535  0070CE  CFF7 FFEA          	movff	tblptrh,fsr0h
   536  0070D2  50EF               	movf	indf0,w,c
   537  0070D4                     u110:
   538  0070D4  EC35  F03C         	call	_SPI
   539                           ;osd.c: 138: SPI(*(p));
   540  0070D8  C064  FFF6         	movff	?a_OsdWrite+4,tblptrl
   541  0070DC  C065  FFF7         	movff	?a_OsdWrite+5,tblptrh
   542  0070E0  0E05               	movlw	(high __ramtop+-1)
   543  0070E2  64F7               	cpfsgt	tblptrh,c
   544  0070E4  D004               	bra	u127
   545  0070E6  0008               	tblrd		*
   546  0070E8  FFFF               	dw	65535	; Nop inserted for errata
   547  0070EA  50F5               	movf	tablat,w,c
   548  0070EC  D005               	bra	u120
   549  0070EE                     u127:
   550  0070EE  CFF6 FFE9          	movff	tblptrl,fsr0l
   551  0070F2  CFF7 FFEA          	movff	tblptrh,fsr0h
   552  0070F6  50EF               	movf	indf0,w,c
   553  0070F8                     u120:
   554  0070F8  EC35  F03C         	call	_SPI
   555                           ;osd.c: 139: SPI(*(p++));
   556  0070FC  0100               	movlb	__Lparam shr (0+8)
   557  0070FE  C064  FFF6         	movff	?a_OsdWrite+4,tblptrl
   558  007102  C065  FFF7         	movff	?a_OsdWrite+5,tblptrh
   559  007106  4B64               	infsnz	(?a_OsdWrite+4)^(__Lparam& (0+65280)),f,
      +                          b
   560  007108  2B65               	incf	(?a_OsdWrite+5)^(__Lparam& (0+65280)),f,b
   561  00710A  0E05               	movlw	(high __ramtop+-1)
   562  00710C  64F7               	cpfsgt	tblptrh,c
   563  00710E  D004               	bra	u137
   564  007110  0008               	tblrd		*
   565  007112  FFFF               	dw	65535	; Nop inserted for errata
   566  007114  50F5               	movf	tablat,w,c
   567  007116  D005               	bra	u130
   568  007118                     u137:
   569  007118  CFF6 FFE9          	movff	tblptrl,fsr0l
   570  00711C  CFF7 FFEA          	movff	tblptrh,fsr0h
   571  007120  50EF               	movf	indf0,w,c
   572  007122                     u130:
   573  007122  EC35  F03C         	call	_SPI
   574                           ;osd.c: 141: SPI(*(p));
   575  007126  C064  FFF6         	movff	?a_OsdWrite+4,tblptrl
   576  00712A  C065  FFF7         	movff	?a_OsdWrite+5,tblptrh
   577  00712E  0E05               	movlw	(high __ramtop+-1)
   578  007130  64F7               	cpfsgt	tblptrh,c
   579  007132  D004               	bra	u147
   580  007134  0008               	tblrd		*
   581  007136  FFFF               	dw	65535	; Nop inserted for errata
   582  007138  50F5               	movf	tablat,w,c
   583  00713A  D005               	bra	u140
   584  00713C                     u147:
   585  00713C  CFF6 FFE9          	movff	tblptrl,fsr0l
   586  007140  CFF7 FFEA          	movff	tblptrh,fsr0h
   587  007144  50EF               	movf	indf0,w,c
   588  007146                     u140:
   589  007146  EC35  F03C         	call	_SPI
   590                           ;osd.c: 142: SPI(*(p++));
   591  00714A  0100               	movlb	__Lparam shr (0+8)
   592  00714C  C064  FFF6         	movff	?a_OsdWrite+4,tblptrl
   593  007150  C065  FFF7         	movff	?a_OsdWrite+5,tblptrh
   594  007154  4B64               	infsnz	(?a_OsdWrite+4)^(__Lparam& (0+65280)),f,
      +                          b
   595  007156  2B65               	incf	(?a_OsdWrite+5)^(__Lparam& (0+65280)),f,b
   596  007158  0E05               	movlw	(high __ramtop+-1)
   597  00715A  64F7               	cpfsgt	tblptrh,c
   598  00715C  D004               	bra	u157
   599  00715E  0008               	tblrd		*
   600  007160  FFFF               	dw	65535	; Nop inserted for errata
   601  007162  50F5               	movf	tablat,w,c
   602  007164  D005               	bra	u150
   603  007166                     u157:
   604  007166  CFF6 FFE9          	movff	tblptrl,fsr0l
   605  00716A  CFF7 FFEA          	movff	tblptrh,fsr0h
   606  00716E  50EF               	movf	indf0,w,c
   607  007170                     u150:
   608  007170  EC35  F03C         	call	_SPI
   609                           ;osd.c: 144: SPI(*(p));
   610  007174  C064  FFF6         	movff	?a_OsdWrite+4,tblptrl
   611  007178  C065  FFF7         	movff	?a_OsdWrite+5,tblptrh
   612  00717C  0E05               	movlw	(high __ramtop+-1)
   613  00717E  64F7               	cpfsgt	tblptrh,c
   614  007180  D004               	bra	u167
   615  007182  0008               	tblrd		*
   616  007184  FFFF               	dw	65535	; Nop inserted for errata
   617  007186  50F5               	movf	tablat,w,c
   618  007188  D005               	bra	u160
   619  00718A                     u167:
   620  00718A  CFF6 FFE9          	movff	tblptrl,fsr0l
   621  00718E  CFF7 FFEA          	movff	tblptrh,fsr0h
   622  007192  50EF               	movf	indf0,w,c
   623  007194                     u160:
   624  007194  EC35  F03C         	call	_SPI
   625                           ;osd.c: 145: SPI(*(p++));
   626  007198  0100               	movlb	__Lparam shr (0+8)
   627  00719A  C064  FFF6         	movff	?a_OsdWrite+4,tblptrl
   628  00719E  C065  FFF7         	movff	?a_OsdWrite+5,tblptrh
   629  0071A2  4B64               	infsnz	(?a_OsdWrite+4)^(__Lparam& (0+65280)),f,
      +                          b
   630  0071A4  2B65               	incf	(?a_OsdWrite+5)^(__Lparam& (0+65280)),f,b
   631  0071A6  0E05               	movlw	(high __ramtop+-1)
   632  0071A8  64F7               	cpfsgt	tblptrh,c
   633  0071AA  D004               	bra	u177
   634  0071AC  0008               	tblrd		*
   635  0071AE  FFFF               	dw	65535	; Nop inserted for errata
   636  0071B0  50F5               	movf	tablat,w,c
   637  0071B2  D005               	bra	u170
   638  0071B4                     u177:
   639  0071B4  CFF6 FFE9          	movff	tblptrl,fsr0l
   640  0071B8  CFF7 FFEA          	movff	tblptrh,fsr0h
   641  0071BC  50EF               	movf	indf0,w,c
   642  0071BE                     u170:
   643  0071BE  EC35  F03C         	call	_SPI
   644                           ;osd.c: 147: SPI(*(p));
   645  0071C2  C064  FFF6         	movff	?a_OsdWrite+4,tblptrl
   646  0071C6  C065  FFF7         	movff	?a_OsdWrite+5,tblptrh
   647  0071CA  0E05               	movlw	(high __ramtop+-1)
   648  0071CC  64F7               	cpfsgt	tblptrh,c
   649  0071CE  D004               	bra	u187
   650  0071D0  0008               	tblrd		*
   651  0071D2  FFFF               	dw	65535	; Nop inserted for errata
   652  0071D4  50F5               	movf	tablat,w,c
   653  0071D6  D005               	bra	u180
   654  0071D8                     u187:
   655  0071D8  CFF6 FFE9          	movff	tblptrl,fsr0l
   656  0071DC  CFF7 FFEA          	movff	tblptrh,fsr0h
   657  0071E0  50EF               	movf	indf0,w,c
   658  0071E2                     u180:
   659  0071E2  EC35  F03C         	call	_SPI
   660                           ;osd.c: 148: SPI(*(p++));
   661  0071E6  0100               	movlb	__Lparam shr (0+8)
   662  0071E8  C064  FFF6         	movff	?a_OsdWrite+4,tblptrl
   663  0071EC  C065  FFF7         	movff	?a_OsdWrite+5,tblptrh
   664  0071F0  4B64               	infsnz	(?a_OsdWrite+4)^(__Lparam& (0+65280)),f,
      +                          b
   665  0071F2  2B65               	incf	(?a_OsdWrite+5)^(__Lparam& (0+65280)),f,b
   666  0071F4  0E05               	movlw	(high __ramtop+-1)
   667  0071F6  64F7               	cpfsgt	tblptrh,c
   668  0071F8  D004               	bra	u197
   669  0071FA  0008               	tblrd		*
   670  0071FC  FFFF               	dw	65535	; Nop inserted for errata
   671  0071FE  50F5               	movf	tablat,w,c
   672  007200  D005               	bra	u190
   673  007202                     u197:
   674  007202  CFF6 FFE9          	movff	tblptrl,fsr0l
   675  007206  CFF7 FFEA          	movff	tblptrh,fsr0h
   676  00720A  50EF               	movf	indf0,w,c
   677  00720C                     u190:
   678  00720C  EC35  F03C         	call	_SPI
   679                           ;osd.c: 150: byte_cnt += 12;
   680  007210  0E0C               	movlw	12
   681  007212  0100               	movlb	__Lparam shr (0+8)
   682  007214  2762               	addwf	(?a_OsdWrite+2)^(__Lparam& (0+65280)),f,b
   683  007216  0E00               	movlw	0
   684  007218  2363               	addwfc	(?a_OsdWrite+3)^(__Lparam& (0+65280)),f,
      +                          b
   685  00721A  D6ED               	goto	l5
   686  00721C                     l6:
   687                           ;osd.c: 152: }
   688  00721C  0100               	movlb	__Lparam shr (0+8)
   689  00721E                     L2:
   690  00721E  0E01               	movlw	1
   691  007220  5D63               	subwf	(?a_OsdWrite+3)^(__Lparam& (0+65280)),w
   692  007222  0E00               	movlw	0
   693  007224  B4D8               	btfsc	status,2,c
   694  007226  5D62               	subwf	(?a_OsdWrite+2)^(__Lparam& (0+65280)),w
   695  007228  E207               	bc	l16
   696                           ;osd.c: 157: { SPI(0x00); }
   697  00722A  0E00               	movlw	0
   698  00722C  EC35  F03C         	call	_SPI
   699  007230  0100               	movlb	__Lparam shr (0+8)
   700  007232  4B62               	infsnz	(?a_OsdWrite+2)^(__Lparam& (0+65280)),f,
      +                          b
   701  007234  2B63               	incf	(?a_OsdWrite+3)^(__Lparam& (0+65280)),f,b
   702  007236  D7F3               	goto	L2
   703  007238                     l16:
   704                           ;osd.c: 160: RB5=1;
   705  007238  8A81               	bsf	3969,5,c	;volatile
   706                           ;osd.c: 161: }
   707  00723A  0012               	return	
   708  00723C  FFFF               	dw	65535	; Nop inserted for errata
   709  00723E  D6C9               	goto	f3902
   710  007240                     __end_of_OsdWrite:
   711                           ;osd.c: 165: void OsdClear(void)
   712                           ;osd.c: 166: {
   713  007240                     _OsdClear:
   714                           ; errata NOP at function entry point
   715  007240  FFFF               	dw	65535
   716  007242                     f3932:
   717  000000                     
   718                           ;osd.c: 167: unsigned short n;
   719  007242  9A81               	bcf	3969,5,c	;volatile
   720                           ;osd.c: 173: SPI(0x20|0x18);
   721  007244  0E38               	movlw	56
   722  007246  EC35  F03C         	call	_SPI
   723                           ;osd.c: 176: for(n=0; n < (256 * 8); n++)
   724  00724A  0100               	movlb	__Lparam shr (0+8)
   725  00724C  6B51               	clrf	?a_OsdClear^(__Lparam& (0+65280)),b
   726  00724E  6B52               	clrf	(?a_OsdClear+1)^(__Lparam& (0+65280)),b
   727  007250                     l19:
   728                           ;osd.c: 177: { SPI(0x00); }
   729  007250  0E00               	movlw	0
   730  007252  EC35  F03C         	call	_SPI
   731  007256  0100               	movlb	__Lparam shr (0+8)
   732  007258  4B51               	infsnz	?a_OsdClear^(__Lparam& (0+65280)),f,b
   733  00725A  2B52               	incf	(?a_OsdClear+1)^(__Lparam& (0+65280)),f,b
   734  00725C  0E08               	movlw	8
   735  00725E  5D52               	subwf	(?a_OsdClear+1)^(__Lparam& (0+65280)),w
   736  007260  0E00               	movlw	0
   737  007262  B4D8               	btfsc	status,2,c
   738  007264  5D51               	subwf	?a_OsdClear^(__Lparam& (0+65280)),w
   739  007266  E3F4               	bnc	l19
   740                           ;osd.c: 180: RB5=1;
   741  007268  8A81               	bsf	3969,5,c	;volatile
   742                           ;osd.c: 181: }
   743  00726A  0012               	return	
   744  00726C  FFFF               	dw	65535	; Nop inserted for errata
   745  00726E  D7E9               	goto	f3932
   746  007270                     __end_of_OsdClear:
   747                           ;osd.c: 184: void OsdEnable(void)
   748                           ;osd.c: 185: {
   749  007270                     _OsdEnable:
   750                           ; errata NOP at function entry point
   751  007270  FFFF               	dw	65535
   752  007272                     f3942:
   753  000000                     
   754                           ;osd.c: 186: OsdCommand(0x60);
   755  007272  0E60               	movlw	96
   756  007274  EF3D  F03C         	goto	_OsdCommand
   757                           ;osd.c: 187: }
   758  007278  FFFF               	dw	65535	; Nop inserted for errata
   759  00727A  D7FB               	goto	f3942
   760  00727C                     __end_of_OsdEnable:
   761                           ;osd.c: 190: void OsdDisable(void)
   762                           ;osd.c: 191: {
   763  00727C                     _OsdDisable:
   764                           ; errata NOP at function entry point
   765  00727C  FFFF               	dw	65535
   766  00727E                     f3962:
   767  000000                     
   768                           ;osd.c: 192: OsdCommand(0x40);
   769  00727E  0E40               	movlw	64
   770  007280  EF3D  F03C         	goto	_OsdCommand
   771                           ;osd.c: 193: }
   772  007284  FFFF               	dw	65535	; Nop inserted for errata
   773  007286  D7FB               	goto	f3962
   774  007288                     __end_of_OsdDisable:
   775                           ;osd.c: 195: void OsdReset(unsigned char boot)
   776                           ;osd.c: 196: {
   777  007288                     _OsdReset:
   778                           ; errata NOP at function entry point
   779  007288  FFFF               	dw	65535
   780  00728A                     f3972:
   781  000000                     
   782                           ;_boot stored from wreg
   783  00728A  0100               	movlb	__Lparam shr (0+8)
   784  00728C  6F46               	movwf	?a_OsdReset^(__Lparam& (0+65280)),b
   785                           ;osd.c: 197: OsdCommand(0x80 | (boot&0x01));
   786  00728E  5146               	movf	?a_OsdReset^(__Lparam& (0+65280)),w
   787  007290  0B01               	andlw	1
   788  007292  0980               	iorlw	-128
   789  007294  EF3D  F03C         	goto	_OsdCommand
   790                           ;osd.c: 198: }
   791  007298  FFFF               	dw	65535	; Nop inserted for errata
   792  00729A  D7F7               	goto	f3972
   793  00729C                     __end_of_OsdReset:
   794                           ;osd.c: 200: void ConfigFilter(unsigned char lor
      +                          es, unsigned char hires)
   795                           ;osd.c: 201: {
   796  00729C  0046               	dw	?_ConfigFilter
   797  00729E                     _ConfigFilter:
   798                           ; errata NOP at function entry point
   799  00729E  FFFF               	dw	65535
   800  0072A0                     f3982:
   801  000000                     
   802                           ;_lores stored from wreg
   803  0072A0  0100               	movlb	__Lparam shr (0+8)
   804  0072A2  6F47               	movwf	?a_ConfigFilter^(__Lparam& (0+65280)),b
   805                           ;osd.c: 202: OsdCommand(0xE0 | ((hires&0x03)<<2)
      +                           | (lores&0x03));
   806  0072A4  C047  F000         	movff	?a_ConfigFilter,btemp
   807  0072A8  0E03               	movlw	3
   808  0072AA  1600               	andwf	btemp,f,c
   809  0072AC  C046  F001         	movff	?_ConfigFilter,btemp+1
   810  0072B0  1601               	andwf	btemp+1,f,c
   811  0072B2  0E02               	movlw	2
   812  0072B4  6E02               	movwf	btemp+2,c
   813  0072B6                     u235:
   814  0072B6  90D8               	bcf	status,0,c
   815  0072B8  3601               	rlcf	btemp+1,f,c
   816  0072BA  2E02               	decfsz	btemp+2,f,c
   817  0072BC  D7FC               	goto	u235
   818  0072BE  5000               	movf	btemp,w,c
   819  0072C0  1001               	iorwf	btemp+1,w,c
   820  0072C2  09E0               	iorlw	-32
   821  0072C4  EF3D  F03C         	goto	_OsdCommand
   822                           ;osd.c: 203: }
   823  0072C8  FFFF               	dw	65535	; Nop inserted for errata
   824  0072CA  D7EA               	goto	f3982
   825  0072CC                     __end_of_ConfigFilter:
   826                           ;osd.c: 205: void ConfigMemory(unsigned char mem
      +                          ory)
   827                           ;osd.c: 206: {
   828  0072CC                     _ConfigMemory:
   829                           ; errata NOP at function entry point
   830  0072CC  FFFF               	dw	65535
   831  0072CE                     f3992:
   832  000000                     
   833                           ;_memory stored from wreg
   834  0072CE  0100               	movlb	__Lparam shr (0+8)
   835  0072D0  6F46               	movwf	?a_ConfigMemory^(__Lparam& (0+65280)),b
   836                           ;osd.c: 207: OsdCommand(0xF0 | (memory&0x0F));
   837  0072D2  5146               	movf	?a_ConfigMemory^(__Lparam& (0+65280)),w
   838  0072D4  0B0F               	andlw	15
   839  0072D6  09F0               	iorlw	-16
   840  0072D8  EF3D  F03C         	goto	_OsdCommand
   841                           ;osd.c: 208: }
   842  0072DC  FFFF               	dw	65535	; Nop inserted for errata
   843  0072DE  D7F7               	goto	f3992
   844  0072E0                     __end_of_ConfigMemory:
   845                           ;osd.c: 210: void ConfigChipset(unsigned char ch
      +                          ipset)
   846                           ;osd.c: 211: {
   847  0072E0                     _ConfigChipset:
   848                           ; errata NOP at function entry point
   849  0072E0  FFFF               	dw	65535
   850  0072E2                     f4002:
   851  000000                     
   852                           ;_chipset stored from wreg
   853  0072E2  0100               	movlb	__Lparam shr (0+8)
   854  0072E4  6F46               	movwf	?a_ConfigChipset^(__Lparam& (0+65280)),b
   855                           ;osd.c: 212: OsdCommand(0xD0 | (chipset&0x0F));
   856  0072E6  5146               	movf	?a_ConfigChipset^(__Lparam& (0+65280)),w
   857  0072E8  0B0F               	andlw	15
   858  0072EA  09D0               	iorlw	-48
   859  0072EC  EF3D  F03C         	goto	_OsdCommand
   860                           ;osd.c: 213: }
   861  0072F0  FFFF               	dw	65535	; Nop inserted for errata
   862  0072F2  D7F7               	goto	f4002
   863  0072F4                     __end_of_ConfigChipset:
   864                           ;osd.c: 215: void ConfigFloppy(unsigned char dri
      +                          ves, unsigned char speed)
   865                           ;osd.c: 216: {
   866  0072F4  0046               	dw	?_ConfigFloppy
   867  0072F6                     _ConfigFloppy:
   868                           ; errata NOP at function entry point
   869  0072F6  FFFF               	dw	65535
   870  0072F8                     f4012:
   871  000000                     
   872                           ;_drives stored from wreg
   873  0072F8  0100               	movlb	__Lparam shr (0+8)
   874  0072FA  6F47               	movwf	?a_ConfigFloppy^(__Lparam& (0+65280)),b
   875                           ;osd.c: 217: OsdCommand(0xC0 | ((drives&0x03)<<2
      +                          ) | (speed&0x03));
   876  0072FC  C046  F000         	movff	?_ConfigFloppy,btemp
   877  007300  0E03               	movlw	3
   878  007302  1600               	andwf	btemp,f,c
   879  007304  C047  F001         	movff	?a_ConfigFloppy,btemp+1
   880  007308  1601               	andwf	btemp+1,f,c
   881  00730A  0E02               	movlw	2
   882  00730C  6E02               	movwf	btemp+2,c
   883  00730E                     u245:
   884  00730E  90D8               	bcf	status,0,c
   885  007310  3601               	rlcf	btemp+1,f,c
   886  007312  2E02               	decfsz	btemp+2,f,c
   887  007314  D7FC               	goto	u245
   888  007316  5000               	movf	btemp,w,c
   889  007318  1001               	iorwf	btemp+1,w,c
   890  00731A  09C0               	iorlw	-64
   891  00731C  EF3D  F03C         	goto	_OsdCommand
   892                           ;osd.c: 218: }
   893  007320  FFFF               	dw	65535	; Nop inserted for errata
   894  007322  D7EA               	goto	f4012
   895  007324                     __end_of_ConfigFloppy:
   896                           ;osd.c: 220: void ConfigScanline(unsigned char s
      +                          canline)
   897                           ;osd.c: 221: {
   898  007324                     _ConfigScanline:
   899                           ; errata NOP at function entry point
   900  007324  FFFF               	dw	65535
   901  007326                     f4022:
   902  000000                     
   903                           ;_scanline stored from wreg
   904  007326  0100               	movlb	__Lparam shr (0+8)
   905  007328  6F46               	movwf	?a_ConfigScanline^(__Lparam& (0+65280)),b
   906                           ;osd.c: 222: OsdCommand(0xA0 | (scanline&0x0F));
   907  00732A  5146               	movf	?a_ConfigScanline^(__Lparam& (0+65280)),w
   908  00732C  0B0F               	andlw	15
   909  00732E  09A0               	iorlw	-96
   910  007330  EF3D  F03C         	goto	_OsdCommand
   911                           ;osd.c: 223: }
   912  007334  FFFF               	dw	65535	; Nop inserted for errata
   913  007336  D7F7               	goto	f4022
   914  007338                     __end_of_ConfigScanline:
   915                           ;osd.c: 225: void ConfigIDE(unsigned char gayle,
      +                           unsigned char master, unsigned char slave)
   916                           ;osd.c: 226: {
   917  007338  0046               	dw	?_ConfigIDE
   918  00733A                     _ConfigIDE:
   919                           ; errata NOP at function entry point
   920  00733A  FFFF               	dw	65535
   921  00733C                     f4032:
   922  000000                     
   923                           ;_gayle stored from wreg
   924  00733C  0100               	movlb	__Lparam shr (0+8)
   925  00733E  6F48               	movwf	?a_ConfigIDE^(__Lparam& (0+65280)),b
   926                           ;osd.c: 227: OsdCommand(0xB0 | (slave ? 4 : 0) |
      +                           (master ? 2 : 0) | (gayle ? 1 : 0));
   927  007340  0E00               	movlw	0
   928  007342  6A00               	clrf	btemp,c
   929  007344  6348               	cpfseq	?a_ConfigIDE^(__Lparam& (0+65280)),b
   930  007346  2A00               	incf	btemp,f,c
   931  007348  5146               	movf	?_ConfigIDE^(__Lparam& (0+65280)),w
   932  00734A  E102               	bnz	u266
   933  00734C  0E00               	movlw	0
   934  00734E  D001               	goto	u268
   935  007350                     u266:
   936  007350  0E02               	movlw	2
   937  007352                     u268:
   938  007352  6E02               	movwf	btemp+2,c
   939  007354  5147               	movf	(?_ConfigIDE+1)^(__Lparam& (0+65280)),w
   940  007356  E102               	bnz	u286
   941  007358  0E00               	movlw	0
   942  00735A  D001               	goto	u288
   943  00735C                     u286:
   944  00735C  0E04               	movlw	4
   945  00735E                     u288:
   946  00735E  6E01               	movwf	btemp+1,c
   947  007360  1002               	iorwf	btemp+2,w,c
   948  007362  6E01               	movwf	btemp+1,c
   949  007364  1000               	iorwf	btemp,w,c
   950  007366  09B0               	iorlw	-80
   951  007368  EF3D  F03C         	goto	_OsdCommand
   952                           ;osd.c: 228: }
   953  00736C  FFFF               	dw	65535	; Nop inserted for errata
   954  00736E  D7E6               	goto	f4032
   955  007370                     __end_of_ConfigIDE:
   956                           ;osd.c: 232: unsigned char OsdGetCtrl(void)
   957                           ;osd.c: 233: {
   958  007370                     _OsdGetCtrl:
   959                           ; errata NOP at function entry point
   960  007370  FFFF               	dw	65535
   961  007372                     f4042:
   962  000000                     
   963                           ;osd.c: 234: static unsigned char c2;
   964  007372  0E00               	movlw	0
   965  007374  EC3D  F03C         	call	_OsdCommand
   966  007378  0100               	movlb	__Lparam shr (0+8)
   967  00737A  6F47               	movwf	(?a_OsdGetCtrl+1)^(__Lparam& (0+65280)),b
   968                           ;osd.c: 242: if ((!RB0))
   969  00737C  B081               	btfsc	3969,0,c	;volatile
   970  00737E  D002               	goto	l32
   971                           ;osd.c: 243: { c1 = 0x88; }
   972  007380  0E88               	movlw	136
   973  007382  6F47               	movwf	(?a_OsdGetCtrl+1)^(__Lparam& (0+65280)),b
   974  007384                     l32:
   975                           ;osd.c: 246: c = 0;
   976  007384  0100               	movlb	__Lparam shr (0+8)
   977  007386  6B46               	clrf	?a_OsdGetCtrl^(__Lparam& (0+65280)),b
   978                           ;osd.c: 247: if (c1!=c2)
   979  007388  5147               	movf	(?a_OsdGetCtrl+1)^(__Lparam& (0+65280)),w
   980  00738A  0103               	movlb	F784 shr (0+8)
   981  00738C  1958               	xorwf	F784& (0+255),w,b
   982  00738E  E003               	bz	l33
   983                           ;osd.c: 248: { c = c1; }
   984  007390  0100               	movlb	__Lparam shr (0+8)
   985  007392  5147               	movf	(?a_OsdGetCtrl+1)^(__Lparam& (0+65280)),w
   986  007394  6F46               	movwf	?a_OsdGetCtrl^(__Lparam& (0+65280)),b
   987  007396                     l33:
   988                           ;osd.c: 250: c2 = c1;
   989  007396  C047  F358         	movff	?a_OsdGetCtrl+1,F784
   990                           ;osd.c: 255: if (!c1)
   991  00739A  0100               	movlb	__Lparam shr (0+8)
   992  00739C  5147               	movf	(?a_OsdGetCtrl+1)^(__Lparam& (0+65280)),w
   993  00739E  E10A               	bnz	l34
   994                           ;osd.c: 256: { repeat = GetTimer(50); }
   995  0073A0  0E32               	movlw	50
   996  0073A2  6F48               	movwf	?_GetTimer^(__Lparam& (0+65280)),b
   997  0073A4  6B49               	clrf	(?_GetTimer+1)^(__Lparam& (0+65280)),b
   998  0073A6  ECEE  F03B         	call	_GetTimer	;wreg free
   999  0073AA  C000  F016         	movff	btemp,F785
  1000  0073AE  C001  F017         	movff	btemp+1,F785+1
  1001  0073B2  D025               	goto	l35
  1002  0073B4                     l34:
  1003                           ;osd.c: 257: else if (CheckTimer(repeat))
  1004  0073B4  C016  F048         	movff	F785,?_CheckTimer
  1005  0073B8  C017  F049         	movff	F785+1,?_CheckTimer+1
  1006  0073BC  EC02  F03C         	call	_CheckTimer	;wreg free
  1007  0073C0  6E00               	movwf	btemp,c
  1008  0073C2  C000  F002         	movff	btemp,btemp+2
  1009  0073C6  6A03               	clrf	btemp+3,c
  1010  0073C8  5003               	movf	btemp+3,w,c
  1011  0073CA  1002               	iorwf	btemp+2,w,c
  1012  0073CC  E018               	bz	l35
  1013                           ;osd.c: 258: {
  1014  0073CE  0E02               	movlw	2
  1015  0073D0  0100               	movlb	__Lparam shr (0+8)
  1016  0073D2  6F48               	movwf	?_GetTimer^(__Lparam& (0+65280)),b
  1017  0073D4  6B49               	clrf	(?_GetTimer+1)^(__Lparam& (0+65280)),b
  1018  0073D6  ECEE  F03B         	call	_GetTimer	;wreg free
  1019  0073DA  C000  F016         	movff	btemp,F785
  1020  0073DE  C001  F017         	movff	btemp+1,F785+1
  1021                           ;osd.c: 260: if (c1==0x4C || c1==0x4D || GetASCI
      +                          IKey(c1))
  1022  0073E2  0100               	movlb	__Lparam shr (0+8)
  1023  0073E4  5147               	movf	(?a_OsdGetCtrl+1)^(__Lparam& (0+65280)),w
  1024  0073E6  0A4C               	xorlw	76
  1025  0073E8  E007               	bz	u360
  1026  0073EA  5147               	movf	(?a_OsdGetCtrl+1)^(__Lparam& (0+65280)),w
  1027  0073EC  0A4D               	xorlw	77
  1028  0073EE  E004               	bz	u360
  1029  0073F0  5147               	movf	(?a_OsdGetCtrl+1)^(__Lparam& (0+65280)),w
  1030  0073F2  D80A               	call	_GetASCIIKey
  1031  0073F4  0900               	iorlw	0
  1032  0073F6  E003               	bz	l35
  1033  0073F8                     u360:
  1034                           ;osd.c: 261: { c = c1; }
  1035  0073F8  0100               	movlb	__Lparam shr (0+8)
  1036  0073FA  5147               	movf	(?a_OsdGetCtrl+1)^(__Lparam& (0+65280)),w
  1037  0073FC  6F46               	movwf	?a_OsdGetCtrl^(__Lparam& (0+65280)),b
  1038  0073FE                     l35:
  1039                           ;osd.c: 262: }
  1040  0073FE  0100               	movlb	__Lparam shr (0+8)
  1041  007400  5146               	movf	?a_OsdGetCtrl^(__Lparam& (0+65280)),w
  1042                           ;osd.c: 266: }
  1043  007402  0012               	return	
  1044  007404  FFFF               	dw	65535	; Nop inserted for errata
  1045  007406  D7B5               	goto	f4042
  1046  007408                     __end_of_OsdGetCtrl:
  1047                           ;osd.c: 268: unsigned char GetASCIIKey(unsigned 
      +                          char keycode)
  1048                           ;osd.c: 269: {
  1049  007408                     _GetASCIIKey:
  1050                           ; errata NOP at function entry point
  1051  007408  FFFF               	dw	65535
  1052  00740A                     f4102:
  1053  000000                     
  1054                           ; _keycode loaded to fsr2l
  1055  00740A  6ED9               	movwf	fsr2l,c
  1056                           ;osd.c: 270: return keycode&0x80 ? 0 : keycode_t
      +                          able[keycode&0x7F];
  1057  00740C  BED9               	btfsc	fsr2l,7,c
  1058  00740E  D012               	goto	u396
  1059  007410  CFD9 F000          	movff	fsr2l,btemp
  1060  007414  0E7F               	movlw	127
  1061  007416  1600               	andwf	btemp,f,c
  1062  007418  C000  F002         	movff	btemp,btemp+2
  1063  00741C  6A03               	clrf	btemp+3,c
  1064  00741E  5002               	movf	btemp+2,w,c
  1065  007420  0F80               	addlw	low _keycode_table
  1066  007422  6EF6               	movwf	tblptrl,c
  1067  007424  5003               	movf	btemp+3,w,c
  1068  007426  6EF7               	movwf	tblptrh,c
  1069  007428  0E08               	movlw	high _keycode_table
  1070  00742A  22F7               	addwfc	tblptrh,f,c
  1071  00742C  0008               	tblrd		*
  1072  00742E  FFFF               	dw	65535	; Nop inserted for errata
  1073  007430  50F5               	movf	tablat,w,c
  1074  007432  D001               	goto	l38
  1075  007434                     u396:
  1076  007434  0E00               	movlw	0
  1077                           ;osd.c: 271: }
  1078  007436                     l38:
  1079  007436  0012               	return	
  1080  007438  FFFF               	dw	65535	; Nop inserted for errata
  1081  00743A  D7E7               	goto	f4102
  1082  00743C                     __end_of_GetASCIIKey:
  1083  000000                     
  1084  000000                     
  1085  000000                     
  1086  000000                     
  1087  000000                     
  1088  000000                     
  1089  000000                     
  1090  000000                     
  1091  000000                     
  1092  000000                     
  1093  000000                     
  1094  000000                     
  1095  000000                     
  1096  000000                     
  1097  000000                     
  1098  000000                     
  1099  000000                     
  1100  000000                     
  1101  000000                     
  1102  000000                     
  1103  000000                     
  1104  000000                     
  1105  000000                     
  1106  000000                     
  1107  000000                     
  1108  000000                     
  1109  000000                     
  1110  000000                     
  1111  000000                     
  1112  000000                     
  1113  000000                     
  1114  000000                     
  1115  000000                     
  1116  000000                     
  1117  000000                     
  1118  000000                     
  1119  000000                     
  1120  000000                     
  1121  000000                     
  1122  000000                     
  1123  000000                     
  1124  000000                     
  1125  000000                     
  1126  000000                     
  1127  000000                     
  1128  000000                     
  1129  000000                     
  1130  000000                     
  1131  000000                     
  1132  000000                     
  1133  000000                     
  1134  000000                     
  1135  000000                     
  1136  000000                     
  1137  000000                     
  1138  000000                     
  1139  000000                     
  1140  000000                     
  1141  000000                     
  1142  000000                     
  1143  000000                     
  1144  000000                     
  1145  000000                     
  1146  000000                     
  1147  000000                     
  1148  000000                     
  1149  000000                     
  1150  000000                     
  1151  000000                     
  1152  000000                     
  1153  000000                     
  1154  000000                     
  1155  000000                     
  1156  000000                     
  1157  000000                     
  1158  000000                     
  1159  000000                     
  1160  000000                     
  1161  000000                     
  1162  000000                     
  1163  000000                     
  1164  000000                     
  1165  000000                     
  1166  000000                     
  1167  000000                     
  1168  000000                     
  1169  000000                     
  1170  000000                     
  1171  000000                     
  1172  000000                     
  1173  000000                     
  1174  000000                     
  1175  000000                     
  1176  000000                     
  1177  000000                     
  1178  000000                     
  1179  000000                     
  1180  000000                     
  1181  000000                     
  1182  000000                     
  1183  000000                     
  1184  000000                     
  1185  000000                     
  1186  000000                     
  1187  000000                     
  1188  000000                     
  1189  000000                     
  1190  000000                     
  1191  000000                     
  1192  000000                     
  1193  000000                     
  1194  000000                     
  1195  000000                     
  1196  000000                     
  1197  000000                     
  1198  000000                     
  1199  000000                     
  1200  000000                     
  1201  000000                     
  1202  000000                     
  1203  000000                     
  1204  000000                     
  1205  000000                     
  1206  000000                     
  1207  000000                     
  1208  000000                     
  1209  000000                     
  1210  000000                     
  1211  000000                     
  1212  000000                     
  1213  000000                     
  1214  000000                     
  1215  000000                     
  1216  000000                     
  1217  000000                     
  1218  000000                     
  1219  000000                     
  1220  000000                     
  1221  000000                     
  1222  000000                     
  1223  000000                     
  1224  000000                     
  1225  000000                     
  1226  000000                     
  1227  000000                     
  1228  000000                     
  1229  000000                     
  1230  000000                     
  1231  000000                     
  1232  000000                     
  1233  000000                     
  1234  000000                     
  1235  000000                     
  1236  000000                     
  1237  000000                     
  1238  000000                     
  1239  000000                     
  1240  000000                     
  1241  000000                     
  1242  000000                     
  1243  000000                     
  1244  000000                     
  1245  000000                     
  1246  000000                     
  1247  000000                     
  1248  000000                     
  1249  000000                     
  1250  000000                     
  1251  000000                     
  1252  000000                     
  1253  000000                     
  1254  000000                     
  1255  000000                     
  1256  000000                     
  1257  000000                     
  1258  000000                     
  1259  000000                     
  1260  000000                     
  1261  000000                     
  1262  000000                     
  1263  000000                     
  1264  000000                     
  1265  000000                     
  1266  000000                     
  1267  000000                     
  1268  000000                     
  1269  000000                     
  1270  000000                     
  1271  000000                     
  1272  000000                     
  1273  000000                     
  1274  000000                     
  1275  000000                     
  1276  000000                     
  1277  000000                     
  1278  000000                     
  1279  000000                     
  1280  000000                     
  1281  000000                     
  1282  000000                     
  1283  000000                     
  1284  000000                     
  1285  000000                     
  1286  000000                     
  1287  000000                     
  1288  000000                     
  1289  000000                     
  1290  000000                     
  1291  000000                     
  1292  000000                     
  1293  000000                     
  1294  000000                     
  1295  000000                     
  1296  000000                     
  1297  000000                     
  1298  000000                     
  1299  000000                     
  1300  000000                     
  1301  000000                     
  1302  000000                     
  1303  000000                     
  1304  000000                     
  1305  000000                     
  1306  000000                     
  1307  000000                     
  1308  000000                     
  1309  000000                     
  1310  000000                     
  1311  000000                     
  1312  000000                     
  1313  000000                     
  1314  000000                     
  1315  000000                     
  1316  000000                     
  1317  000000                     
  1318  000000                     
  1319  000000                     
  1320  000000                     
  1321  000000                     
  1322  000000                     
  1323  000000                     
  1324  000000                     
  1325  000000                     
  1326  000000                     
  1327  000000                     
  1328  000000                     
  1329  000000                     
  1330  000000                     
  1331  000000                     
  1332  000000                     
  1333  000000                     
  1334  000000                     
  1335  000000                     
  1336  000000                     
  1337  000000                     
  1338  000000                     
  1339  000000                     
  1340  000000                     
  1341  000000                     
  1342  000000                     
  1343  000000                     
  1344  000000                     
  1345  000000                     
  1346  000000                     
  1347  000000                     
  1348  000000                     
  1349  000000                     
  1350  000000                     
  1351  000000                     
  1352  000000                     
  1353  000000                     
  1354  000000                     
  1355  000000                     
  1356  000000                     
  1357  000000                     
  1358  000000                     
  1359  000000                     
  1360  000000                     
  1361  000000                     
  1362  000000                     
  1363  000000                     
  1364  000000                     
  1365  000000                     
  1366  000000                     
  1367  000000                     
  1368  000000                     
  1369                           
  1370                           	psect	bigbss
  1371  000358                     F784:
  1372  000358                     	ds	1
  1373  000000                     
  1374  000000                     
  1375  000000                     
  1376  000000                     
  1377  000000                     
  1378  000000                     
  1379  000000                     
  1380  000000                     
  1381  000000                     
  1382  000000                     
  1383  000000                     
  1384  000000                     
  1385  000000                     
  1386  000000                     
  1387  000000                     
  1388  000000                     
  1389  000000                     
  1390  000000                     
  1391  000000                     
  1392  000000                     
  1393  000000                     
  1394  000000                     
  1395  000000                     
  1396  000000                     
  1397  000000                     
  1398  000000                     
  1399  000000                     
  1400  000000                     
  1401  000000                     
  1402  000000                     
  1403  000000                     
  1404  000000                     
  1405  000000                     
  1406  000000                     
  1407  000000                     
  1408  000000                     
  1409  000000                     
  1410  000000                     
  1411  000000                     
  1412  000000                     
  1413  000000                     
  1414  000000                     
  1415  000000                     
  1416  000000                     
  1417  000000                     
  1418  000000                     
  1419  000000                     
  1420  000000                     
  1421  000000                     
  1422  000000                     
  1423  000000                     
  1424  000000                     
  1425  000000                     
  1426  000000                     
  1427  000000                     
  1428  000000                     
  1429  000000                     
  1430  000000                     
  1431  000000                     
  1432  000000                     
  1433  000000                     
  1434  000000                     
  1435  000000                     
  1436  000000                     
  1437  000000                     
  1438  000000                     
  1439  000000                     
  1440  000000                     
  1441  000000                     
  1442  000000                     
  1443  000000                     
  1444  000000                     
  1445  000000                     
  1446  000000                     
  1447  000000                     
  1448  000000                     
  1449  000000                     
  1450  000000                     
  1451  000000                     
  1452  000000                     
  1453  000000                     
  1454  000000                     
  1455  000000                     
  1456  000000                     
  1457  000000                     
  1458  000000                     
  1459  000000                     
  1460  000000                     
  1461  000000                     
  1462  000000                     
  1463  000000                     
  1464  000000                     
  1465  000000                     
  1466  000000                     
  1467  000000                     
  1468                           
  1469                           	psect	bss
  1470  000016                     F785:
  1471  000016                     	ds	2
  1472  000000                     
  1473  000000                     
  1474  000000                     
  1475  000000                     
  1476  000000                     
  1477  000000                     
  1478  000000                     
  1479                           
  1480                           	psect	temp
  1481  000000                     btemp:
  1482  000000                     	ds	4
  1483                           tblptrh	equ	0xFF7
  1484                           tblptrl	equ	0xFF6
  1485                           tablat	equ	0xFF5
  1486                           prodh	equ	0xFF4
  1487                           prodl	equ	0xFF3
  1488                           indf0	equ	0xFEF
  1489                           fsr0h	equ	0xFEA
  1490                           fsr0l	equ	0xFE9
  1491                           fsr2l	equ	0xFD9
  1492                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL2
Symbol Table                                           Mon Dec 07 22:12:01 2009

          ?_ConfigFilter 0046                 _OsdWrite 6FD0  
          ?_ConfigFloppy 0046                        l2 6FE6  
                      l3 6FF0                        l5 6FF6  
                      l6 721C                        l9 706C  
              ?_OsdWrite 005D                       l11 704C  
                     l13 705C                       l32 7384  
                     l16 7238                       l33 7396  
                     l34 73B4                       l35 73FE  
                     l19 7250                       l38 7436  
                     u20 7016                       u27 700C  
                     u60 7030                      F784 0358  
                    F785 0016           _ConfigScanline 7324  
                    u100 70AA                      u110 70D4  
                    u120 70F8                      u130 7122  
                    u107 70A0                      u140 7146  
                    u117 70CA                      u150 7170  
                    u127 70EE                      u160 7194  
                    u137 7118                      u170 71BE  
                    u235 72B6                      u147 713C  
                    u180 71E2                      u245 730E  
                    u157 7166                      u190 720C  
                    u167 718A                      u360 73F8  
                    u177 71B4                      u266 7350  
                    u187 71D8                      u268 7352  
                    u197 7202                      u286 735C  
                    u288 735E                      u396 7434  
                    _SPI 786A              ?a_ConfigIDE 0048  
             ?a_OsdClear 0051               ?a_OsdReset 0046  
               _charfont 0600               ?a_OsdWrite 0060  
                   f4002 72E2                     f4012 72F8  
                   f4102 740A                     f4022 7326  
                   f4032 733C                     f4042 7372  
                   f3902 6FD2                     f3932 7242  
                   f3942 7272                     f3962 727E  
                   f3972 728A                     f3982 72A0  
                   f3992 72CE                     fsr0h 000FEA  
                   indf0 000FEF                     fsr0l 000FE9  
                   fsr2l 000FD9                     btemp 0000  
                   prodh 000FF4                     prodl 000FF3  
 __end_of_ConfigScanline 7338            _keycode_table 0880  
             used_btemp0 0001               used_btemp1 0001  
             used_btemp2 0001               used_btemp3 0001  
                  tablat 000FF5                    status 000FD8  
           ?a_OsdGetCtrl 0046         __end_of_OsdClear 7270  
          _ConfigChipset 72E0               _CheckTimer 7804  
       __end_of_OsdReset 729C                  __Lparam 0037  
       __end_of_OsdWrite 7240              ?_CheckTimer 0048  
  __end_of_ConfigChipset 72F4                  __ramtop 0600  
       ?a_ConfigScanline 0046             _ConfigFilter 729E  
           _ConfigFloppy 72F6             _ConfigMemory 72CC  
   __end_of_ConfigFilter 72CC     __end_of_ConfigFloppy 7324  
   __end_of_ConfigMemory 72E0          ?a_ConfigChipset 0046  
              _ConfigIDE 733A        __end_of_ConfigIDE 7370  
             ?_ConfigIDE 0046                   tblptrh 000FF7  
                 tblptrl 000FF6                 _GetTimer 77DC  
         ?a_ConfigFilter 0047           ?a_ConfigFloppy 0047  
              ?_GetTimer 0048              _GetASCIIKey 7408  
         ?a_ConfigMemory 0046               _OsdGetCtrl 7370  
             _OsdDisable 727C       __end_of_OsdGetCtrl 7408  
             _OsdCommand 787A      __end_of_GetASCIIKey 743C  
     __end_of_OsdDisable 7288                _OsdEnable 7270  
      __end_of_OsdEnable 727C                 _OsdClear 7240  
               _OsdReset 7288  
