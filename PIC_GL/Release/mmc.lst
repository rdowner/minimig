

HI-TECH Software PICC-18 Macro Assembler V9.51PL2
                                                       Mon Dec 07 22:12:01 2009


     1                           	processor	18F252
     2                           	opt	pw 80
     3                           	psect	data,global,class=RAM,space=1,delta=1
     4                           	psect	idata,global,class=CODE,delta=1
     5                           	psect	text,global,reloc=2,class=CODE,delta=1
     6                           	psect	bigbss,global,class=BIGRAM,space=1,delta=
      +                          1
     7                           	psect	bss,global,class=RAM,space=1,delta=1
     8                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     9                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97  000000                     
    98  000000                     
    99                           
   100                           	psect	data
   101                           ;pic18fxx2.h: 21: static volatile near unsigned 
      +                          char TOSU @ 0xFFF;
   102                           ;pic18fxx2.h: 22: static volatile near unsigned 
      +                          char TOSH @ 0xFFE;
   103                           ;pic18fxx2.h: 23: static volatile near unsigned 
      +                          char TOSL @ 0xFFD;
   104                           ;pic18fxx2.h: 24: static volatile near unsigned 
      +                          char STKPTR @ 0xFFC;
   105                           ;pic18fxx2.h: 25: static volatile near unsigned 
      +                          char PCLATU @ 0xFFB;
   106                           ;pic18fxx2.h: 26: static volatile near unsigned 
      +                          char PCLATH @ 0xFFA;
   107                           ;pic18fxx2.h: 27: static volatile near unsigned 
      +                          char PCL @ 0xFF9;
   108                           ;pic18fxx2.h: 28: static volatile far unsigned c
      +                          har * TBLPTR @ 0xFF6;
   109                           ;pic18fxx2.h: 29: static volatile near unsigned 
      +                          char TBLPTRU @ 0xFF8;
   110                           ;pic18fxx2.h: 30: static volatile near unsigned 
      +                          char TBLPTRH @ 0xFF7;
   111                           ;pic18fxx2.h: 31: static volatile near unsigned 
      +                          char TBLPTRL @ 0xFF6;
   112                           ;pic18fxx2.h: 32: static volatile near unsigned 
      +                          char TABLAT @ 0xFF5;
   113                           ;pic18fxx2.h: 33: static volatile near unsigned 
      +                          char PRODH @ 0xFF4;
   114                           ;pic18fxx2.h: 34: static volatile near unsigned 
      +                          char PRODL @ 0xFF3;
   115                           ;pic18fxx2.h: 35: static volatile near unsigned 
      +                          char INTCON @ 0xFF2;
   116                           ;pic18fxx2.h: 36: static near unsigned char INTC
      +                          ON2 @ 0xFF1;
   117                           ;pic18fxx2.h: 37: static volatile near unsigned 
      +                          char INTCON3 @ 0xFF0;
   118                           ;pic18fxx2.h: 38: static volatile near unsigned 
      +                          char INDF0 @ 0xFEF;
   119                           ;pic18fxx2.h: 39: static volatile near unsigned 
      +                          char POSTINC0 @ 0xFEE;
   120                           ;pic18fxx2.h: 40: static volatile near unsigned 
      +                          char POSTDEC0 @ 0xFED;
   121                           ;pic18fxx2.h: 41: static volatile near unsigned 
      +                          char PREINC0 @ 0xFEC;
   122                           ;pic18fxx2.h: 42: static volatile near unsigned 
      +                          char PLUSW0 @ 0xFEB;
   123                           ;pic18fxx2.h: 43: static volatile near unsigned 
      +                          char FSR0H @ 0xFEA;
   124                           ;pic18fxx2.h: 44: static volatile near unsigned 
      +                          char FSR0L @ 0xFE9;
   125                           ;pic18fxx2.h: 45: static volatile near unsigned 
      +                          char WREG @ 0xFE8;
   126                           ;pic18fxx2.h: 46: static volatile near unsigned 
      +                          char INDF1 @ 0xFE7;
   127                           ;pic18fxx2.h: 47: static volatile near unsigned 
      +                          char POSTINC1 @ 0xFE6;
   128                           ;pic18fxx2.h: 48: static volatile near unsigned 
      +                          char POSTDEC1 @ 0xFE5;
   129                           ;pic18fxx2.h: 49: static volatile near unsigned 
      +                          char PREINC1 @ 0xFE4;
   130                           ;pic18fxx2.h: 50: static volatile near unsigned 
      +                          char PLUSW1 @ 0xFE3;
   131                           ;pic18fxx2.h: 51: static volatile near unsigned 
      +                          char FSR1H @ 0xFE2;
   132                           ;pic18fxx2.h: 52: static volatile near unsigned 
      +                          char FSR1L @ 0xFE1;
   133                           ;pic18fxx2.h: 53: static near unsigned char BSR 
      +                          @ 0xFE0;
   134                           ;pic18fxx2.h: 54: static volatile near unsigned 
      +                          char INDF2 @ 0xFDF;
   135                           ;pic18fxx2.h: 55: static volatile near unsigned 
      +                          char POSTINC2 @ 0xFDE;
   136                           ;pic18fxx2.h: 56: static volatile near unsigned 
      +                          char POSTDEC2 @ 0xFDD;
   137                           ;pic18fxx2.h: 57: static volatile near unsigned 
      +                          char PREINC2 @ 0xFDC;
   138                           ;pic18fxx2.h: 58: static volatile near unsigned 
      +                          char PLUSW2 @ 0xFDB;
   139                           ;pic18fxx2.h: 59: static volatile near unsigned 
      +                          char FSR2H @ 0xFDA;
   140                           ;pic18fxx2.h: 60: static volatile near unsigned 
      +                          char FSR2L @ 0xFD9;
   141                           ;pic18fxx2.h: 61: static volatile near unsigned 
      +                          char STATUS @ 0xFD8;
   142                           ;pic18fxx2.h: 62: static volatile near unsigned 
      +                          int TMR0 @ 0xFD6;
   143                           ;pic18fxx2.h: 63: static volatile near unsigned 
      +                          char TMR0H @ 0xFD7;
   144                           ;pic18fxx2.h: 64: static volatile near unsigned 
      +                          char TMR0L @ 0xFD6;
   145                           ;pic18fxx2.h: 65: static near unsigned char T0CO
      +                          N @ 0xFD5;
   146                           ;pic18fxx2.h: 66: static volatile near unsigned 
      +                          char OSCCON @ 0xFD3;
   147                           ;pic18fxx2.h: 67: static volatile near unsigned 
      +                          char LVDCON @ 0xFD2;
   148                           ;pic18fxx2.h: 68: static near unsigned char WDTC
      +                          ON @ 0xFD1;
   149                           ;pic18fxx2.h: 69: static volatile near unsigned 
      +                          char RCON @ 0xFD0;
   150                           ;pic18fxx2.h: 70: static volatile near unsigned 
      +                          int TMR1 @ 0xFCE;
   151                           ;pic18fxx2.h: 71: static volatile near unsigned 
      +                          char TMR1H @ 0xFCF;
   152                           ;pic18fxx2.h: 72: static volatile near unsigned 
      +                          char TMR1L @ 0xFCE;
   153                           ;pic18fxx2.h: 73: static near unsigned char T1CO
      +                          N @ 0xFCD;
   154                           ;pic18fxx2.h: 74: static volatile near unsigned 
      +                          char TMR2 @ 0xFCC;
   155                           ;pic18fxx2.h: 75: static volatile near unsigned 
      +                          char PR2 @ 0xFCB;
   156                           ;pic18fxx2.h: 76: static near unsigned char T2CO
      +                          N @ 0xFCA;
   157                           ;pic18fxx2.h: 77: static volatile near unsigned 
      +                          char SSPBUF @ 0xFC9;
   158                           ;pic18fxx2.h: 78: static volatile near unsigned 
      +                          char SSPADD @ 0xFC8;
   159                           ;pic18fxx2.h: 79: static volatile near unsigned 
      +                          char SSPSTAT @ 0xFC7;
   160                           ;pic18fxx2.h: 80: static volatile near unsigned 
      +                          char SSPCON1 @ 0xFC6;
   161                           ;pic18fxx2.h: 81: static volatile near unsigned 
      +                          char SSPCON2 @ 0xFC5;
   162                           ;pic18fxx2.h: 82: static volatile near unsigned 
      +                          int ADRES @ 0xFC3;
   163                           ;pic18fxx2.h: 83: static volatile near unsigned 
      +                          char ADRESH @ 0xFC4;
   164                           ;pic18fxx2.h: 84: static volatile near unsigned 
      +                          char ADRESL @ 0xFC3;
   165                           ;pic18fxx2.h: 85: static volatile near unsigned 
      +                          char ADCON0 @ 0xFC2;
   166                           ;pic18fxx2.h: 86: static near unsigned char ADCO
      +                          N1 @ 0xFC1;
   167                           ;pic18fxx2.h: 87: static volatile near unsigned 
      +                          int CCPR1 @ 0xFBE;
   168                           ;pic18fxx2.h: 88: static volatile near unsigned 
      +                          char CCPR1H @ 0xFBF;
   169                           ;pic18fxx2.h: 89: static volatile near unsigned 
      +                          char CCPR1L @ 0xFBE;
   170                           ;pic18fxx2.h: 90: static volatile near unsigned 
      +                          char CCP1CON @ 0xFBD;
   171                           ;pic18fxx2.h: 91: static volatile near unsigned 
      +                          int CCPR2 @ 0xFBB;
   172                           ;pic18fxx2.h: 92: static volatile near unsigned 
      +                          char CCPR2H @ 0xFBC;
   173                           ;pic18fxx2.h: 93: static volatile near unsigned 
      +                          char CCPR2L @ 0xFBB;
   174                           ;pic18fxx2.h: 94: static volatile near unsigned 
      +                          char CCP2CON @ 0xFBA;
   175                           ;pic18fxx2.h: 95: static volatile near unsigned 
      +                          int TMR3 @ 0xFB2;
   176                           ;pic18fxx2.h: 96: static volatile near unsigned 
      +                          char TMR3H @ 0xFB3;
   177                           ;pic18fxx2.h: 97: static volatile near unsigned 
      +                          char TMR3L @ 0xFB2;
   178                           ;pic18fxx2.h: 98: static near unsigned char T3CO
      +                          N @ 0xFB1;
   179                           ;pic18fxx2.h: 99: static near unsigned char SPBR
      +                          G @ 0xFAF;
   180                           ;pic18fxx2.h: 100: static volatile near unsigned
      +                           char RCREG @ 0xFAE;
   181                           ;pic18fxx2.h: 101: static volatile near unsigned
      +                           char TXREG @ 0xFAD;
   182                           ;pic18fxx2.h: 102: static volatile near unsigned
      +                           char TXSTA @ 0xFAC;
   183                           ;pic18fxx2.h: 103: static volatile near unsigned
      +                           char RCSTA @ 0xFAB;
   184                           ;pic18fxx2.h: 104: static volatile near unsigned
      +                           char EEADR @ 0xFA9;
   185                           ;pic18fxx2.h: 105: static volatile near unsigned
      +                           char EEDATA @ 0xFA8;
   186                           ;pic18fxx2.h: 106: static volatile near unsigned
      +                           char EECON2 @ 0xFA7;
   187                           ;pic18fxx2.h: 107: static volatile near unsigned
      +                           char EECON1 @ 0xFA6;
   188                           ;pic18fxx2.h: 108: static near unsigned char IPR
      +                          2 @ 0xFA2;
   189                           ;pic18fxx2.h: 109: static volatile near unsigned
      +                           char PIR2 @ 0xFA1;
   190                           ;pic18fxx2.h: 110: static near unsigned char PIE
      +                          2 @ 0xFA0;
   191                           ;pic18fxx2.h: 111: static near unsigned char IPR
      +                          1 @ 0xF9F;
   192                           ;pic18fxx2.h: 112: static volatile near unsigned
      +                           char PIR1 @ 0xF9E;
   193                           ;pic18fxx2.h: 113: static near unsigned char PIE
      +                          1 @ 0xF9D;
   194                           ;pic18fxx2.h: 114: static volatile near unsigned
      +                           char TRISC @ 0xF94;
   195                           ;pic18fxx2.h: 115: static volatile near unsigned
      +                           char TRISB @ 0xF93;
   196                           ;pic18fxx2.h: 116: static volatile near unsigned
      +                           char TRISA @ 0xF92;
   197                           ;pic18fxx2.h: 117: static volatile near unsigned
      +                           char LATC @ 0xF8B;
   198                           ;pic18fxx2.h: 118: static volatile near unsigned
      +                           char LATB @ 0xF8A;
   199                           ;pic18fxx2.h: 119: static volatile near unsigned
      +                           char LATA @ 0xF89;
   200                           ;pic18fxx2.h: 120: static volatile near unsigned
      +                           char PORTC @ 0xF82;
   201  000033                     _t_lba:
   202  000033                     	ds	4
   203                           
   204                           	psect	idata
   205  000FF8  FFFF               	dw	65535
   206  000FFA  FFFF               	dw	65535
   207                           
   208                           	psect	text
   209                           ;mmc.c: 57: unsigned long t_lba = -1;
   210                           ;mmc.c: 62: unsigned char MMC_DIRECT_TRANSFER_MO
      +                          DE = 0;
   211                           ;mmc.c: 66: void Command_R0(char cmd,unsigned sh
      +                          ort AdrH,unsigned short AdrL);
   212                           ;mmc.c: 67: void Command_R1(char cmd,unsigned sh
      +                          ort AdrH,unsigned short AdrL);
   213                           ;mmc.c: 68: void Command_R2(char cmd,unsigned sh
      +                          ort AdrH,unsigned short AdrL);
   214                           ;mmc.c: 69: void Command_R3(char cmd,unsigned sh
      +                          ort AdrH,unsigned short AdrL);
   215                           ;mmc.c: 70: void MmcAddCrc7(unsigned char c);
   216                           ;mmc.c: 80: unsigned char MMC_Init(void)
   217                           ;mmc.c: 81: {
   218  006A20                     _MMC_Init:
   219                           ;	_i assigned to ?a_Command_R3+1
   220  000000                     _Command_R3$i	set	?a_Command_R3+1
   221                           ;	_cmd assigned to ?a_Command_R3+0
   222  000000                     _Command_R3$cmd	set	?a_Command_R3
   223                           ;       param _AdrL assigned to ?_Command_R3+2
   224  000000                     _Command_R3$AdrL	set	?_Command_R3+2
   225                           ;       param _AdrH assigned to ?_Command_R3+0
   226  000000                     _Command_R3$AdrH	set	?_Command_R3
   227                           ;	_i assigned to ?a_Command_R2+1
   228  000000                     _Command_R2$i	set	?a_Command_R2+1
   229                           ;	_cmd assigned to ?a_Command_R2+0
   230  000000                     _Command_R2$cmd	set	?a_Command_R2
   231                           ;       param _AdrL assigned to ?_Command_R2+2
   232  000000                     _Command_R2$AdrL	set	?_Command_R2+2
   233                           ;       param _AdrH assigned to ?_Command_R2+0
   234  000000                     _Command_R2$AdrH	set	?_Command_R2
   235                           ;	_i assigned to ?a_Command_R1+1
   236  000000                     _Command_R1$i	set	?a_Command_R1+1
   237                           ;	_cmd assigned to ?a_Command_R1+0
   238  000000                     _Command_R1$cmd	set	?a_Command_R1
   239                           ;       param _AdrL assigned to ?_Command_R1+2
   240  000000                     _Command_R1$AdrL	set	?_Command_R1+2
   241                           ;       param _AdrH assigned to ?_Command_R1+0
   242  000000                     _Command_R1$AdrH	set	?_Command_R1
   243                           ;	_cmd assigned to ?a_Command_R0+0
   244  000000                     _Command_R0$cmd	set	?a_Command_R0
   245                           ;       param _AdrL assigned to ?_Command_R0+2
   246  000000                     _Command_R0$AdrL	set	?_Command_R0+2
   247                           ;       param _AdrH assigned to ?_Command_R0+0
   248  000000                     _Command_R0$AdrH	set	?_Command_R0
   249                           ;	_i assigned to ?a_MMC_Write+0
   250  000000                     _MMC_Write$i	set	?a_MMC_Write
   251                           ;       param _WriteData assigned to ?_MMC_Write
      +                          +4
   252  000000                     _MMC_Write$WriteData	set	?_MMC_Write+4
   253                           ;       param _lba assigned to ?_MMC_Write+0
   254  000000                     _MMC_Write$lba	set	?_MMC_Write
   255                           ;       param _ReadData assigned to ?_MMC_Read+4
   256  000000                     _MMC_Read$ReadData	set	?_MMC_Read+4
   257                           ;       param _lba assigned to ?_MMC_Read+0
   258  000000                     _MMC_Read$lba	set	?_MMC_Read
   259                           ;	_lp assigned to ?a_MMC_Init+0
   260  000000                     _MMC_Init$lp	set	?a_MMC_Init
   261                           ; errata NOP at function entry point
   262  006A20  FFFF               	dw	65535
   263  006A22                     f3992:
   264  000000                     
   265                           ;mmc.c: 82: unsigned short lp;
   266  006A22  0E32               	movlw	50
   267  006A24  6EC6               	movwf	4038,c	;volatile
   268                           ;mmc.c: 86: TRISA0 = 1;
   269  006A26  8092               	bsf	3986,0,c	;volatile
   270                           ;mmc.c: 87: RC0 = 1;
   271  006A28  8082               	bsf	3970,0,c	;volatile
   272                           ;mmc.c: 89: for (lp=0; lp<10; lp++)
   273  006A2A  0100               	movlb	__Lparam shr (0+8)
   274  006A2C  6B40               	clrf	?a_MMC_Init^(__Lparam& (0+65280)),b
   275  006A2E  6B41               	clrf	(?a_MMC_Init+1)^(__Lparam& (0+65280)),b
   276  006A30                     l3:
   277                           ;mmc.c: 90: { SPI(0xFF); }
   278  006A30  0EFF               	movlw	255
   279  006A32  EC35  F03C         	call	_SPI
   280  006A36  0100               	movlb	__Lparam shr (0+8)
   281  006A38  4B40               	infsnz	?a_MMC_Init^(__Lparam& (0+65280)),f,b
   282  006A3A  2B41               	incf	(?a_MMC_Init+1)^(__Lparam& (0+65280)),f,b
   283  006A3C  0E00               	movlw	0
   284  006A3E  5D41               	subwf	(?a_MMC_Init+1)^(__Lparam& (0+65280)),w
   285  006A40  0E0A               	movlw	10
   286  006A42  B4D8               	btfsc	status,2,c
   287  006A44  5D40               	subwf	?a_MMC_Init^(__Lparam& (0+65280)),w
   288  006A46  E3F4               	bnc	l3
   289                           ;mmc.c: 92: for (lp=0; lp<56000; lp++);
   290  006A48  6AF3               	clrf	prodl,c
   291  006A4A  6AF4               	clrf	prodh,c
   292  006A4C                     l6:
   293  006A4C  4AF3               	infsnz	prodl,f,c
   294  006A4E  2AF4               	incf	prodh,f,c
   295  006A50  0EDA               	movlw	218
   296  006A52  5CF4               	subwf	prodh,w,c
   297  006A54  0EC0               	movlw	192
   298  006A56  B4D8               	btfsc	status,2,c
   299  006A58  5CF3               	subwf	prodl,w,c
   300  006A5A  E3F8               	bnc	l6
   301                           ;mmc.c: 94: RC0 = 0;
   302  006A5C  9082               	bcf	3970,0,c	;volatile
   303                           ;mmc.c: 97: cardType = 0x00;
   304  006A5E  0103               	movlb	_cardType shr (0+8)
   305  006A60  6B5A               	clrf	_cardType& (0+255),b
   306                           ;mmc.c: 100: Command_R1(0x40,0,0);
   307  006A62  0100               	movlb	__Lparam shr (0+8)
   308  006A64  6BF5               	clrf	?_Command_R1^(__Lparam& (0+65280)),b
   309  006A66  6BF6               	clrf	(?_Command_R1+1)^(__Lparam& (0+65280)),b
   310  006A68  6BF7               	clrf	(?_Command_R1+2)^(__Lparam& (0+65280)),b
   311  006A6A  6BF8               	clrf	(?_Command_R1+3)^(__Lparam& (0+65280)),b
   312  006A6C  0E40               	movlw	64
   313  006A6E  DA21               	call	_Command_R1
   314                           ;mmc.c: 101: if (response_1 != 0x01)
   315  006A70  C35C  F000         	movff	_response_1,btemp
   316  006A74  0400               	decf	btemp,w,c
   317  006A76  E005               	bz	l9
   318                           ;mmc.c: 102: {
   319  006A78  8082               	bsf	3970,0,c	;volatile
   320  006A7A  0EFF               	movlw	255
   321  006A7C  EC35  F03C         	call	_SPI
   322  006A80  D09D               	goto	L4
   323                           ;mmc.c: 108: return(0);
   324  006A82                     l9:
   325                           ;mmc.c: 109: }
   326  006A82  0100               	movlb	__Lparam shr (0+8)
   327  006A84  6B42               	clrf	?_Command_R3^(__Lparam& (0+65280)),b
   328  006A86  6B43               	clrf	(?_Command_R3+1)^(__Lparam& (0+65280)),b
   329  006A88  0EAA               	movlw	170
   330  006A8A  6F44               	movwf	(?_Command_R3+2)^(__Lparam& (0+65280)),b
   331  006A8C  0E01               	movlw	1
   332  006A8E  6F45               	movwf	(?_Command_R3+3)^(__Lparam& (0+65280)),b
   333  006A90  0E48               	movlw	72
   334  006A92  DA52               	call	_Command_R3
   335                           ;mmc.c: 113: if(0 == (response_1 & 0x04))
   336  006A94  0103               	movlb	_response_1 shr (0+8)
   337  006A96  B55C               	btfsc	_response_1& (0+255),2,b
   338  006A98  D010               	goto	l10
   339                           ;mmc.c: 114: {
   340  006A9A  C35F  F000         	movff	_response_4,btemp
   341  006A9E  0400               	decf	btemp,w,c
   342  006AA0  E107               	bnz	l11
   343  006AA2  C360  FFE8         	movff	_response_5,wreg
   344  006AA6  0AAA               	xorlw	-86
   345  006AA8  E103               	bnz	l11
   346                           ;mmc.c: 116: {
   347  006AAA  0103               	movlb	_cardType shr (0+8)
   348  006AAC  835A               	bsf	_cardType& (0+255),1,b
   349                           ;mmc.c: 121: }
   350  006AAE  D018               	goto	l13
   351  006AB0                     l11:
   352                           ;mmc.c: 122: else
   353  006AB0  8082               	bsf	3970,0,c	;volatile
   354  006AB2  0EFF               	movlw	255
   355  006AB4  EC35  F03C         	call	_SPI
   356  006AB8  D081               	goto	L4
   357                           ;mmc.c: 129: return(0);
   358                           ;mmc.c: 130: }
   359  006ABA                     l10:
   360                           ;mmc.c: 132: else
   361  006ABA  0100               	movlb	__Lparam shr (0+8)
   362  006ABC  6BF5               	clrf	?_Command_R1^(__Lparam& (0+65280)),b
   363  006ABE  6BF6               	clrf	(?_Command_R1+1)^(__Lparam& (0+65280)),b
   364  006AC0  6BF7               	clrf	(?_Command_R1+2)^(__Lparam& (0+65280)),b
   365  006AC2  6BF8               	clrf	(?_Command_R1+3)^(__Lparam& (0+65280)),b
   366  006AC4  0E77               	movlw	119
   367  006AC6  D9F5               	call	_Command_R1
   368                           ;mmc.c: 136: Command_R1(0x69,0,0);
   369  006AC8  0100               	movlb	__Lparam shr (0+8)
   370  006ACA  6BF5               	clrf	?_Command_R1^(__Lparam& (0+65280)),b
   371  006ACC  6BF6               	clrf	(?_Command_R1+1)^(__Lparam& (0+65280)),b
   372  006ACE  6BF7               	clrf	(?_Command_R1+2)^(__Lparam& (0+65280)),b
   373  006AD0  6BF8               	clrf	(?_Command_R1+3)^(__Lparam& (0+65280)),b
   374  006AD2  0E69               	movlw	105
   375  006AD4  D9EE               	call	_Command_R1
   376                           ;mmc.c: 137: if(0 == (response_1 & 0x04))
   377  006AD6  0103               	movlb	_response_1 shr (0+8)
   378  006AD8  B55C               	btfsc	_response_1& (0+255),2,b
   379  006ADA  D002               	goto	l13
   380                           ;mmc.c: 138: {
   381  006ADC  0103               	movlb	_cardType shr (0+8)
   382  006ADE  815A               	bsf	_cardType& (0+255),0,b
   383                           ;mmc.c: 143: }
   384  006AE0                     l13:
   385                           ;mmc.c: 150: }
   386  006AE0  EE00  F014         	lfsr	0,_timeout
   387  006AE4  6AEE               	clrf	postinc0,c
   388  006AE6  6AEE               	clrf	postinc0,c
   389  006AE8                     l17:
   390                           ;mmc.c: 155: while (1)
   391                           ;mmc.c: 156: {
   392  006AE8  C35A  FFE8         	movff	_cardType,wreg
   393  006AEC  0B03               	andlw	3
   394  006AEE  E01B               	bz	l19
   395                           ;mmc.c: 158: {
   396  006AF0  0100               	movlb	__Lparam shr (0+8)
   397  006AF2  6B40               	clrf	?a_MMC_Init^(__Lparam& (0+65280)),b
   398  006AF4  6B41               	clrf	(?a_MMC_Init+1)^(__Lparam& (0+65280)),b
   399                           ;mmc.c: 161: if(cardType & (1<<1))
   400  006AF6  0103               	movlb	_cardType shr (0+8)
   401  006AF8  A35A               	btfss	_cardType& (0+255),1,b
   402  006AFA  D004               	goto	l20
   403                           ;mmc.c: 162: { lp = 0x4000; }
   404  006AFC  0100               	movlb	__Lparam shr (0+8)
   405  006AFE  6B40               	clrf	?a_MMC_Init^(__Lparam& (0+65280)),b
   406  006B00  0E40               	movlw	64
   407  006B02  6F41               	movwf	(?a_MMC_Init+1)^(__Lparam& (0+65280)),b
   408  006B04                     l20:
   409                           ;mmc.c: 165: Command_R1(0x77,0,0);
   410  006B04  0100               	movlb	__Lparam shr (0+8)
   411  006B06  6BF5               	clrf	?_Command_R1^(__Lparam& (0+65280)),b
   412  006B08  6BF6               	clrf	(?_Command_R1+1)^(__Lparam& (0+65280)),b
   413  006B0A  6BF7               	clrf	(?_Command_R1+2)^(__Lparam& (0+65280)),b
   414  006B0C  6BF8               	clrf	(?_Command_R1+3)^(__Lparam& (0+65280)),b
   415  006B0E  0E77               	movlw	119
   416  006B10  D9D0               	call	_Command_R1
   417                           ;mmc.c: 166: Command_R1(0x69,lp,0);
   418  006B12  C040  F0F5         	movff	?a_MMC_Init,?_Command_R1
   419  006B16  C041  F0F6         	movff	?a_MMC_Init+1,?_Command_R1+1
   420  006B1A  0100               	movlb	__Lparam shr (0+8)
   421  006B1C  6BF7               	clrf	(?_Command_R1+2)^(__Lparam& (0+65280)),b
   422  006B1E  6BF8               	clrf	(?_Command_R1+3)^(__Lparam& (0+65280)),b
   423  006B20  0E69               	movlw	105
   424  006B22  D9C7               	call	_Command_R1
   425                           ;mmc.c: 167: }
   426  006B24  D007               	goto	l21
   427  006B26                     l19:
   428                           ;mmc.c: 168: else
   429  006B26  0100               	movlb	__Lparam shr (0+8)
   430  006B28  6BF5               	clrf	?_Command_R1^(__Lparam& (0+65280)),b
   431  006B2A  6BF6               	clrf	(?_Command_R1+1)^(__Lparam& (0+65280)),b
   432  006B2C  6BF7               	clrf	(?_Command_R1+2)^(__Lparam& (0+65280)),b
   433  006B2E  6BF8               	clrf	(?_Command_R1+3)^(__Lparam& (0+65280)),b
   434  006B30  0E41               	movlw	65
   435  006B32  D9BF               	call	_Command_R1
   436  006B34                     l21:
   437                           ;mmc.c: 172: }
   438  006B34  0103               	movlb	_response_1 shr (0+8)
   439  006B36  535C               	movf	_response_1& (0+255),f,b
   440  006B38  E00F               	bz	l18
   441                           ;mmc.c: 176: { break; }
   442                           ;mmc.c: 178: timeout++;
   443  006B3A  0100               	movlb	_timeout shr (0+8)
   444  006B3C  2B14               	incf	_timeout& (0+255),f,b
   445  006B3E  0E00               	movlw	0
   446  006B40  2315               	addwfc	(_timeout+1)& (0+255),f,b
   447                           ;mmc.c: 179: if (timeout == 1000)
   448  006B42  5115               	movf	(_timeout+1)& (0+255),w,b
   449  006B44  0A03               	xorlw	3
   450  006B46  0EE8               	movlw	232
   451  006B48  B4D8               	btfsc	status,2,c
   452  006B4A  1914               	xorwf	_timeout& (0+255),w,b
   453  006B4C  E1CD               	bnz	l17
   454                           ;mmc.c: 180: {
   455  006B4E  8082               	bsf	3970,0,c	;volatile
   456  006B50  0EFF               	movlw	255
   457  006B52  EC35  F03C         	call	_SPI
   458  006B56  D032               	goto	L4
   459                           ;mmc.c: 185: return(0);
   460  006B58                     l18:
   461                           ;mmc.c: 186: }
   462  006B58  0103               	movlb	_cardType shr (0+8)
   463  006B5A  A35A               	btfss	_cardType& (0+255),1,b
   464  006B5C  D014               	goto	l24
   465                           ;mmc.c: 191: {
   466  006B5E  0100               	movlb	__Lparam shr (0+8)
   467  006B60  6B42               	clrf	?_Command_R3^(__Lparam& (0+65280)),b
   468  006B62  6B43               	clrf	(?_Command_R3+1)^(__Lparam& (0+65280)),b
   469  006B64  6B44               	clrf	(?_Command_R3+2)^(__Lparam& (0+65280)),b
   470  006B66  6B45               	clrf	(?_Command_R3+3)^(__Lparam& (0+65280)),b
   471  006B68  0E7A               	movlw	122
   472  006B6A  D9E6               	call	_Command_R3
   473                           ;mmc.c: 194: if(response_1)
   474  006B6C  0103               	movlb	_response_1 shr (0+8)
   475  006B6E  535C               	movf	_response_1& (0+255),f,b
   476  006B70  E005               	bz	l25
   477                           ;mmc.c: 195: {
   478  006B72  8082               	bsf	3970,0,c	;volatile
   479  006B74  0EFF               	movlw	255
   480  006B76  EC35  F03C         	call	_SPI
   481  006B7A  D020               	goto	L4
   482                           ;mmc.c: 197: return(0);
   483  006B7C                     l25:
   484                           ;mmc.c: 198: }
   485  006B7C  0103               	movlb	_response_2 shr (0+8)
   486  006B7E  AD5D               	btfss	_response_2& (0+255),6,b
   487  006B80  D002               	goto	l24
   488                           ;mmc.c: 201: {
   489  006B82  0103               	movlb	_cardType shr (0+8)
   490  006B84  855A               	bsf	_cardType& (0+255),2,b
   491  006B86                     l24:
   492                           ;mmc.c: 206: }
   493  006B86  EE00  F014         	lfsr	0,_timeout
   494  006B8A  6AEE               	clrf	postinc0,c
   495  006B8C  6AEE               	clrf	postinc0,c
   496  006B8E                     l28:
   497                           ;mmc.c: 211: while(1)
   498                           ;mmc.c: 212: {
   499  006B8E  0100               	movlb	__Lparam shr (0+8)
   500  006B90  6BF5               	clrf	?_Command_R1^(__Lparam& (0+65280)),b
   501  006B92  6BF6               	clrf	(?_Command_R1+1)^(__Lparam& (0+65280)),b
   502  006B94  6BF7               	clrf	(?_Command_R1+2)^(__Lparam& (0+65280)),b
   503  006B96  0E02               	movlw	2
   504  006B98  6FF8               	movwf	(?_Command_R1+3)^(__Lparam& (0+65280)),b
   505  006B9A  0E50               	movlw	80
   506  006B9C  D98A               	call	_Command_R1
   507                           ;mmc.c: 214: if(response_1 == 0)
   508  006B9E  0103               	movlb	_response_1 shr (0+8)
   509  006BA0  535C               	movf	_response_1& (0+255),f,b
   510  006BA2  E00F               	bz	l29
   511                           ;mmc.c: 215: { break; }
   512                           ;mmc.c: 217: timeout++;
   513  006BA4  0100               	movlb	_timeout shr (0+8)
   514  006BA6  2B14               	incf	_timeout& (0+255),f,b
   515  006BA8  0E00               	movlw	0
   516  006BAA  2315               	addwfc	(_timeout+1)& (0+255),f,b
   517                           ;mmc.c: 218: if(timeout == 100)
   518  006BAC  5114               	movf	_timeout& (0+255),w,b
   519  006BAE  0A64               	xorlw	100
   520  006BB0  1115               	iorwf	(_timeout+1)& (0+255),w,b
   521  006BB2  E1ED               	bnz	l28
   522                           ;mmc.c: 219: {
   523  006BB4  8082               	bsf	3970,0,c	;volatile
   524  006BB6  0EFF               	movlw	255
   525  006BB8  EC35  F03C         	call	_SPI
   526  006BBC                     L4:
   527  006BBC  9092               	bcf	3986,0,c	;volatile
   528                           ;mmc.c: 224: return(0);
   529  006BBE  0E00               	movlw	0
   530  006BC0  D008               	goto	l2
   531  006BC2                     l29:
   532                           ;mmc.c: 225: }
   533  006BC2  8082               	bsf	3970,0,c	;volatile
   534  006BC4  0EFF               	movlw	255
   535  006BC6  EC35  F03C         	call	_SPI
   536  006BCA  9092               	bcf	3986,0,c	;volatile
   537                           ;mmc.c: 233: SSPCON1 = 0x30;
   538  006BCC  0E30               	movlw	48
   539  006BCE  6EC6               	movwf	4038,c	;volatile
   540                           ;mmc.c: 234: return(1);
   541  006BD0  0E01               	movlw	1
   542                           ;mmc.c: 235: }
   543  006BD2                     l2:
   544  006BD2  0012               	return	
   545  006BD4  FFFF               	dw	65535	; Nop inserted for errata
   546  006BD6  D725               	goto	f3992
   547  006BD8                     __end_of_MMC_Init:
   548                           ;mmc.c: 238: unsigned char MMC_Read(unsigned lon
      +                          g lba, unsigned char *ReadData)
   549                           ;mmc.c: 239: {
   550  006BD8  00EF               	dw	?_MMC_Read
   551  006BDA                     _MMC_Read:
   552                           ; errata NOP at function entry point
   553  006BDA  FFFF               	dw	65535
   554  006BDC                     f4032:
   555  000000                     
   556                           ;mmc.c: 240: unsigned short upper_lba, lower_lba
      +                          ;
   557  006BDC  0103               	movlb	_MMC_DIRECT_TRANSFER_MODE shr (0+8)
   558  006BDE  5359               	movf	_MMC_DIRECT_TRANSFER_MODE& (0+255),f,b
   559  006BE0  E118               	bnz	l33
   560                           ;mmc.c: 250: {
   561  006BE2  EE00  F033         	lfsr	0,_t_lba
   562  006BE6  0100               	movlb	__Lparam shr (0+8)
   563  006BE8  50EE               	movf	postinc0,w,c
   564  006BEA  19EF               	xorwf	?_MMC_Read^(__Lparam& (0+65280)),w
   565  006BEC  E108               	bnz	u195
   566  006BEE  50EE               	movf	postinc0,w,c
   567  006BF0  19F0               	xorwf	(?_MMC_Read+1)^(__Lparam& (0+65280)),w
   568  006BF2  E105               	bnz	u195
   569  006BF4  50EE               	movf	postinc0,w,c
   570  006BF6  19F1               	xorwf	(?_MMC_Read+2)^(__Lparam& (0+65280)),w
   571  006BF8  E102               	bnz	u195
   572  006BFA  50EE               	movf	postinc0,w,c
   573  006BFC  19F2               	xorwf	(?_MMC_Read+3)^(__Lparam& (0+65280)),w
   574  006BFE                     u195:
   575  006BFE  E101 D08D          	bz	L5
   576                           ;mmc.c: 252: { return(1); }
   577                           ;mmc.c: 253: t_lba = lba;
   578  006C02  C0EF  F033         	movff	?_MMC_Read,_t_lba
   579  006C06  C0F0  F034         	movff	?_MMC_Read+1,_t_lba+1
   580  006C0A  C0F1  F035         	movff	?_MMC_Read+2,_t_lba+2
   581  006C0E  C0F2  F036         	movff	?_MMC_Read+3,_t_lba+3
   582  006C12                     l33:
   583                           ;mmc.c: 254: }
   584  006C12  0103               	movlb	_cardType shr (0+8)
   585  006C14  B55A               	btfsc	_cardType& (0+255),2,b
   586  006C16  D009               	goto	l35
   587                           ;mmc.c: 266: {
   588  006C18  0100               	movlb	__Lparam shr (0+8)
   589  006C1A  0E09               	movlw	9
   590  006C1C                     u215:
   591  006C1C  90D8               	bcf	status,0,c
   592  006C1E  37EF               	rlcf	?_MMC_Read^(__Lparam& (0+65280)),f,b
   593  006C20  37F0               	rlcf	(?_MMC_Read+1)^(__Lparam& (0+65280)),f,b
   594  006C22  37F1               	rlcf	(?_MMC_Read+2)^(__Lparam& (0+65280)),f,b
   595  006C24  37F2               	rlcf	(?_MMC_Read+3)^(__Lparam& (0+65280)),f,b
   596  006C26  2EE8               	decfsz	wreg,f,c
   597  006C28  D7F9               	goto	u215
   598  006C2A                     l35:
   599                           ;mmc.c: 271: }
   600  006C2A  C0F1  FFF3         	movff	?_MMC_Read+2,prodl
   601  006C2E  C0F2  FFF4         	movff	?_MMC_Read+3,prodh
   602                           ;mmc.c: 278: lower_lba = (unsigned short)lba;
   603  006C32  C0EF  FFF6         	movff	?_MMC_Read,tblptrl
   604  006C36  C0F0  FFF7         	movff	?_MMC_Read+1,tblptrh
   605                           ;mmc.c: 280: {TRISA0=1;RC0=0;};
   606  006C3A  8092               	bsf	3986,0,c	;volatile
   607  006C3C  9082               	bcf	3970,0,c	;volatile
   608                           ;mmc.c: 282: Command_R1(0x51, upper_lba, lower_l
      +                          ba);
   609  006C3E  CFF3 F0F5          	movff	prodl,?_Command_R1
   610  006C42  CFF4 F0F6          	movff	prodh,?_Command_R1+1
   611  006C46  CFF6 F0F7          	movff	tblptrl,?_Command_R1+2
   612  006C4A  CFF7 F0F8          	movff	tblptrh,?_Command_R1+3
   613  006C4E  0E51               	movlw	81
   614  006C50  D930               	call	_Command_R1
   615                           ;mmc.c: 285: if (response_1 !=0)
   616  006C52  0103               	movlb	_response_1 shr (0+8)
   617  006C54  535C               	movf	_response_1& (0+255),f,b
   618  006C56  E005               	bz	l36
   619                           ;mmc.c: 286: {
   620  006C58  8082               	bsf	3970,0,c	;volatile
   621  006C5A  0EFF               	movlw	255
   622  006C5C  EC35  F03C         	call	_SPI
   623  006C60  D01D               	goto	L6
   624                           ;mmc.c: 291: return(0);
   625  006C62                     l36:
   626                           ;mmc.c: 292: }
   627  006C62  EE00  F014         	lfsr	0,_timeout
   628  006C66  6AEE               	clrf	postinc0,c
   629  006C68  6AEE               	clrf	postinc0,c
   630                           ;mmc.c: 296: while(SPI(0xFF) != 0xFE)
   631  006C6A                     l37:
   632  006C6A  0EFF               	movlw	255
   633  006C6C  EC35  F03C         	call	_SPI
   634  006C70  0AFE               	xorlw	-2
   635  006C72  E017               	bz	u250
   636                           ;mmc.c: 297: {
   637  006C74  0100               	movlb	_timeout shr (0+8)
   638  006C76  C014  F000         	movff	_timeout,btemp
   639  006C7A  C015  F001         	movff	_timeout+1,btemp+1
   640  006C7E  2800               	incf	btemp,w,c
   641  006C80  6F14               	movwf	_timeout& (0+255),b
   642  006C82  E102               	bnz	u231
   643  006C84  2801               	incf	btemp+1,w,c
   644  006C86  6F15               	movwf	(_timeout+1)& (0+255),b
   645  006C88                     u231:
   646  006C88  0EC3               	movlw	195
   647  006C8A  5C01               	subwf	btemp+1,w,c
   648  006C8C  0E50               	movlw	80
   649  006C8E  B4D8               	btfsc	status,2,c
   650  006C90  5C00               	subwf	btemp,w,c
   651  006C92  E3EB               	bnc	l37
   652                           ;mmc.c: 299: {
   653  006C94  8082               	bsf	3970,0,c	;volatile
   654  006C96  0EFF               	movlw	255
   655  006C98  EC35  F03C         	call	_SPI
   656  006C9C                     L6:
   657  006C9C  9092               	bcf	3986,0,c	;volatile
   658                           ;mmc.c: 304: return(0);
   659  006C9E  0E00               	movlw	0
   660  006CA0  D03E               	goto	l32
   661  006CA2                     u250:
   662                           ;mmc.c: 305: }
   663  006CA2  0103               	movlb	_MMC_DIRECT_TRANSFER_MODE shr (0+8)
   664  006CA4  5359               	movf	_MMC_DIRECT_TRANSFER_MODE& (0+255),f,b
   665  006CA6  E013               	bz	l41
   666                           ;mmc.c: 311: {
   667  006CA8  9C81               	bcf	3969,6,c	;volatile
   668                           ;mmc.c: 315: i=128;
   669                           ; _i allocated to fsr1l
   670  006CAA  0E80               	movlw	128
   671  006CAC  6EE1               	movwf	fsr1l,c
   672  006CAE                     l44:
   673                           ;mmc.c: 316: do
   674                           ;mmc.c: 317: {
   675  006CAE  68C9               	setf	4041,c	;volatile
   676                           ;mmc.c: 319: while (!BF);
   677  006CB0                     l45:
   678  006CB0  A0C7               	btfss	4039,0,c	;volatile
   679  006CB2  D7FE               	goto	l45
   680                           ;mmc.c: 321: SSPBUF = 0xff;
   681  006CB4  68C9               	setf	4041,c	;volatile
   682                           ;mmc.c: 322: while (!BF);
   683  006CB6                     l48:
   684  006CB6  A0C7               	btfss	4039,0,c	;volatile
   685  006CB8  D7FE               	goto	l48
   686                           ;mmc.c: 324: SSPBUF = 0xff;
   687  006CBA  68C9               	setf	4041,c	;volatile
   688                           ;mmc.c: 325: while (!BF);
   689  006CBC                     l51:
   690  006CBC  A0C7               	btfss	4039,0,c	;volatile
   691  006CBE  D7FE               	goto	l51
   692                           ;mmc.c: 327: SSPBUF = 0xff;
   693  006CC0  68C9               	setf	4041,c	;volatile
   694                           ;mmc.c: 328: while (!BF);
   695  006CC2                     l54:
   696  006CC2  A0C7               	btfss	4039,0,c	;volatile
   697  006CC4  D7FE               	goto	l54
   698                           ;mmc.c: 329: }
   699  006CC6  2EE1               	decfsz	fsr1l,f,c
   700  006CC8  D7F2               	goto	l44
   701                           ;mmc.c: 333: RB6 = 1;
   702  006CCA  8C81               	bsf	3969,6,c	;volatile
   703                           ;mmc.c: 334: }
   704  006CCC  D01C               	goto	l57
   705  006CCE                     l41:
   706                           ;mmc.c: 335: else
   707  006CCE  C0F3  FFE1         	movff	?_MMC_Read+4,fsr1l
   708  006CD2  C0F4  FFE2         	movff	?_MMC_Read+5,fsr1h
   709                           ;mmc.c: 339: i=128;
   710                           ; _i allocated to prodl
   711  006CD6  0E80               	movlw	128
   712  006CD8  6EF3               	movwf	prodl,c
   713  006CDA                     l60:
   714                           ;mmc.c: 340: do
   715                           ;mmc.c: 341: {
   716  006CDA  68C9               	setf	4041,c	;volatile
   717                           ;mmc.c: 343: while (!BF);
   718  006CDC                     l61:
   719  006CDC  A0C7               	btfss	4039,0,c	;volatile
   720  006CDE  D7FE               	goto	l61
   721                           ;mmc.c: 344: *(p++) = SSPBUF;
   722  006CE0  CFC9 FFE6          	movff	4041,postinc1	;volatile
   723                           ;mmc.c: 345: SSPBUF = 0xff;
   724  006CE4  68C9               	setf	4041,c	;volatile
   725                           ;mmc.c: 346: while (!BF);
   726  006CE6                     l64:
   727  006CE6  A0C7               	btfss	4039,0,c	;volatile
   728  006CE8  D7FE               	goto	l64
   729                           ;mmc.c: 347: *(p++) = SSPBUF;
   730  006CEA  CFC9 FFE6          	movff	4041,postinc1	;volatile
   731                           ;mmc.c: 348: SSPBUF = 0xff;
   732  006CEE  68C9               	setf	4041,c	;volatile
   733                           ;mmc.c: 349: while (!BF);
   734  006CF0                     l67:
   735  006CF0  A0C7               	btfss	4039,0,c	;volatile
   736  006CF2  D7FE               	goto	l67
   737                           ;mmc.c: 350: *(p++) = SSPBUF;
   738  006CF4  CFC9 FFE6          	movff	4041,postinc1	;volatile
   739                           ;mmc.c: 351: SSPBUF = 0xff;
   740  006CF8  68C9               	setf	4041,c	;volatile
   741                           ;mmc.c: 352: while (!BF);
   742  006CFA                     l70:
   743  006CFA  A0C7               	btfss	4039,0,c	;volatile
   744  006CFC  D7FE               	goto	l70
   745                           ;mmc.c: 353: *(p++) = SSPBUF;
   746  006CFE  CFC9 FFE6          	movff	4041,postinc1	;volatile
   747                           ;mmc.c: 354: }
   748  006D02  2EF3               	decfsz	prodl,f,c
   749  006D04  D7EA               	goto	l60
   750  006D06                     l57:
   751                           ;mmc.c: 356: }
   752  006D06  0EFF               	movlw	255
   753  006D08  EC35  F03C         	call	_SPI
   754                           ;mmc.c: 383: SPI(0xff);
   755  006D0C  0EFF               	movlw	255
   756  006D0E  EC35  F03C         	call	_SPI
   757                           ;mmc.c: 385: {RC0=1;SPI(0xff);TRISA0=0;};
   758  006D12  8082               	bsf	3970,0,c	;volatile
   759  006D14  0EFF               	movlw	255
   760  006D16  EC35  F03C         	call	_SPI
   761  006D1A  9092               	bcf	3986,0,c	;volatile
   762  006D1C                     L5:
   763                           ;mmc.c: 386: return(1);
   764  006D1C  0E01               	movlw	1
   765                           ;mmc.c: 387: }
   766  006D1E                     l32:
   767  006D1E  0012               	return	
   768  006D20  FFFF               	dw	65535	; Nop inserted for errata
   769  006D22  D75C               	goto	f4032
   770  006D24                     __end_of_MMC_Read:
   771                           ;mmc.c: 392: unsigned char MMC_Write(unsigned lo
      +                          ng lba, unsigned char *WriteData)
   772                           ;mmc.c: 393: {
   773  006D24  00DB               	dw	?_MMC_Write
   774  006D26                     _MMC_Write:
   775                           ; errata NOP at function entry point
   776  006D26  FFFF               	dw	65535
   777  006D28                     f4042:
   778  000000                     
   779                           ;mmc.c: 394: unsigned short upper_lba, lower_lba
      +                          ;
   780  006D28  C0DB  F033         	movff	?_MMC_Write,_t_lba
   781  006D2C  C0DC  F034         	movff	?_MMC_Write+1,_t_lba+1
   782  006D30  C0DD  F035         	movff	?_MMC_Write+2,_t_lba+2
   783  006D34  C0DE  F036         	movff	?_MMC_Write+3,_t_lba+3
   784                           ;mmc.c: 401: if(0 == (cardType & (1<<2)))
   785  006D38  0103               	movlb	_cardType shr (0+8)
   786  006D3A  B55A               	btfsc	_cardType& (0+255),2,b
   787  006D3C  D009               	goto	l74
   788                           ;mmc.c: 402: {
   789  006D3E  0100               	movlb	__Lparam shr (0+8)
   790  006D40  0E09               	movlw	9
   791  006D42                     u365:
   792  006D42  90D8               	bcf	status,0,c
   793  006D44  37DB               	rlcf	?_MMC_Write^(__Lparam& (0+65280)),f,b
   794  006D46  37DC               	rlcf	(?_MMC_Write+1)^(__Lparam& (0+65280)),f,b
   795  006D48  37DD               	rlcf	(?_MMC_Write+2)^(__Lparam& (0+65280)),f,b
   796  006D4A  37DE               	rlcf	(?_MMC_Write+3)^(__Lparam& (0+65280)),f,b
   797  006D4C  2EE8               	decfsz	wreg,f,c
   798  006D4E  D7F9               	goto	u365
   799  006D50                     l74:
   800                           ;mmc.c: 407: }
   801  006D50  C0DD  FFF6         	movff	?_MMC_Write+2,tblptrl
   802  006D54  C0DE  FFF7         	movff	?_MMC_Write+3,tblptrh
   803                           ;mmc.c: 414: lower_lba = (unsigned short)lba;
   804  006D58  C0DB  FFF3         	movff	?_MMC_Write,prodl
   805  006D5C  C0DC  FFF4         	movff	?_MMC_Write+1,prodh
   806                           ;mmc.c: 416: {TRISA0=1;RC0=0;};
   807  006D60  8092               	bsf	3986,0,c	;volatile
   808  006D62  9082               	bcf	3970,0,c	;volatile
   809                           ;mmc.c: 418: Command_R1(0x58, upper_lba, lower_l
      +                          ba);
   810  006D64  CFF6 F0F5          	movff	tblptrl,?_Command_R1
   811  006D68  CFF7 F0F6          	movff	tblptrh,?_Command_R1+1
   812  006D6C  CFF3 F0F7          	movff	prodl,?_Command_R1+2
   813  006D70  CFF4 F0F8          	movff	prodh,?_Command_R1+3
   814  006D74  0E58               	movlw	88
   815  006D76  D89D               	call	_Command_R1
   816                           ;mmc.c: 420: if (response_1 !=0)
   817  006D78  0103               	movlb	_response_1 shr (0+8)
   818  006D7A  535C               	movf	_response_1& (0+255),f,b
   819  006D7C  E005               	bz	l75
   820                           ;mmc.c: 421: {
   821  006D7E  8082               	bsf	3970,0,c	;volatile
   822  006D80  0EFF               	movlw	255
   823  006D82  EC35  F03C         	call	_SPI
   824  006D86  D050               	goto	L8
   825                           ;mmc.c: 426: return(0);
   826  006D88                     l75:
   827                           ;mmc.c: 427: }
   828  006D88  0EFF               	movlw	255
   829  006D8A  EC35  F03C         	call	_SPI
   830                           ;mmc.c: 430: SPI(0xFE);
   831  006D8E  0EFE               	movlw	254
   832  006D90  EC35  F03C         	call	_SPI
   833                           ;mmc.c: 433: p = WriteData;
   834  006D94  C0DF  FFE1         	movff	?_MMC_Write+4,fsr1l
   835  006D98  C0E0  FFE2         	movff	?_MMC_Write+5,fsr1h
   836                           ;mmc.c: 434: i = 128;
   837  006D9C  0E80               	movlw	128
   838  006D9E  6EF3               	movwf	prodl,c
   839  006DA0                     l78:
   840                           ;mmc.c: 435: do
   841                           ;mmc.c: 436: {
   842  006DA0  CFE6 FFC9          	movff	postinc1,4041	;volatile
   843                           ;mmc.c: 438: while (!BF);
   844  006DA4                     l79:
   845  006DA4  A0C7               	btfss	4039,0,c	;volatile
   846  006DA6  D7FE               	goto	l79
   847                           ;mmc.c: 439: SSPBUF = *(p++);
   848  006DA8  CFE6 FFC9          	movff	postinc1,4041	;volatile
   849                           ;mmc.c: 440: while (!BF);
   850  006DAC                     l82:
   851  006DAC  A0C7               	btfss	4039,0,c	;volatile
   852  006DAE  D7FE               	goto	l82
   853                           ;mmc.c: 441: SSPBUF = *(p++);
   854  006DB0  CFE6 FFC9          	movff	postinc1,4041	;volatile
   855                           ;mmc.c: 442: while (!BF);
   856  006DB4                     l85:
   857  006DB4  A0C7               	btfss	4039,0,c	;volatile
   858  006DB6  D7FE               	goto	l85
   859                           ;mmc.c: 443: SSPBUF = *(p++);
   860  006DB8  CFE6 FFC9          	movff	postinc1,4041	;volatile
   861                           ;mmc.c: 444: while (!BF);
   862  006DBC                     l88:
   863  006DBC  A0C7               	btfss	4039,0,c	;volatile
   864  006DBE  D7FE               	goto	l88
   865                           ;mmc.c: 445: }
   866  006DC0  2EF3               	decfsz	prodl,f,c
   867  006DC2  D7EE               	goto	l78
   868                           ;mmc.c: 448: SPI(0xFF);
   869  006DC4  0EFF               	movlw	255
   870  006DC6  EC35  F03C         	call	_SPI
   871                           ;mmc.c: 449: SPI(0xFF);
   872  006DCA  0EFF               	movlw	255
   873  006DCC  EC35  F03C         	call	_SPI
   874                           ;mmc.c: 451: i = SPI(0xFF);
   875  006DD0  0EFF               	movlw	255
   876  006DD2  EC35  F03C         	call	_SPI
   877  006DD6  0100               	movlb	__Lparam shr (0+8)
   878  006DD8  6FE1               	movwf	?a_MMC_Write^(__Lparam& (0+65280)),b
   879                           ;mmc.c: 456: i &= 0b00011111;
   880  006DDA  0E1F               	movlw	31
   881  006DDC  17E1               	andwf	?a_MMC_Write^(__Lparam& (0+65280)),f,b
   882                           ;mmc.c: 457: if (i != 0b00000101)
   883  006DDE  51E1               	movf	?a_MMC_Write^(__Lparam& (0+65280)),w
   884  006DE0  0A05               	xorlw	5
   885  006DE2  E005               	bz	l91
   886                           ;mmc.c: 458: {
   887  006DE4  8082               	bsf	3970,0,c	;volatile
   888  006DE6  0EFF               	movlw	255
   889  006DE8  EC35  F03C         	call	_SPI
   890  006DEC  D01D               	goto	L8
   891                           ;mmc.c: 463: return(0);
   892  006DEE                     l91:
   893                           ;mmc.c: 464: }
   894  006DEE  EE00  F014         	lfsr	0,_timeout
   895  006DF2  6AEE               	clrf	postinc0,c
   896  006DF4  6AEE               	clrf	postinc0,c
   897                           ;mmc.c: 467: while (SPI(0xFF) == 0x00)
   898  006DF6                     l92:
   899  006DF6  0EFF               	movlw	255
   900  006DF8  EC35  F03C         	call	_SPI
   901  006DFC  0900               	iorlw	0
   902  006DFE  E117               	bnz	u450
   903                           ;mmc.c: 468: {
   904  006E00  0100               	movlb	_timeout shr (0+8)
   905  006E02  C014  F000         	movff	_timeout,btemp
   906  006E06  C015  F001         	movff	_timeout+1,btemp+1
   907  006E0A  2800               	incf	btemp,w,c
   908  006E0C  6F14               	movwf	_timeout& (0+255),b
   909  006E0E  E102               	bnz	u431
   910  006E10  2801               	incf	btemp+1,w,c
   911  006E12  6F15               	movwf	(_timeout+1)& (0+255),b
   912  006E14                     u431:
   913  006E14  0EC3               	movlw	195
   914  006E16  5C01               	subwf	btemp+1,w,c
   915  006E18  0E50               	movlw	80
   916  006E1A  B4D8               	btfsc	status,2,c
   917  006E1C  5C00               	subwf	btemp,w,c
   918  006E1E  E3EB               	bnc	l92
   919                           ;mmc.c: 470: {
   920  006E20  8082               	bsf	3970,0,c	;volatile
   921  006E22  0EFF               	movlw	255
   922  006E24  EC35  F03C         	call	_SPI
   923  006E28                     L8:
   924  006E28  9092               	bcf	3986,0,c	;volatile
   925                           ;mmc.c: 475: return(0);
   926  006E2A  0E00               	movlw	0
   927  006E2C  D006               	goto	l73
   928  006E2E                     u450:
   929                           ;mmc.c: 476: }
   930  006E2E  8082               	bsf	3970,0,c	;volatile
   931  006E30  0EFF               	movlw	255
   932  006E32  EC35  F03C         	call	_SPI
   933  006E36  9092               	bcf	3986,0,c	;volatile
   934                           ;mmc.c: 479: return(1);
   935  006E38  0E01               	movlw	1
   936                           ;mmc.c: 480: }
   937  006E3A                     l73:
   938  006E3A  0012               	return	
   939  006E3C  FFFF               	dw	65535	; Nop inserted for errata
   940  006E3E  D774               	goto	f4042
   941  006E40                     __end_of_MMC_Write:
   942                           ;mmc.c: 488: void Command_R0(char cmd, unsigned 
      +                          short AdrH, unsigned short AdrL)
   943                           ;mmc.c: 489: {
   944  006E40  00FB               	dw	?_Command_R0
   945  006E42                     _Command_R0:
   946                           ; errata NOP at function entry point
   947  006E42  FFFF               	dw	65535
   948  006E44                     f4052:
   949  000000                     
   950                           ;_cmd stored from wreg
   951  006E44  0100               	movlb	__Lparam shr (0+8)
   952  006E46  6FFF               	movwf	?a_Command_R0^(__Lparam& (0+65280)),b
   953                           ;mmc.c: 490: crc_7=0;
   954  006E48  0103               	movlb	_crc_7 shr (0+8)
   955  006E4A  6B5B               	clrf	_crc_7& (0+255),b
   956                           ;mmc.c: 491: SPI(0xFF);
   957  006E4C  0EFF               	movlw	255
   958  006E4E  EC35  F03C         	call	_SPI
   959                           ;mmc.c: 493: SPI(cmd);
   960  006E52  0100               	movlb	__Lparam shr (0+8)
   961  006E54  51FF               	movf	?a_Command_R0^(__Lparam& (0+65280)),w
   962  006E56  EC35  F03C         	call	_SPI
   963                           ;mmc.c: 494: MmcAddCrc7(cmd);
   964  006E5A  0100               	movlb	__Lparam shr (0+8)
   965  006E5C  51FF               	movf	?a_Command_R0^(__Lparam& (0+65280)),w
   966  006E5E  D89E               	call	_MmcAddCrc7
   967                           ;mmc.c: 496: SPI((unsigned char)(AdrH>>8));
   968  006E60  0100               	movlb	__Lparam shr (0+8)
   969  006E62  51FC               	movf	(?_Command_R0+1)^(__Lparam& (0+65280)),w
   970  006E64  EC35  F03C         	call	_SPI
   971                           ;mmc.c: 497: MmcAddCrc7((unsigned char)(AdrH>>8)
      +                          );
   972  006E68  0100               	movlb	__Lparam shr (0+8)
   973  006E6A  51FC               	movf	(?_Command_R0+1)^(__Lparam& (0+65280)),w
   974  006E6C  D897               	call	_MmcAddCrc7
   975                           ;mmc.c: 499: SPI((unsigned char)AdrH);
   976  006E6E  0100               	movlb	__Lparam shr (0+8)
   977  006E70  51FB               	movf	?_Command_R0^(__Lparam& (0+65280)),w
   978  006E72  EC35  F03C         	call	_SPI
   979                           ;mmc.c: 500: MmcAddCrc7((unsigned char)AdrH);
   980  006E76  0100               	movlb	__Lparam shr (0+8)
   981  006E78  51FB               	movf	?_Command_R0^(__Lparam& (0+65280)),w
   982  006E7A  D890               	call	_MmcAddCrc7
   983                           ;mmc.c: 502: SPI((unsigned char)(AdrL>>8));
   984  006E7C  0100               	movlb	__Lparam shr (0+8)
   985  006E7E  51FE               	movf	(?_Command_R0+3)^(__Lparam& (0+65280)),w
   986  006E80  EC35  F03C         	call	_SPI
   987                           ;mmc.c: 503: MmcAddCrc7((unsigned char)(AdrL>>8)
      +                          );
   988  006E84  0100               	movlb	__Lparam shr (0+8)
   989  006E86  51FE               	movf	(?_Command_R0+3)^(__Lparam& (0+65280)),w
   990  006E88  D889               	call	_MmcAddCrc7
   991                           ;mmc.c: 505: SPI((unsigned char)(AdrL));
   992  006E8A  0100               	movlb	__Lparam shr (0+8)
   993  006E8C  51FD               	movf	(?_Command_R0+2)^(__Lparam& (0+65280)),w
   994  006E8E  EC35  F03C         	call	_SPI
   995                           ;mmc.c: 506: MmcAddCrc7((unsigned char)AdrL);
   996  006E92  0100               	movlb	__Lparam shr (0+8)
   997  006E94  51FD               	movf	(?_Command_R0+2)^(__Lparam& (0+65280)),w
   998  006E96  D882               	call	_MmcAddCrc7
   999                           ;mmc.c: 508: crc_7<<=1;
  1000  006E98  EE03  F05B         	lfsr	0,_crc_7
  1001  006E9C  90D8               	bcf	status,0,c
  1002  006E9E  36EF               	rlcf	indf0,f,c
  1003                           ;mmc.c: 509: crc_7++;
  1004  006EA0  0103               	movlb	_crc_7 shr (0+8)
  1005  006EA2  2B5B               	incf	_crc_7& (0+255),f,b
  1006                           ;mmc.c: 511: SPI(crc_7);
  1007  006EA4  C35B  FFE8         	movff	_crc_7,wreg
  1008  006EA8  EF35  F03C         	goto	_SPI
  1009                           ;mmc.c: 512: };
  1010  006EAC  FFFF               	dw	65535	; Nop inserted for errata
  1011  006EAE  D7CA               	goto	f4052
  1012  006EB0                     __end_of_Command_R0:
  1013                           ;mmc.c: 515: void Command_R1(char cmd, unsigned 
      +                          short AdrH, unsigned short AdrL)
  1014                           ;mmc.c: 516: {
  1015  006EB0  00F5               	dw	?_Command_R1
  1016  006EB2                     _Command_R1:
  1017                           ; errata NOP at function entry point
  1018  006EB2  FFFF               	dw	65535
  1019  006EB4                     f4072:
  1020  000000                     
  1021                           ;_cmd stored from wreg
  1022  006EB4  0100               	movlb	__Lparam shr (0+8)
  1023  006EB6  6FF9               	movwf	?a_Command_R1^(__Lparam& (0+65280)),b
  1024                           ;mmc.c: 517: unsigned char i = 100;
  1025  006EB8  0E64               	movlw	100
  1026  006EBA  6FFA               	movwf	(?a_Command_R1+1)^(__Lparam& (0+65280)),b
  1027                           ;mmc.c: 518: Command_R0(cmd, AdrH, AdrL);
  1028  006EBC  C0F5  F0FB         	movff	?_Command_R1,?_Command_R0
  1029  006EC0  C0F6  F0FC         	movff	?_Command_R1+1,?_Command_R0+1
  1030  006EC4  C0F7  F0FD         	movff	?_Command_R1+2,?_Command_R0+2
  1031  006EC8  C0F8  F0FE         	movff	?_Command_R1+3,?_Command_R0+3
  1032  006ECC  51F9               	movf	?a_Command_R1^(__Lparam& (0+65280)),w
  1033  006ECE  DFB9               	call	_Command_R0
  1034  006ED0                     l100:
  1035                           ;mmc.c: 519: do
  1036                           ;mmc.c: 520: response_1 = SPI(0xFF);
  1037  006ED0  0EFF               	movlw	255
  1038  006ED2  EC35  F03C         	call	_SPI
  1039  006ED6  CFE8 F35C          	movff	wreg,_response_1
  1040                           ;mmc.c: 521: while (response_1==0xFF && --i);
  1041  006EDA  C35C  F000         	movff	_response_1,btemp
  1042  006EDE  2800               	incf	btemp,w,c
  1043  006EE0  E103               	bnz	u480
  1044  006EE2  0100               	movlb	__Lparam shr (0+8)
  1045  006EE4  2FFA               	decfsz	(?a_Command_R1+1)^(__Lparam& (0+65280)),
      +                          f,b
  1046  006EE6  D7F4               	goto	l100
  1047  006EE8                     u480:
  1048                           ;mmc.c: 522: }
  1049  006EE8  0012               	return	
  1050  006EEA  FFFF               	dw	65535	; Nop inserted for errata
  1051  006EEC  D7E3               	goto	f4072
  1052  006EEE                     __end_of_Command_R1:
  1053                           ;mmc.c: 525: void Command_R2(char cmd, unsigned 
      +                          short AdrH, unsigned short AdrL)
  1054                           ;mmc.c: 526: {
  1055  006EEE  0037               	dw	?_Command_R2
  1056  006EF0                     _Command_R2:
  1057                           ; errata NOP at function entry point
  1058  006EF0  FFFF               	dw	65535
  1059  006EF2                     f4082:
  1060  000000                     
  1061                           ;_cmd stored from wreg
  1062  006EF2  0100               	movlb	__Lparam shr (0+8)
  1063  006EF4  6F37               	movwf	?a_Command_R2^(__Lparam& (0+65280)),b
  1064                           ;mmc.c: 527: unsigned char i = 100;
  1065  006EF6  0E64               	movlw	100
  1066  006EF8  6F38               	movwf	(?a_Command_R2+1)^(__Lparam& (0+65280)),b
  1067                           ;mmc.c: 528: Command_R0(cmd, AdrH, AdrL);
  1068  006EFA  C037  F0FB         	movff	?_Command_R2,?_Command_R0
  1069  006EFE  C038  F0FC         	movff	?_Command_R2+1,?_Command_R0+1
  1070  006F02  C039  F0FD         	movff	?_Command_R2+2,?_Command_R0+2
  1071  006F06  C03A  F0FE         	movff	?_Command_R2+3,?_Command_R0+3
  1072  006F0A  5137               	movf	?a_Command_R2^(__Lparam& (0+65280)),w
  1073  006F0C  DF9A               	call	_Command_R0
  1074  006F0E                     l104:
  1075                           ;mmc.c: 529: do
  1076                           ;mmc.c: 530: response_1 = SPI(0xFF);
  1077  006F0E  0EFF               	movlw	255
  1078  006F10  EC35  F03C         	call	_SPI
  1079  006F14  CFE8 F35C          	movff	wreg,_response_1
  1080                           ;mmc.c: 531: while (response_1==0xFF && --i);
  1081  006F18  C35C  F000         	movff	_response_1,btemp
  1082  006F1C  2800               	incf	btemp,w,c
  1083  006F1E  E103               	bnz	u510
  1084  006F20  0100               	movlb	__Lparam shr (0+8)
  1085  006F22  2F38               	decfsz	(?a_Command_R2+1)^(__Lparam& (0+65280)),
      +                          f,b
  1086  006F24  D7F4               	goto	l104
  1087  006F26                     u510:
  1088                           ;mmc.c: 533: response_2 = SPI(0xFF);
  1089  006F26  0EFF               	movlw	255
  1090  006F28  EC35  F03C         	call	_SPI
  1091  006F2C  CFE8 F35D          	movff	wreg,_response_2
  1092                           ;mmc.c: 534: }
  1093  006F30  0012               	return	
  1094  006F32  FFFF               	dw	65535	; Nop inserted for errata
  1095  006F34  D7DE               	goto	f4082
  1096  006F36                     __end_of_Command_R2:
  1097                           ;mmc.c: 537: void Command_R3(char cmd, unsigned 
      +                          short AdrH, unsigned short AdrL)
  1098                           ;mmc.c: 538: {
  1099  006F36  0042               	dw	?_Command_R3
  1100  006F38                     _Command_R3:
  1101                           ; errata NOP at function entry point
  1102  006F38  FFFF               	dw	65535
  1103  006F3A                     f4092:
  1104  000000                     
  1105                           ;_cmd stored from wreg
  1106  006F3A  0100               	movlb	__Lparam shr (0+8)
  1107  006F3C  6F46               	movwf	?a_Command_R3^(__Lparam& (0+65280)),b
  1108                           ;mmc.c: 539: unsigned char i = 100;
  1109  006F3E  0E64               	movlw	100
  1110  006F40  6F47               	movwf	(?a_Command_R3+1)^(__Lparam& (0+65280)),b
  1111                           ;mmc.c: 540: Command_R0(cmd, AdrH, AdrL);
  1112  006F42  C042  F0FB         	movff	?_Command_R3,?_Command_R0
  1113  006F46  C043  F0FC         	movff	?_Command_R3+1,?_Command_R0+1
  1114  006F4A  C044  F0FD         	movff	?_Command_R3+2,?_Command_R0+2
  1115  006F4E  C045  F0FE         	movff	?_Command_R3+3,?_Command_R0+3
  1116  006F52  5146               	movf	?a_Command_R3^(__Lparam& (0+65280)),w
  1117  006F54  DF76               	call	_Command_R0
  1118  006F56                     l108:
  1119                           ;mmc.c: 541: do
  1120                           ;mmc.c: 542: response_1 = SPI(0xFF);
  1121  006F56  0EFF               	movlw	255
  1122  006F58  EC35  F03C         	call	_SPI
  1123  006F5C  CFE8 F35C          	movff	wreg,_response_1
  1124                           ;mmc.c: 543: while (response_1==0xFF && --i);
  1125  006F60  C35C  F000         	movff	_response_1,btemp
  1126  006F64  2800               	incf	btemp,w,c
  1127  006F66  E103               	bnz	u540
  1128  006F68  0100               	movlb	__Lparam shr (0+8)
  1129  006F6A  2F47               	decfsz	(?a_Command_R3+1)^(__Lparam& (0+65280)),
      +                          f,b
  1130  006F6C  D7F4               	goto	l108
  1131  006F6E                     u540:
  1132                           ;mmc.c: 545: response_2 = SPI(0xFF);
  1133  006F6E  0EFF               	movlw	255
  1134  006F70  EC35  F03C         	call	_SPI
  1135  006F74  CFE8 F35D          	movff	wreg,_response_2
  1136                           ;mmc.c: 546: response_3 = SPI(0xFF);
  1137  006F78  0EFF               	movlw	255
  1138  006F7A  EC35  F03C         	call	_SPI
  1139  006F7E  CFE8 F35E          	movff	wreg,_response_3
  1140                           ;mmc.c: 547: response_4 = SPI(0xFF);
  1141  006F82  0EFF               	movlw	255
  1142  006F84  EC35  F03C         	call	_SPI
  1143  006F88  CFE8 F35F          	movff	wreg,_response_4
  1144                           ;mmc.c: 548: response_5 = SPI(0xFF);
  1145  006F8C  0EFF               	movlw	255
  1146  006F8E  EC35  F03C         	call	_SPI
  1147  006F92  CFE8 F360          	movff	wreg,_response_5
  1148                           ;mmc.c: 549: }
  1149  006F96  0012               	return	
  1150  006F98  FFFF               	dw	65535	; Nop inserted for errata
  1151  006F9A  D7CF               	goto	f4092
  1152  006F9C                     __end_of_Command_R3:
  1153                           ;mmc.c: 552: void MmcAddCrc7(unsigned char c)
  1154                           ;mmc.c: 553: {
  1155  006F9C                     _MmcAddCrc7:
  1156                           ; errata NOP at function entry point
  1157  006F9C  FFFF               	dw	65535
  1158  006F9E                     f4102:
  1159  000000                     
  1160                           ; _c loaded to fsr2l
  1161  006F9E  6ED9               	movwf	fsr2l,c
  1162                           ;mmc.c: 554: unsigned char i;
  1163  006FA0  0E08               	movlw	8
  1164  006FA2  6EE1               	movwf	fsr1l,c
  1165  006FA4                     l112:
  1166                           ;mmc.c: 557: do
  1167                           ;mmc.c: 558: {
  1168  006FA4  EE03  F05B         	lfsr	0,_crc_7
  1169  006FA8  90D8               	bcf	status,0,c
  1170  006FAA  36EF               	rlcf	indf0,f,c
  1171                           ;mmc.c: 561: crc_7^=0x09;
  1172  006FAC  0103               	movlb	_crc_7 shr (0+8)
  1173                           ;mmc.c: 560: if(c&0x80)
  1174  006FAE  AED9               	btfss	fsr2l,7,c
  1175  006FB0  D002               	goto	L9
  1176  006FB2  0E09               	movlw	9
  1177  006FB4  1B5B               	xorwf	_crc_7& (0+255),f,b
  1178                           ;mmc.c: 562: if(crc_7&0x80)
  1179  006FB6                     L9:
  1180  006FB6  AF5B               	btfss	_crc_7& (0+255),7,b
  1181  006FB8  D003               	goto	l114
  1182                           ;mmc.c: 563: crc_7^=0x09;
  1183  006FBA  0103               	movlb	_crc_7 shr (0+8)
  1184  006FBC  0E09               	movlw	9
  1185  006FBE  1B5B               	xorwf	_crc_7& (0+255),f,b
  1186  006FC0                     l114:
  1187                           ;mmc.c: 564: c<<=1;
  1188  006FC0  90D8               	bcf	status,0,c
  1189  006FC2  36D9               	rlcf	fsr2l,f,c
  1190                           ;mmc.c: 565: }
  1191  006FC4  2EE1               	decfsz	fsr1l,f,c
  1192  006FC6  D7EE               	goto	l112
  1193                           ;mmc.c: 567: }
  1194  006FC8  0012               	return	
  1195  006FCA  FFFF               	dw	65535	; Nop inserted for errata
  1196  006FCC  D7E8               	goto	f4102
  1197  006FCE                     __end_of_MmcAddCrc7:
  1198  000000                     
  1199  000000                     
  1200  000000                     
  1201  000000                     
  1202  000000                     
  1203  000000                     
  1204  000000                     
  1205  000000                     
  1206  000000                     
  1207  000000                     
  1208  000000                     
  1209  000000                     
  1210  000000                     
  1211  000000                     
  1212  000000                     
  1213  000000                     
  1214  000000                     
  1215  000000                     
  1216  000000                     
  1217  000000                     
  1218  000000                     
  1219  000000                     
  1220  000000                     
  1221  000000                     
  1222  000000                     
  1223  000000                     
  1224  000000                     
  1225  000000                     
  1226  000000                     
  1227  000000                     
  1228  000000                     
  1229  000000                     
  1230  000000                     
  1231  000000                     
  1232  000000                     
  1233  000000                     
  1234  000000                     
  1235  000000                     
  1236  000000                     
  1237  000000                     
  1238  000000                     
  1239  000000                     
  1240  000000                     
  1241  000000                     
  1242  000000                     
  1243  000000                     
  1244  000000                     
  1245  000000                     
  1246  000000                     
  1247  000000                     
  1248  000000                     
  1249  000000                     
  1250  000000                     
  1251  000000                     
  1252  000000                     
  1253  000000                     
  1254  000000                     
  1255  000000                     
  1256  000000                     
  1257  000000                     
  1258  000000                     
  1259  000000                     
  1260  000000                     
  1261  000000                     
  1262  000000                     
  1263  000000                     
  1264  000000                     
  1265  000000                     
  1266  000000                     
  1267  000000                     
  1268  000000                     
  1269  000000                     
  1270  000000                     
  1271  000000                     
  1272  000000                     
  1273  000000                     
  1274  000000                     
  1275  000000                     
  1276  000000                     
  1277  000000                     
  1278  000000                     
  1279  000000                     
  1280  000000                     
  1281  000000                     
  1282  000000                     
  1283  000000                     
  1284  000000                     
  1285  000000                     
  1286  000000                     
  1287  000000                     
  1288  000000                     
  1289  000000                     
  1290  000000                     
  1291  000000                     
  1292  000000                     
  1293  000000                     
  1294  000000                     
  1295  000000                     
  1296  000000                     
  1297  000000                     
  1298  000000                     
  1299  000000                     
  1300  000000                     
  1301  000000                     
  1302  000000                     
  1303  000000                     
  1304  000000                     
  1305  000000                     
  1306  000000                     
  1307  000000                     
  1308  000000                     
  1309  000000                     
  1310  000000                     
  1311  000000                     
  1312  000000                     
  1313  000000                     
  1314  000000                     
  1315  000000                     
  1316  000000                     
  1317  000000                     
  1318  000000                     
  1319  000000                     
  1320  000000                     
  1321  000000                     
  1322  000000                     
  1323  000000                     
  1324  000000                     
  1325  000000                     
  1326  000000                     
  1327  000000                     
  1328  000000                     
  1329  000000                     
  1330  000000                     
  1331  000000                     
  1332  000000                     
  1333  000000                     
  1334  000000                     
  1335  000000                     
  1336  000000                     
  1337  000000                     
  1338  000000                     
  1339  000000                     
  1340  000000                     
  1341  000000                     
  1342  000000                     
  1343  000000                     
  1344  000000                     
  1345  000000                     
  1346  000000                     
  1347  000000                     
  1348  000000                     
  1349  000000                     
  1350  000000                     
  1351  000000                     
  1352  000000                     
  1353  000000                     
  1354  000000                     
  1355  000000                     
  1356  000000                     
  1357  000000                     
  1358  000000                     
  1359  000000                     
  1360  000000                     
  1361  000000                     
  1362  000000                     
  1363  000000                     
  1364  000000                     
  1365  000000                     
  1366  000000                     
  1367  000000                     
  1368  000000                     
  1369  000000                     
  1370  000000                     
  1371  000000                     
  1372  000000                     
  1373  000000                     
  1374  000000                     
  1375  000000                     
  1376  000000                     
  1377  000000                     
  1378  000000                     
  1379  000000                     
  1380  000000                     
  1381  000000                     
  1382  000000                     
  1383  000000                     
  1384  000000                     
  1385  000000                     
  1386  000000                     
  1387  000000                     
  1388  000000                     
  1389  000000                     
  1390  000000                     
  1391  000000                     
  1392  000000                     
  1393  000000                     
  1394  000000                     
  1395  000000                     
  1396  000000                     
  1397  000000                     
  1398  000000                     
  1399  000000                     
  1400  000000                     
  1401  000000                     
  1402  000000                     
  1403  000000                     
  1404  000000                     
  1405  000000                     
  1406  000000                     
  1407  000000                     
  1408  000000                     
  1409  000000                     
  1410  000000                     
  1411  000000                     
  1412  000000                     
  1413  000000                     
  1414  000000                     
  1415  000000                     
  1416  000000                     
  1417  000000                     
  1418  000000                     
  1419  000000                     
  1420  000000                     
  1421  000000                     
  1422  000000                     
  1423  000000                     
  1424  000000                     
  1425  000000                     
  1426  000000                     
  1427  000000                     
  1428  000000                     
  1429  000000                     
  1430  000000                     
  1431  000000                     
  1432  000000                     
  1433  000000                     
  1434  000000                     
  1435  000000                     
  1436  000000                     
  1437  000000                     
  1438  000000                     
  1439  000000                     
  1440  000000                     
  1441  000000                     
  1442  000000                     
  1443  000000                     
  1444  000000                     
  1445  000000                     
  1446  000000                     
  1447  000000                     
  1448  000000                     
  1449  000000                     
  1450  000000                     
  1451  000000                     
  1452  000000                     
  1453  000000                     
  1454  000000                     
  1455  000000                     
  1456  000000                     
  1457  000000                     
  1458  000000                     
  1459  000000                     
  1460  000000                     
  1461  000000                     
  1462  000000                     
  1463  000000                     
  1464  000000                     
  1465  000000                     
  1466  000000                     
  1467  000000                     
  1468  000000                     
  1469  000000                     
  1470  000000                     
  1471  000000                     
  1472  000000                     
  1473  000000                     
  1474  000000                     
  1475  000000                     
  1476  000000                     
  1477  000000                     
  1478  000000                     
  1479  000000                     
  1480  000000                     
  1481  000000                     
  1482  000000                     
  1483  000000                     
  1484  000000                     
  1485  000000                     
  1486  000000                     
  1487  000000                     
  1488  000000                     
  1489  000000                     
  1490  000000                     
  1491  000000                     
  1492  000000                     
  1493  000000                     
  1494  000000                     
  1495  000000                     
  1496  000000                     
  1497  000000                     
  1498  000000                     
  1499  000000                     
  1500  000000                     
  1501  000000                     
  1502  000000                     
  1503  000000                     
  1504  000000                     
  1505  000000                     
  1506  000000                     
  1507  000000                     
  1508  000000                     
  1509  000000                     
  1510  000000                     
  1511  000000                     
  1512  000000                     
  1513  000000                     
  1514  000000                     
  1515  000000                     
  1516  000000                     
  1517                           
  1518                           	psect	bigbss
  1519  000359                     _MMC_DIRECT_TRANSFER_MODE:
  1520  000359                     	ds	1
  1521  000000                     
  1522  000000                     
  1523  000000                     
  1524  000000                     
  1525  000000                     
  1526  000000                     
  1527  000000                     
  1528  000000                     
  1529  000000                     
  1530  000000                     
  1531  000000                     
  1532  000000                     
  1533  000000                     
  1534  000000                     
  1535  000000                     
  1536  000000                     
  1537  000000                     
  1538  000000                     
  1539  000000                     
  1540  000000                     
  1541  000000                     
  1542  000000                     
  1543  000000                     
  1544  000000                     
  1545  000000                     
  1546  000000                     
  1547  000000                     
  1548  000000                     
  1549  000000                     
  1550  000000                     
  1551  000000                     
  1552  000000                     
  1553  000000                     
  1554  000000                     
  1555  000000                     
  1556  000000                     
  1557  000000                     
  1558  000000                     
  1559  000000                     
  1560  000000                     
  1561  000000                     
  1562  000000                     
  1563  000000                     
  1564  000000                     
  1565  000000                     
  1566  000000                     
  1567  000000                     
  1568  000000                     
  1569  000000                     
  1570  000000                     
  1571  000000                     
  1572  000000                     
  1573  000000                     
  1574  000000                     
  1575  000000                     
  1576  000000                     
  1577  000000                     
  1578  000000                     
  1579  000000                     
  1580  000000                     
  1581  000000                     
  1582  000000                     
  1583  000359                     _cardType:
  1584  000359                     	ds	1
  1585  000359                     _crc_7:
  1586  000359                     	ds	1
  1587  000359                     _response_1:
  1588  000359                     	ds	1
  1589  000359                     _response_2:
  1590  000359                     	ds	1
  1591  000359                     _response_3:
  1592  000359                     	ds	1
  1593  000359                     _response_4:
  1594  000359                     	ds	1
  1595  000359                     _response_5:
  1596  000359                     	ds	1
  1597  000000                     
  1598  000000                     
  1599  000000                     
  1600  000000                     
  1601  000000                     
  1602  000000                     
  1603  000000                     
  1604                           
  1605                           	psect	bss
  1606  000014                     _timeout:
  1607  000014                     	ds	2
  1608                           
  1609                           	psect	temp
  1610  000000                     btemp:
  1611  000000                     	ds	2
  1612                           tblptrh	equ	0xFF7
  1613                           tblptrl	equ	0xFF6
  1614                           prodh	equ	0xFF4
  1615                           prodl	equ	0xFF3
  1616                           indf0	equ	0xFEF
  1617                           postinc0	equ	0xFEE
  1618                           wreg	equ	0xFE8
  1619                           postinc1	equ	0xFE6
  1620                           fsr1h	equ	0xFE2
  1621                           fsr1l	equ	0xFE1
  1622                           fsr2l	equ	0xFD9
  1623                           status	equ	0xFD8


HI-TECH Software PICC-18 Macro Assembler V9.51PL2
Symbol Table                                           Mon Dec 07 22:12:01 2009

                       l2 6BD2                         l3 6A30  
                       l6 6A4C                         l9 6A82  
                      l10 6ABA                        l11 6AB0  
                      l20 6B04                        l21 6B34  
                      l13 6AE0                        l32 6D1E  
                      l24 6B86                        l41 6CCE  
                      l33 6C12                        l25 6B7C  
                      l17 6AE8                        l18 6B58  
                      l51 6CBC                        l35 6C2A  
                      l19 6B26                        l60 6CDA  
                      l44 6CAE                        l36 6C62  
                      l28 6B8E                        l61 6CDC  
                      l45 6CB0                        l37 6C6A  
                      l29 6BC2                        l70 6CFA  
                      l54 6CC2                        l64 6CE6  
                      l48 6CB6                        l73 6E3A  
                      l57 6D06                        l82 6DAC  
                      l74 6D50                        l91 6DEE  
                      l75 6D88                        l67 6CF0  
                      l92 6DF6                        l85 6DB4  
                      l78 6DA0                        l79 6DA4  
                      l88 6DBC                       l100 6ED0  
                     l112 6FA4                       l104 6F0E  
                     l114 6FC0                       l108 6F56  
                     u231 6C88                       u215 6C1C  
                     u250 6CA2                       u510 6F26  
                     u431 6E14                       u450 6E2E  
                     u195 6BFE                       u540 6F6E  
                     u365 6D42                       u480 6EE8  
                     _SPI 786A                       wreg 000FE8  
                _cardType 035A  _MMC_DIRECT_TRANSFER_MODE 0359  
              _response_1 035C                _response_2 035D  
              _response_3 035E                _response_4 035F  
              _response_5 0360                      f4102 6F9E  
                    f4032 6BDC                      f4042 6D28  
                    f4052 6E44                      f4072 6EB4  
                    f4082 6EF2                      f4092 6F3A  
                    f3992 6A22                      indf0 000FEF  
                    fsr1l 000FE1                      fsr2l 000FD9  
                    btemp 0000                      prodl 000FF3  
            ?a_Command_R0 00FF              ?a_Command_R1 00F9  
            ?a_Command_R2 0037              ?a_Command_R3 0046  
        __end_of_MMC_Init 6BD8          __end_of_MMC_Read 6D24  
              used_btemp0 0001                used_btemp1 0001  
                   _crc_7 035B                     _t_lba 0033  
                   status 000FD8                   __Lparam 0037  
               _MMC_Write 6D26         __end_of_MMC_Write 6E40  
              ?_MMC_Write 00DB                   __ramtop 0600  
                 _timeout 0014                _Command_R0 6E42  
              _Command_R1 6EB2                _Command_R2 6EF0  
              _Command_R3 6F38        __end_of_Command_R0 6EB0  
      __end_of_Command_R1 6EEE        __end_of_Command_R2 6F36  
      __end_of_Command_R3 6F9C                _MmcAddCrc7 6F9C  
      __end_of_MmcAddCrc7 6FCE                  _MMC_Init 6A20  
                _MMC_Read 6BDA               ?_Command_R0 00FB  
             ?_Command_R1 00F5               ?_Command_R2 0037  
             ?_Command_R3 0042                 ?_MMC_Read 00EF  
                 postinc0 000FEE                   postinc1 000FE6  
             ?a_MMC_Write 00E1                    tblptrl 000FF6  
              ?a_MMC_Init 0040  
