

HI-TECH Software PICC-18 Macro Assembler V9.51PL2
                                                       Mon Dec 07 22:12:01 2009


     1                           	processor	18F252
     2                           	opt	pw 80
     3                           	psect	const,global,class=CODE,delta=1
     4                           	psect	text,global,reloc=2,class=CODE,delta=1
     5                           	psect	bss,global,class=RAM,space=1,delta=1
     6                           	psect	temp,global,ovrld,common,class=COMRAM,spa
      +                          ce=1,delta=1
     7                           	psect	intsave_regs,global,class=BIGRAM,space=1,
      +                          delta=1
     8  000000                     
     9  000000                     
    10  000000                     
    11  000000                     
    12  000000                     
    13  000000                     
    14  000000                     
    15  000000                     
    16  000000                     
    17  000000                     
    18  000000                     
    19  000000                     
    20  000000                     
    21  000000                     
    22  000000                     
    23  000000                     
    24  000000                     
    25  000000                     
    26  000000                     
    27  000000                     
    28  000000                     
    29  000000                     
    30  000000                     
    31  000000                     
    32  000000                     
    33  000000                     
    34  000000                     
    35  000000                     
    36  000000                     
    37  000000                     
    38  000000                     
    39  000000                     
    40  000000                     
    41  000000                     
    42  000000                     
    43  000000                     
    44  000000                     
    45  000000                     
    46  000000                     
    47  000000                     
    48  000000                     
    49  000000                     
    50  000000                     
    51  000000                     
    52  000000                     
    53  000000                     
    54  000000                     
    55  000000                     
    56  000000                     
    57  000000                     
    58  000000                     
    59  000000                     
    60  000000                     
    61  000000                     
    62  000000                     
    63  000000                     
    64  000000                     
    65  000000                     
    66  000000                     
    67  000000                     
    68  000000                     
    69  000000                     
    70  000000                     
    71  000000                     
    72  000000                     
    73  000000                     
    74  000000                     
    75  000000                     
    76  000000                     
    77  000000                     
    78  000000                     
    79  000000                     
    80  000000                     
    81  000000                     
    82  000000                     
    83  000000                     
    84  000000                     
    85  000000                     
    86  000000                     
    87  000000                     
    88  000000                     
    89  000000                     
    90  000000                     
    91  000000                     
    92  000000                     
    93  000000                     
    94  000000                     
    95  000000                     
    96  000000                     
    97                           
    98                           	psect	const
    99                           ;pic18fxx2.h: 21: static volatile near unsigned 
      +                          char TOSU @ 0xFFF;
   100                           ;pic18fxx2.h: 22: static volatile near unsigned 
      +                          char TOSH @ 0xFFE;
   101                           ;pic18fxx2.h: 23: static volatile near unsigned 
      +                          char TOSL @ 0xFFD;
   102                           ;pic18fxx2.h: 24: static volatile near unsigned 
      +                          char STKPTR @ 0xFFC;
   103                           ;pic18fxx2.h: 25: static volatile near unsigned 
      +                          char PCLATU @ 0xFFB;
   104                           ;pic18fxx2.h: 26: static volatile near unsigned 
      +                          char PCLATH @ 0xFFA;
   105                           ;pic18fxx2.h: 27: static volatile near unsigned 
      +                          char PCL @ 0xFF9;
   106                           ;pic18fxx2.h: 28: static volatile far unsigned c
      +                          har * TBLPTR @ 0xFF6;
   107                           ;pic18fxx2.h: 29: static volatile near unsigned 
      +                          char TBLPTRU @ 0xFF8;
   108                           ;pic18fxx2.h: 30: static volatile near unsigned 
      +                          char TBLPTRH @ 0xFF7;
   109                           ;pic18fxx2.h: 31: static volatile near unsigned 
      +                          char TBLPTRL @ 0xFF6;
   110                           ;pic18fxx2.h: 32: static volatile near unsigned 
      +                          char TABLAT @ 0xFF5;
   111                           ;pic18fxx2.h: 33: static volatile near unsigned 
      +                          char PRODH @ 0xFF4;
   112                           ;pic18fxx2.h: 34: static volatile near unsigned 
      +                          char PRODL @ 0xFF3;
   113                           ;pic18fxx2.h: 35: static volatile near unsigned 
      +                          char INTCON @ 0xFF2;
   114                           ;pic18fxx2.h: 36: static near unsigned char INTC
      +                          ON2 @ 0xFF1;
   115                           ;pic18fxx2.h: 37: static volatile near unsigned 
      +                          char INTCON3 @ 0xFF0;
   116                           ;pic18fxx2.h: 38: static volatile near unsigned 
      +                          char INDF0 @ 0xFEF;
   117                           ;pic18fxx2.h: 39: static volatile near unsigned 
      +                          char POSTINC0 @ 0xFEE;
   118                           ;pic18fxx2.h: 40: static volatile near unsigned 
      +                          char POSTDEC0 @ 0xFED;
   119                           ;pic18fxx2.h: 41: static volatile near unsigned 
      +                          char PREINC0 @ 0xFEC;
   120                           ;pic18fxx2.h: 42: static volatile near unsigned 
      +                          char PLUSW0 @ 0xFEB;
   121                           ;pic18fxx2.h: 43: static volatile near unsigned 
      +                          char FSR0H @ 0xFEA;
   122                           ;pic18fxx2.h: 44: static volatile near unsigned 
      +                          char FSR0L @ 0xFE9;
   123                           ;pic18fxx2.h: 45: static volatile near unsigned 
      +                          char WREG @ 0xFE8;
   124                           ;pic18fxx2.h: 46: static volatile near unsigned 
      +                          char INDF1 @ 0xFE7;
   125                           ;pic18fxx2.h: 47: static volatile near unsigned 
      +                          char POSTINC1 @ 0xFE6;
   126                           ;pic18fxx2.h: 48: static volatile near unsigned 
      +                          char POSTDEC1 @ 0xFE5;
   127                           ;pic18fxx2.h: 49: static volatile near unsigned 
      +                          char PREINC1 @ 0xFE4;
   128                           ;pic18fxx2.h: 50: static volatile near unsigned 
      +                          char PLUSW1 @ 0xFE3;
   129                           ;pic18fxx2.h: 51: static volatile near unsigned 
      +                          char FSR1H @ 0xFE2;
   130                           ;pic18fxx2.h: 52: static volatile near unsigned 
      +                          char FSR1L @ 0xFE1;
   131                           ;pic18fxx2.h: 53: static near unsigned char BSR 
      +                          @ 0xFE0;
   132                           ;pic18fxx2.h: 54: static volatile near unsigned 
      +                          char INDF2 @ 0xFDF;
   133                           ;pic18fxx2.h: 55: static volatile near unsigned 
      +                          char POSTINC2 @ 0xFDE;
   134                           ;pic18fxx2.h: 56: static volatile near unsigned 
      +                          char POSTDEC2 @ 0xFDD;
   135                           ;pic18fxx2.h: 57: static volatile near unsigned 
      +                          char PREINC2 @ 0xFDC;
   136                           ;pic18fxx2.h: 58: static volatile near unsigned 
      +                          char PLUSW2 @ 0xFDB;
   137                           ;pic18fxx2.h: 59: static volatile near unsigned 
      +                          char FSR2H @ 0xFDA;
   138                           ;pic18fxx2.h: 60: static volatile near unsigned 
      +                          char FSR2L @ 0xFD9;
   139                           ;pic18fxx2.h: 61: static volatile near unsigned 
      +                          char STATUS @ 0xFD8;
   140                           ;pic18fxx2.h: 62: static volatile near unsigned 
      +                          int TMR0 @ 0xFD6;
   141                           ;pic18fxx2.h: 63: static volatile near unsigned 
      +                          char TMR0H @ 0xFD7;
   142                           ;pic18fxx2.h: 64: static volatile near unsigned 
      +                          char TMR0L @ 0xFD6;
   143                           ;pic18fxx2.h: 65: static near unsigned char T0CO
      +                          N @ 0xFD5;
   144                           ;pic18fxx2.h: 66: static volatile near unsigned 
      +                          char OSCCON @ 0xFD3;
   145                           ;pic18fxx2.h: 67: static volatile near unsigned 
      +                          char LVDCON @ 0xFD2;
   146                           ;pic18fxx2.h: 68: static near unsigned char WDTC
      +                          ON @ 0xFD1;
   147                           ;pic18fxx2.h: 69: static volatile near unsigned 
      +                          char RCON @ 0xFD0;
   148                           ;pic18fxx2.h: 70: static volatile near unsigned 
      +                          int TMR1 @ 0xFCE;
   149                           ;pic18fxx2.h: 71: static volatile near unsigned 
      +                          char TMR1H @ 0xFCF;
   150                           ;pic18fxx2.h: 72: static volatile near unsigned 
      +                          char TMR1L @ 0xFCE;
   151                           ;pic18fxx2.h: 73: static near unsigned char T1CO
      +                          N @ 0xFCD;
   152                           ;pic18fxx2.h: 74: static volatile near unsigned 
      +                          char TMR2 @ 0xFCC;
   153                           ;pic18fxx2.h: 75: static volatile near unsigned 
      +                          char PR2 @ 0xFCB;
   154                           ;pic18fxx2.h: 76: static near unsigned char T2CO
      +                          N @ 0xFCA;
   155                           ;pic18fxx2.h: 77: static volatile near unsigned 
      +                          char SSPBUF @ 0xFC9;
   156                           ;pic18fxx2.h: 78: static volatile near unsigned 
      +                          char SSPADD @ 0xFC8;
   157                           ;pic18fxx2.h: 79: static volatile near unsigned 
      +                          char SSPSTAT @ 0xFC7;
   158                           ;pic18fxx2.h: 80: static volatile near unsigned 
      +                          char SSPCON1 @ 0xFC6;
   159                           ;pic18fxx2.h: 81: static volatile near unsigned 
      +                          char SSPCON2 @ 0xFC5;
   160                           ;pic18fxx2.h: 82: static volatile near unsigned 
      +                          int ADRES @ 0xFC3;
   161                           ;pic18fxx2.h: 83: static volatile near unsigned 
      +                          char ADRESH @ 0xFC4;
   162                           ;pic18fxx2.h: 84: static volatile near unsigned 
      +                          char ADRESL @ 0xFC3;
   163                           ;pic18fxx2.h: 85: static volatile near unsigned 
      +                          char ADCON0 @ 0xFC2;
   164                           ;pic18fxx2.h: 86: static near unsigned char ADCO
      +                          N1 @ 0xFC1;
   165                           ;pic18fxx2.h: 87: static volatile near unsigned 
      +                          int CCPR1 @ 0xFBE;
   166                           ;pic18fxx2.h: 88: static volatile near unsigned 
      +                          char CCPR1H @ 0xFBF;
   167                           ;pic18fxx2.h: 89: static volatile near unsigned 
      +                          char CCPR1L @ 0xFBE;
   168                           ;pic18fxx2.h: 90: static volatile near unsigned 
      +                          char CCP1CON @ 0xFBD;
   169                           ;pic18fxx2.h: 91: static volatile near unsigned 
      +                          int CCPR2 @ 0xFBB;
   170                           ;pic18fxx2.h: 92: static volatile near unsigned 
      +                          char CCPR2H @ 0xFBC;
   171                           ;pic18fxx2.h: 93: static volatile near unsigned 
      +                          char CCPR2L @ 0xFBB;
   172                           ;pic18fxx2.h: 94: static volatile near unsigned 
      +                          char CCP2CON @ 0xFBA;
   173                           ;pic18fxx2.h: 95: static volatile near unsigned 
      +                          int TMR3 @ 0xFB2;
   174                           ;pic18fxx2.h: 96: static volatile near unsigned 
      +                          char TMR3H @ 0xFB3;
   175                           ;pic18fxx2.h: 97: static volatile near unsigned 
      +                          char TMR3L @ 0xFB2;
   176                           ;pic18fxx2.h: 98: static near unsigned char T3CO
      +                          N @ 0xFB1;
   177                           ;pic18fxx2.h: 99: static near unsigned char SPBR
      +                          G @ 0xFAF;
   178                           ;pic18fxx2.h: 100: static volatile near unsigned
      +                           char RCREG @ 0xFAE;
   179                           ;pic18fxx2.h: 101: static volatile near unsigned
      +                           char TXREG @ 0xFAD;
   180                           ;pic18fxx2.h: 102: static volatile near unsigned
      +                           char TXSTA @ 0xFAC;
   181                           ;pic18fxx2.h: 103: static volatile near unsigned
      +                           char RCSTA @ 0xFAB;
   182                           ;pic18fxx2.h: 104: static volatile near unsigned
      +                           char EEADR @ 0xFA9;
   183                           ;pic18fxx2.h: 105: static volatile near unsigned
      +                           char EEDATA @ 0xFA8;
   184                           ;pic18fxx2.h: 106: static volatile near unsigned
      +                           char EECON2 @ 0xFA7;
   185                           ;pic18fxx2.h: 107: static volatile near unsigned
      +                           char EECON1 @ 0xFA6;
   186                           ;pic18fxx2.h: 108: static near unsigned char IPR
      +                          2 @ 0xFA2;
   187                           ;pic18fxx2.h: 109: static volatile near unsigned
      +                           char PIR2 @ 0xFA1;
   188                           ;pic18fxx2.h: 110: static near unsigned char PIE
      +                          2 @ 0xFA0;
   189                           ;pic18fxx2.h: 111: static near unsigned char IPR
      +                          1 @ 0xF9F;
   190                           ;pic18fxx2.h: 112: static volatile near unsigned
      +                           char PIR1 @ 0xF9E;
   191                           ;pic18fxx2.h: 113: static near unsigned char PIE
      +                          1 @ 0xF9D;
   192                           ;pic18fxx2.h: 114: static volatile near unsigned
      +                           char TRISC @ 0xF94;
   193                           ;pic18fxx2.h: 115: static volatile near unsigned
      +                           char TRISB @ 0xF93;
   194                           ;pic18fxx2.h: 116: static volatile near unsigned
      +                           char TRISA @ 0xF92;
   195                           ;pic18fxx2.h: 117: static volatile near unsigned
      +                           char LATC @ 0xF8B;
   196                           ;pic18fxx2.h: 118: static volatile near unsigned
      +                           char LATB @ 0xF8A;
   197                           ;pic18fxx2.h: 119: static volatile near unsigned
      +                           char LATA @ 0xF89;
   198                           ;pic18fxx2.h: 120: static volatile near unsigned
      +                           char PORTC @ 0xF82;
   199  000EE0                     _defKickName:
   200  000EE0  4B                 	db	75
   201  000EE1  49                 	db	73
   202  000EE2  43                 	db	67
   203  000EE3  4B                 	db	75
   204  000EE4  20                 	db	32
   205  000EE5  20                 	db	32
   206  000EE6  20                 	db	32
   207  000EE7  20                 	db	32
   208  000EE8  52                 	db	82
   209  000EE9  4F                 	db	79
   210  000EEA  4D                 	db	77
   211  000EEB  00                 	db	0
   212                           ;config.c: 78: const unsigned char defKickName[]
      +                           = "KICK    ROM";
   213  000EEC                     _defARName:
   214  000EEC  41                 	db	65
   215  000EED  52                 	db	82
   216  000EEE  33                 	db	51
   217  000EEF  20                 	db	32
   218  000EF0  20                 	db	32
   219  000EF1  20                 	db	32
   220  000EF2  20                 	db	32
   221  000EF3  20                 	db	32
   222  000EF4  52                 	db	82
   223  000EF5  4F                 	db	79
   224  000EF6  4D                 	db	77
   225  000EF7  00                 	db	0
   226                           ;config.c: 79: const unsigned char defARName[] =
      +                           "AR3     ROM";
   227  000EF8                     _defHDFileName:
   228  000EF8  48                 	db	72
   229  000EF9  44                 	db	68
   230  000EFA  46                 	db	70
   231  000EFB  49                 	db	73
   232  000EFC  4C                 	db	76
   233  000EFD  45                 	db	69
   234  000EFE  25                 	db	37
   235  000EFF  30                 	db	48
   236  000F00  32                 	db	50
   237  000F01  64                 	db	100
   238  000F02  48                 	db	72
   239  000F03  44                 	db	68
   240  000F04  46                 	db	70
   241  000F05  00                 	db	0
   242                           ;config.c: 80: const unsigned char defHDFileName
      +                          [] = "HDFILE%02dHDF";
   243  000F06                     _defFloppyExt:
   244  000F06  41                 	db	65
   245  000F07  44                 	db	68
   246  000F08  46                 	db	70
   247  000F09  00                 	db	0
   248                           ;config.c: 83: const unsigned char defFloppyExt[
      +                          ] = "ADF";
   249  000F0A                     _defRomExt:
   250  000F0A  52                 	db	82
   251  000F0B  4F                 	db	79
   252  000F0C  4D                 	db	77
   253  000F0D  00                 	db	0
   254                           ;config.c: 84: const unsigned char defRomExt[] =
      +                           "ROM";
   255  000F0E                     _defHardDiskExt:
   256  000F0E  48                 	db	72
   257  000F0F  44                 	db	68
   258  000F10  46                 	db	70
   259  000F11  00                 	db	0
   260                           
   261                           	psect	text
   262                           ;config.c: 85: const unsigned char defHardDiskEx
      +                          t[] = "HDF";
   263                           ;config.c: 88: void LoadConfiguration(void)
   264                           ;config.c: 89: {
   265  00743C                     _LoadConfiguration:
   266                           ;	_address assigned to ?a_GetConfigValue+0
   267  000000                     _GetConfigValue$address	set	?a_GetConfigValue
   268                           ;       param _def assigned to ?_GetConfigValue+
      +                          1
   269  000000                     _GetConfigValue$def	set	?_GetConfigValue+1
   270                           ;       param _max assigned to ?_GetConfigValue+
      +                          0
   271  000000                     _GetConfigValue$max	set	?_GetConfigValue
   272                           ;	_i assigned to ?a_GetConfigStringValue+2
   273  000000                     _GetConfigStringValue$i	set	?a_GetConfigStringVa
      +                          lue+2
   274                           ;	_c assigned to ?a_GetConfigStringValue+1
   275  000000                     _GetConfigStringValue$c	set	?a_GetConfigStringVa
      +                          lue+1
   276                           ;	_address assigned to ?a_GetConfigStringValue+0
   277  000000                     _GetConfigStringValue$address	set	?a_GetConfigSt
      +                          ringValue
   278                           ;       param _count assigned to ?_GetConfigStri
      +                          ngValue+4
   279  000000                     _GetConfigStringValue$count	set	?_GetConfigStrin
      +                          gValue+4
   280                           ;       param _def assigned to ?_GetConfigString
      +                          Value+2
   281  000000                     _GetConfigStringValue$def	set	?_GetConfigStringV
      +                          alue+2
   282                           ;       param _value assigned to ?_GetConfigStri
      +                          ngValue+0
   283  000000                     _GetConfigStringValue$value	set	?_GetConfigStrin
      +                          gValue
   284                           ;	_address assigned to ?a_SaveConfigValues+0
   285  000000                     _SaveConfigValues$address	set	?a_SaveConfigValue
      +                          s
   286                           ;       param _count assigned to ?_SaveConfigVal
      +                          ues+2
   287  000000                     _SaveConfigValues$count	set	?_SaveConfigValues+2
   288                           ;       param _values assigned to ?_SaveConfigVa
      +                          lues+0
   289  000000                     _SaveConfigValues$values	set	?_SaveConfigValues
   290                           ;	_address assigned to ?a_SaveConfigValue+0
   291  000000                     _SaveConfigValue$address	set	?a_SaveConfigValue
   292                           ;       param _value assigned to ?_SaveConfigVal
      +                          ue+0
   293  000000                     _SaveConfigValue$value	set	?_SaveConfigValue
   294                           ;	_i assigned to ?a_SaveConfiguration+0
   295  000000                     _SaveConfiguration$i	set	?a_SaveConfiguration
   296                           ;	_ts assigned to ?a_LoadConfiguration+1
   297  000000                     _LoadConfiguration$ts	set	?a_LoadConfiguration+1
   298                           ;	_i assigned to ?a_LoadConfiguration+0
   299  000000                     _LoadConfiguration$i	set	?a_LoadConfiguration
   300                           ; errata NOP at function entry point
   301  00743C  FFFF               	dw	65535
   302  00743E                     f3962:
   303  000000                     
   304                           ;config.c: 90: char i;
   305  00743E  0100               	movlb	__Lparam shr (0+8)
   306  007440  0E1E               	movlw	low _config
   307  007442  6F4F               	movwf	?_GetConfigStringValue^(__Lparam& (0+6528
      +                          0)),b
   308  007444  0E00               	movlw	high _config
   309  007446  6F50               	movwf	(?_GetConfigStringValue+1)^(__Lparam& (0+
      +                          65280)),b
   310  007448  0EE0               	movlw	low _defKickName
   311  00744A  6F51               	movwf	(?_GetConfigStringValue+2)^(__Lparam& (0+
      +                          65280)),b
   312  00744C  0E0E               	movlw	high _defKickName
   313  00744E  6F52               	movwf	(?_GetConfigStringValue+3)^(__Lparam& (0+
      +                          65280)),b
   314  007450  0E0C               	movlw	12
   315  007452  6F53               	movwf	(?_GetConfigStringValue+4)^(__Lparam& (0+
      +                          65280)),b
   316  007454  0E18               	movlw	24
   317  007456  D91C               	call	_GetConfigStringValue
   318                           ;config.c: 101: config.filter_lores = GetConfigV
      +                          alue(0x10, 0x03, 0x00);
   319  007458  0E03               	movlw	3
   320  00745A  0100               	movlb	__Lparam shr (0+8)
   321  00745C  6F4F               	movwf	?_GetConfigValue^(__Lparam& (0+65280)),b
   322  00745E  6B50               	clrf	(?_GetConfigValue+1)^(__Lparam& (0+65280))
      +                          ,b
   323  007460  0E10               	movlw	16
   324  007462  D967               	call	_GetConfigValue
   325  007464  CFE8 F02A          	movff	wreg,_config+12
   326                           ;config.c: 104: config.filter_hires = GetConfigV
      +                          alue(0x11, 0x03, 0x00);
   327  007468  0E03               	movlw	3
   328  00746A  0100               	movlb	__Lparam shr (0+8)
   329  00746C  6F4F               	movwf	?_GetConfigValue^(__Lparam& (0+65280)),b
   330  00746E  6B50               	clrf	(?_GetConfigValue+1)^(__Lparam& (0+65280))
      +                          ,b
   331  007470  0E11               	movlw	17
   332  007472  D95F               	call	_GetConfigValue
   333  007474  CFE8 F02B          	movff	wreg,_config+13
   334                           ;config.c: 107: config.memory = GetConfigValue(0
      +                          x12, 0x0F, 0x05);
   335  007478  0E0F               	movlw	15
   336  00747A  0100               	movlb	__Lparam shr (0+8)
   337  00747C  6F4F               	movwf	?_GetConfigValue^(__Lparam& (0+65280)),b
   338  00747E  0E05               	movlw	5
   339  007480  6F50               	movwf	(?_GetConfigValue+1)^(__Lparam& (0+65280)
      +                          ),b
   340  007482  0E12               	movlw	18
   341  007484  D956               	call	_GetConfigValue
   342  007486  CFE8 F02C          	movff	wreg,_config+14
   343                           ;config.c: 110: config.chipset = GetConfigValue(
      +                          0x13, 0x07, 0x00);
   344  00748A  0E07               	movlw	7
   345  00748C  0100               	movlb	__Lparam shr (0+8)
   346  00748E  6F4F               	movwf	?_GetConfigValue^(__Lparam& (0+65280)),b
   347  007490  6B50               	clrf	(?_GetConfigValue+1)^(__Lparam& (0+65280))
      +                          ,b
   348  007492  0E13               	movlw	19
   349  007494  D94E               	call	_GetConfigValue
   350  007496  CFE8 F02D          	movff	wreg,_config+15
   351                           ;config.c: 113: config.floppy_speed = GetConfigV
      +                          alue(0x14, 0x03, 0x00);
   352  00749A  0E03               	movlw	3
   353  00749C  0100               	movlb	__Lparam shr (0+8)
   354  00749E  6F4F               	movwf	?_GetConfigValue^(__Lparam& (0+65280)),b
   355  0074A0  6B50               	clrf	(?_GetConfigValue+1)^(__Lparam& (0+65280))
      +                          ,b
   356  0074A2  0E14               	movlw	20
   357  0074A4  D946               	call	_GetConfigValue
   358  0074A6  CFE8 F02E          	movff	wreg,_config+16
   359                           ;config.c: 116: config.floppy_drives = GetConfig
      +                          Value(0x15, 0x04-1, 0x00);
   360  0074AA  0E03               	movlw	3
   361  0074AC  0100               	movlb	__Lparam shr (0+8)
   362  0074AE  6F4F               	movwf	?_GetConfigValue^(__Lparam& (0+65280)),b
   363  0074B0  6B50               	clrf	(?_GetConfigValue+1)^(__Lparam& (0+65280))
      +                          ,b
   364  0074B2  0E15               	movlw	21
   365  0074B4  D93E               	call	_GetConfigValue
   366  0074B6  CFE8 F02F          	movff	wreg,_config+17
   367                           ;config.c: 119: config.ar3 = GetConfigValue(0x16
      +                          , 0x01, 0x01);
   368  0074BA  0E01               	movlw	1
   369  0074BC  0100               	movlb	__Lparam shr (0+8)
   370  0074BE  6F4F               	movwf	?_GetConfigValue^(__Lparam& (0+65280)),b
   371  0074C0  6F50               	movwf	(?_GetConfigValue+1)^(__Lparam& (0+65280)
      +                          ),b
   372  0074C2  0E16               	movlw	22
   373  0074C4  D936               	call	_GetConfigValue
   374  0074C6  CFE8 F030          	movff	wreg,_config+18
   375                           ;config.c: 122: config.scanline = GetConfigValue
      +                          (0x17, 0x03, 0x00);
   376  0074CA  0E03               	movlw	3
   377  0074CC  0100               	movlb	__Lparam shr (0+8)
   378  0074CE  6F4F               	movwf	?_GetConfigValue^(__Lparam& (0+65280)),b
   379  0074D0  6B50               	clrf	(?_GetConfigValue+1)^(__Lparam& (0+65280))
      +                          ,b
   380  0074D2  0E17               	movlw	23
   381  0074D4  D92E               	call	_GetConfigValue
   382  0074D6  CFE8 F031          	movff	wreg,_config+19
   383                           ;config.c: 125: config.ide = GetConfigValue(0x24
      +                          , 0x01, 0x00);
   384  0074DA  0E01               	movlw	1
   385  0074DC  0100               	movlb	__Lparam shr (0+8)
   386  0074DE  6F4F               	movwf	?_GetConfigValue^(__Lparam& (0+65280)),b
   387  0074E0  6B50               	clrf	(?_GetConfigValue+1)^(__Lparam& (0+65280))
      +                          ,b
   388  0074E2  0E24               	movlw	36
   389  0074E4  D926               	call	_GetConfigValue
   390  0074E6  CFE8 F032          	movff	wreg,_config+20
   391                           ;config.c: 127: i=0;
   392  0074EA  0100               	movlb	__Lparam shr (0+8)
   393  0074EC  6B40               	clrf	?a_LoadConfiguration^(__Lparam& (0+65280))
      +                          ,b
   394  0074EE                     l21:
   395                           ;config.c: 128: do
   396                           ;config.c: 129: {
   397  0074EE  0E01               	movlw	1
   398  0074F0  0100               	movlb	__Lparam shr (0+8)
   399  0074F2  6F4F               	movwf	?_GetConfigValue^(__Lparam& (0+65280)),b
   400  0074F4  6B50               	clrf	(?_GetConfigValue+1)^(__Lparam& (0+65280))
      +                          ,b
   401  0074F6  5140               	movf	?a_LoadConfiguration^(__Lparam& (0+65280))
      +                          ,w
   402  0074F8  0F25               	addlw	37
   403  0074FA  D91B               	call	_GetConfigValue
   404  0074FC  6E00               	movwf	btemp,c
   405  0074FE  0100               	movlb	__Lparam shr (0+8)
   406  007500  5140               	movf	?a_LoadConfiguration^(__Lparam& (0+65280))
      +                          ,w
   407  007502  0D27               	mullw	39
   408  007504  0E20               	movlw	low (_hdf+32)
   409  007506  24F3               	addwf	prodl,w,c
   410  007508  6EE9               	movwf	fsr0l,c
   411  00750A  0E03               	movlw	high (_hdf+32)
   412  00750C  20F4               	addwfc	prodh,w,c
   413  00750E  6EEA               	movwf	fsr0h,c
   414  007510  C000  FFEF         	movff	btemp,indf0
   415                           ;config.c: 134: sprintf(ts, defHDFileName, i);
   416  007514  0E41               	movlw	low (?a_LoadConfiguration+1)
   417  007516  6F53               	movwf	(?_sprintf+2)^(__Lparam& (0+65280)),b
   418  007518  0E00               	movlw	high (?a_LoadConfiguration+1)
   419  00751A  6F54               	movwf	(?_sprintf+3)^(__Lparam& (0+65280)),b
   420  00751C  0EF8               	movlw	low _defHDFileName
   421  00751E  6F55               	movwf	(?_sprintf+4)^(__Lparam& (0+65280)),b
   422  007520  0E0E               	movlw	high _defHDFileName
   423  007522  6F56               	movwf	(?_sprintf+5)^(__Lparam& (0+65280)),b
   424  007524  C040  F000         	movff	?a_LoadConfiguration,btemp
   425  007528  6A01               	clrf	btemp+1,c
   426  00752A  C000  F04D         	movff	btemp,?a_LoadConfiguration+13
   427  00752E  C001  F04E         	movff	btemp+1,?a_LoadConfiguration+14
   428  007532  0E4D               	movlw	low (?a_LoadConfiguration+13)
   429  007534  CFE8 F051          	movff	wreg,?_sprintf
   430  007538  0E00               	movlw	high (?a_LoadConfiguration+13)
   431  00753A  CFE8 F052          	movff	wreg,?_sprintf+1
   432  00753E  EC2F  F032         	call	_sprintf	;wreg free
   433                           ;config.c: 137: GetConfigStringValue(0x27 + (i*1
      +                          2), hdf[i].file.name, ts, 12);
   434  007542  0100               	movlb	__Lparam shr (0+8)
   435  007544  5140               	movf	?a_LoadConfiguration^(__Lparam& (0+65280))
      +                          ,w
   436  007546  0D27               	mullw	39
   437  007548  0E00               	movlw	low _hdf
   438  00754A  24F3               	addwf	prodl,w,c
   439  00754C  6F4F               	movwf	?_GetConfigStringValue^(__Lparam& (0+6528
      +                          0)),b
   440  00754E  0E03               	movlw	high _hdf
   441  007550  20F4               	addwfc	prodh,w,c
   442  007552  6F50               	movwf	(?_GetConfigStringValue+1)^(__Lparam& (0+
      +                          65280)),b
   443  007554  0E41               	movlw	low (?a_LoadConfiguration+1)
   444  007556  6F51               	movwf	(?_GetConfigStringValue+2)^(__Lparam& (0+
      +                          65280)),b
   445  007558  0E00               	movlw	high (?a_LoadConfiguration+1)
   446  00755A  6F52               	movwf	(?_GetConfigStringValue+3)^(__Lparam& (0+
      +                          65280)),b
   447  00755C  0E0C               	movlw	12
   448  00755E  6F53               	movwf	(?_GetConfigStringValue+4)^(__Lparam& (0+
      +                          65280)),b
   449  007560  5140               	movf	?a_LoadConfiguration^(__Lparam& (0+65280))
      +                          ,w
   450  007562  0D0C               	mullw	12
   451  007564  50F3               	movf	prodl,w,c
   452  007566  0F27               	addlw	39
   453  007568  D893               	call	_GetConfigStringValue
   454                           ;config.c: 142: }
   455  00756A  0100               	movlb	__Lparam shr (0+8)
   456  00756C  2B40               	incf	?a_LoadConfiguration^(__Lparam& (0+65280))
      +                          ,f,b
   457  00756E  0E01               	movlw	1
   458  007570  6540               	cpfsgt	?a_LoadConfiguration^(__Lparam& (0+65280
      +                          )),b
   459  007572  D7BD               	goto	l21
   460                           ;config.c: 144: }
   461  007574  0C01               	retlw	1
   462  007576  FFFF               	dw	65535	; Nop inserted for errata
   463  007578  D762               	goto	f3962
   464  00757A                     __end_of_LoadConfiguration:
   465                           ;config.c: 148: void SaveConfiguration(void)
   466                           ;config.c: 149: {
   467  00757A                     _SaveConfiguration:
   468                           ; errata NOP at function entry point
   469  00757A  FFFF               	dw	65535
   470  00757C                     f4012:
   471  000000                     
   472                           ;config.c: 150: char i;
   473  00757C  0100               	movlb	__Lparam shr (0+8)
   474  00757E  0E1E               	movlw	low _config
   475  007580  6F47               	movwf	?_SaveConfigValues^(__Lparam& (0+65280)),
      +                          b
   476  007582  0E00               	movlw	high _config
   477  007584  6F48               	movwf	(?_SaveConfigValues+1)^(__Lparam& (0+6528
      +                          0)),b
   478  007586  0E0C               	movlw	12
   479  007588  6F49               	movwf	(?_SaveConfigValues+2)^(__Lparam& (0+6528
      +                          0)),b
   480  00758A  0E18               	movlw	24
   481  00758C  D86B               	call	_SaveConfigValues
   482                           ;config.c: 156: SaveConfigValue(0x10, config.fil
      +                          ter_lores);
   483  00758E  C02A  F04B         	movff	_config+12,?_SaveConfigValue
   484  007592  0E10               	movlw	16
   485  007594  D849               	call	_SaveConfigValue
   486                           ;config.c: 159: SaveConfigValue(0x11, config.fil
      +                          ter_hires);
   487  007596  C02B  F04B         	movff	_config+13,?_SaveConfigValue
   488  00759A  0E11               	movlw	17
   489  00759C  D845               	call	_SaveConfigValue
   490                           ;config.c: 162: SaveConfigValue(0x12, config.mem
      +                          ory);
   491  00759E  C02C  F04B         	movff	_config+14,?_SaveConfigValue
   492  0075A2  0E12               	movlw	18
   493  0075A4  D841               	call	_SaveConfigValue
   494                           ;config.c: 165: SaveConfigValue(0x13, config.chi
      +                          pset);
   495  0075A6  C02D  F04B         	movff	_config+15,?_SaveConfigValue
   496  0075AA  0E13               	movlw	19
   497  0075AC  D83D               	call	_SaveConfigValue
   498                           ;config.c: 168: SaveConfigValue(0x14, config.flo
      +                          ppy_speed);
   499  0075AE  C02E  F04B         	movff	_config+16,?_SaveConfigValue
   500  0075B2  0E14               	movlw	20
   501  0075B4  D839               	call	_SaveConfigValue
   502                           ;config.c: 171: SaveConfigValue(0x15, config.flo
      +                          ppy_drives);
   503  0075B6  C02F  F04B         	movff	_config+17,?_SaveConfigValue
   504  0075BA  0E15               	movlw	21
   505  0075BC  D835               	call	_SaveConfigValue
   506                           ;config.c: 174: SaveConfigValue(0x16, config.ar3
      +                          );
   507  0075BE  C030  F04B         	movff	_config+18,?_SaveConfigValue
   508  0075C2  0E16               	movlw	22
   509  0075C4  D831               	call	_SaveConfigValue
   510                           ;config.c: 177: SaveConfigValue(0x17, config.sca
      +                          nline);
   511  0075C6  C031  F04B         	movff	_config+19,?_SaveConfigValue
   512  0075CA  0E17               	movlw	23
   513  0075CC  D82D               	call	_SaveConfigValue
   514                           ;config.c: 180: SaveConfigValue(0x24, config.ide
      +                          );
   515  0075CE  C032  F04B         	movff	_config+20,?_SaveConfigValue
   516  0075D2  0E24               	movlw	36
   517  0075D4  D829               	call	_SaveConfigValue
   518                           ;config.c: 182: i=0;
   519  0075D6  0100               	movlb	__Lparam shr (0+8)
   520  0075D8  6B46               	clrf	?a_SaveConfiguration^(__Lparam& (0+65280))
      +                          ,b
   521  0075DA                     l25:
   522                           ;config.c: 183: do
   523                           ;config.c: 184: {
   524  0075DA  0100               	movlb	__Lparam shr (0+8)
   525  0075DC  5146               	movf	?a_SaveConfiguration^(__Lparam& (0+65280))
      +                          ,w
   526  0075DE  0D27               	mullw	39
   527  0075E0  0E20               	movlw	low (_hdf+32)
   528  0075E2  24F3               	addwf	prodl,w,c
   529  0075E4  6EE9               	movwf	fsr0l,c
   530  0075E6  0E03               	movlw	high (_hdf+32)
   531  0075E8  20F4               	addwfc	prodh,w,c
   532  0075EA  6EEA               	movwf	fsr0h,c
   533  0075EC  50EF               	movf	indf0,w,c
   534  0075EE  6F4B               	movwf	?_SaveConfigValue^(__Lparam& (0+65280)),b
   535  0075F0  5146               	movf	?a_SaveConfiguration^(__Lparam& (0+65280))
      +                          ,w
   536  0075F2  0F25               	addlw	37
   537  0075F4  D819               	call	_SaveConfigValue
   538                           ;config.c: 188: SaveConfigValues(0x27 + (i*12), 
      +                          hdf[i].file.name, 12);
   539  0075F6  0100               	movlb	__Lparam shr (0+8)
   540  0075F8  5146               	movf	?a_SaveConfiguration^(__Lparam& (0+65280))
      +                          ,w
   541  0075FA  0D27               	mullw	39
   542  0075FC  0E00               	movlw	low _hdf
   543  0075FE  24F3               	addwf	prodl,w,c
   544  007600  6F47               	movwf	?_SaveConfigValues^(__Lparam& (0+65280)),
      +                          b
   545  007602  0E03               	movlw	high _hdf
   546  007604  20F4               	addwfc	prodh,w,c
   547  007606  6F48               	movwf	(?_SaveConfigValues+1)^(__Lparam& (0+6528
      +                          0)),b
   548  007608  0E0C               	movlw	12
   549  00760A  6F49               	movwf	(?_SaveConfigValues+2)^(__Lparam& (0+6528
      +                          0)),b
   550  00760C  5146               	movf	?a_SaveConfiguration^(__Lparam& (0+65280))
      +                          ,w
   551  00760E  0D0C               	mullw	12
   552  007610  50F3               	movf	prodl,w,c
   553  007612  0F27               	addlw	39
   554  007614  D827               	call	_SaveConfigValues
   555                           ;config.c: 189: }
   556  007616  0100               	movlb	__Lparam shr (0+8)
   557  007618  2B46               	incf	?a_SaveConfiguration^(__Lparam& (0+65280))
      +                          ,f,b
   558  00761A  0E01               	movlw	1
   559  00761C  6546               	cpfsgt	?a_SaveConfiguration^(__Lparam& (0+65280
      +                          )),b
   560  00761E  D7DD               	goto	l25
   561                           ;config.c: 191: }
   562  007620  0C01               	retlw	1
   563  007622  FFFF               	dw	65535	; Nop inserted for errata
   564  007624  D7AB               	goto	f4012
   565  007626                     __end_of_SaveConfiguration:
   566                           ;config.c: 193: void SaveConfigValue(unsigned ch
      +                          ar address, unsigned char value)
   567                           ;config.c: 194: {
   568  007626  004B               	dw	?_SaveConfigValue
   569  007628                     _SaveConfigValue:
   570                           ; errata NOP at function entry point
   571  007628  FFFF               	dw	65535
   572  00762A                     f4042:
   573  000000                     
   574                           ;_address stored from wreg
   575  00762A  0100               	movlb	__Lparam shr (0+8)
   576  00762C  6F4C               	movwf	?a_SaveConfigValue^(__Lparam& (0+65280)),
      +                          b
   577                           ;config.c: 195: if (value != eeprom_read(address
      +                          ))
   578  00762E  514C               	movf	?a_SaveConfigValue^(__Lparam& (0+65280)),w
   579  007630  6F57               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   580  007632  6B58               	clrf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   581  007634  ECB5  F03E         	call	_eeprom_read	;wreg free
   582  007638  6E00               	movwf	btemp,c
   583  00763A  C000  F002         	movff	btemp,btemp+2
   584  00763E  6A03               	clrf	btemp+3,c
   585  007640  C04B  FFE8         	movff	?_SaveConfigValue,wreg
   586  007644  1802               	xorwf	btemp+2,w,c
   587  007646  E101               	bnz	u35
   588  007648  5203               	movf	btemp+3,f,c
   589  00764A                     u35:
   590  00764A  E008               	bz	l27
   591                           ;config.c: 196: { eeprom_write(address,value); }
   592  00764C  0100               	movlb	__Lparam shr (0+8)
   593  00764E  514C               	movf	?a_SaveConfigValue^(__Lparam& (0+65280)),w
   594  007650  6F4D               	movwf	?_eeprom_write^(__Lparam& (0+65280)),b
   595  007652  6B4E               	clrf	(?_eeprom_write+1)^(__Lparam& (0+65280)),b
   596  007654  514B               	movf	?_SaveConfigValue^(__Lparam& (0+65280)),w
   597  007656  6F4F               	movwf	(?_eeprom_write+2)^(__Lparam& (0+65280)),
      +                          b
   598  007658  EC8B  F03E         	call	_eeprom_write	;wreg free
   599  00765C                     l27:
   600                           ;config.c: 197: }
   601  00765C  0012               	return	
   602  00765E  FFFF               	dw	65535	; Nop inserted for errata
   603  007660  D7E4               	goto	f4042
   604  007662                     __end_of_SaveConfigValue:
   605                           ;config.c: 199: void SaveConfigValues(unsigned c
      +                          har address, unsigned char *values, unsigned cha
      +                          r count)
   606                           ;config.c: 200: {
   607  007662  0047               	dw	?_SaveConfigValues
   608  007664                     _SaveConfigValues:
   609                           ; errata NOP at function entry point
   610  007664  FFFF               	dw	65535
   611  007666                     f4072:
   612  000000                     
   613                           ;_address stored from wreg
   614  007666  0100               	movlb	__Lparam shr (0+8)
   615  007668  6F4A               	movwf	?a_SaveConfigValues^(__Lparam& (0+65280))
      +                          ,b
   616  00766A                     l31:
   617                           ;config.c: 201: do
   618                           ;config.c: 202: { SaveConfigValue(address++, *(v
      +                          alues++)); }
   619  00766A  C047  FFE9         	movff	?_SaveConfigValues,fsr0l
   620  00766E  C048  FFEA         	movff	?_SaveConfigValues+1,fsr0h
   621  007672  50EF               	movf	indf0,w,c
   622  007674  0100               	movlb	__Lparam shr (0+8)
   623  007676  6F4B               	movwf	?_SaveConfigValue^(__Lparam& (0+65280)),b
   624  007678  4B47               	infsnz	?_SaveConfigValues^(__Lparam& (0+65280))
      +                          ,f,b
   625  00767A  2B48               	incf	(?_SaveConfigValues+1)^(__Lparam& (0+65280
      +                          )),f,b
   626  00767C  2B4A               	incf	?a_SaveConfigValues^(__Lparam& (0+65280)),
      +                          f,b
   627  00767E  054A               	decf	?a_SaveConfigValues^(__Lparam& (0+65280)),
      +                          w
   628  007680  DFD3               	call	_SaveConfigValue
   629                           ;config.c: 203: while(--count);
   630  007682  0100               	movlb	__Lparam shr (0+8)
   631  007684  2F49               	decfsz	(?_SaveConfigValues+2)^(__Lparam& (0+652
      +                          80)),f,b
   632  007686  D7F1               	goto	l31
   633                           ;config.c: 204: }
   634  007688  0012               	return	
   635  00768A  FFFF               	dw	65535	; Nop inserted for errata
   636  00768C  D7EC               	goto	f4072
   637  00768E                     __end_of_SaveConfigValues:
   638                           ;config.c: 207: void GetConfigStringValue(unsign
      +                          ed char address, unsigned char* value, const uns
      +                          igned char *def, unsigned char count)
   639                           ;config.c: 208: {
   640  00768E  004F               	dw	?_GetConfigStringValue
   641  007690                     _GetConfigStringValue:
   642                           ; errata NOP at function entry point
   643  007690  FFFF               	dw	65535
   644  007692                     f4082:
   645  000000                     
   646                           ;_address stored from wreg
   647  007692  0100               	movlb	__Lparam shr (0+8)
   648  007694  6F54               	movwf	?a_GetConfigStringValue^(__Lparam& (0+652
      +                          80)),b
   649                           ;config.c: 209: unsigned char i;
   650  007696  6B56               	clrf	(?a_GetConfigStringValue+2)^(__Lparam& (0+
      +                          65280)),b
   651  007698                     l36:
   652  007698  0100               	movlb	__Lparam shr (0+8)
   653  00769A  5153               	movf	(?_GetConfigStringValue+4)^(__Lparam& (0+6
      +                          5280)),w
   654  00769C  5D56               	subwf	(?a_GetConfigStringValue+2)^(__Lparam& (0
      +                          +65280)),w
   655  00769E  E231               	bc	l34
   656                           ;config.c: 213: {
   657  0076A0  5154               	movf	?a_GetConfigStringValue^(__Lparam& (0+6528
      +                          0)),w
   658  0076A2  2556               	addwf	(?a_GetConfigStringValue+2)^(__Lparam& (0
      +                          +65280)),w
   659  0076A4  6F57               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   660  0076A6  6B58               	clrf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   661  0076A8  3758               	rlcf	(?_eeprom_read+1)^(__Lparam& (0+65280)),f,
      +                          b
   662  0076AA  ECB5  F03E         	call	_eeprom_read	;wreg free
   663  0076AE  0100               	movlb	__Lparam shr (0+8)
   664  0076B0  6F55               	movwf	(?a_GetConfigStringValue+1)^(__Lparam& (0
      +                          +65280)),b
   665                           ; _value loaded to fsr1
   666  0076B2  C04F  FFE1         	movff	?_GetConfigStringValue,fsr1l
   667  0076B6  C050  FFE2         	movff	?_GetConfigStringValue+1,fsr1h
   668                           ;config.c: 216: if ( 0==c || (c>=32 && c<=127))
   669  0076BA  5155               	movf	(?a_GetConfigStringValue+1)^(__Lparam& (0+
      +                          65280)),w
   670  0076BC  E006               	bz	u80
   671  0076BE  0E1F               	movlw	31
   672  0076C0  6555               	cpfsgt	(?a_GetConfigStringValue+1)^(__Lparam& (
      +                          0+65280)),b
   673  0076C2  D00D               	goto	l37
   674  0076C4  0E80               	movlw	128
   675  0076C6  6155               	cpfslt	(?a_GetConfigStringValue+1)^(__Lparam& (
      +                          0+65280)),b
   676  0076C8  D00A               	goto	l37
   677  0076CA                     u80:
   678                           ;config.c: 217: { value[i] = c; }
   679  0076CA  0100               	movlb	__Lparam shr (0+8)
   680  0076CC  5156               	movf	(?a_GetConfigStringValue+2)^(__Lparam& (0+
      +                          65280)),w
   681  0076CE  24E1               	addwf	fsr1l,w,c
   682  0076D0  6EE9               	movwf	fsr0l,c
   683  0076D2  0E00               	movlw	0
   684  0076D4  20E2               	addwfc	fsr1h,w,c
   685  0076D6  6EEA               	movwf	fsr0h,c
   686  0076D8  C055  FFEF         	movff	?a_GetConfigStringValue+1,indf0
   687  0076DC  D00F               	goto	l38
   688  0076DE                     l37:
   689                           ;config.c: 218: else
   690  0076DE  CFE1 F05D          	movff	fsr1l,?_strncpy
   691  0076E2  CFE2 F05E          	movff	fsr1h,?_strncpy+1
   692  0076E6  C051  F05F         	movff	?_GetConfigStringValue+2,?_strncpy+2
   693  0076EA  C052  F060         	movff	?_GetConfigStringValue+3,?_strncpy+3
   694  0076EE  0100               	movlb	__Lparam shr (0+8)
   695  0076F0  5153               	movf	(?_GetConfigStringValue+4)^(__Lparam& (0+6
      +                          5280)),w
   696  0076F2  6F61               	movwf	(?_strncpy+4)^(__Lparam& (0+65280)),b
   697  0076F4  6B62               	clrf	(?_strncpy+5)^(__Lparam& (0+65280)),b
   698  0076F6  EC4A  F03D         	call	_strncpy	;wreg free
   699                           ;config.c: 225: break;
   700  0076FA  D003               	goto	l34
   701  0076FC                     l38:
   702  0076FC  0100               	movlb	__Lparam shr (0+8)
   703  0076FE  2B56               	incf	(?a_GetConfigStringValue+2)^(__Lparam& (0+
      +                          65280)),f,b
   704  007700  D7CB               	goto	l36
   705  007702                     l34:
   706                           ;config.c: 226: }
   707                           ; _value loaded to fsr1
   708  007702  C04F  FFE1         	movff	?_GetConfigStringValue,fsr1l
   709  007706  C050  FFE2         	movff	?_GetConfigStringValue+1,fsr1h
   710  00770A  50E7               	movf	indf1,w,c
   711  00770C  E10E               	bnz	l39
   712                           ;config.c: 231: { strncpy(value,def,count); }
   713  00770E  CFE1 F05D          	movff	fsr1l,?_strncpy
   714  007712  CFE2 F05E          	movff	fsr1h,?_strncpy+1
   715  007716  C051  F05F         	movff	?_GetConfigStringValue+2,?_strncpy+2
   716  00771A  C052  F060         	movff	?_GetConfigStringValue+3,?_strncpy+3
   717  00771E  0100               	movlb	__Lparam shr (0+8)
   718  007720  5153               	movf	(?_GetConfigStringValue+4)^(__Lparam& (0+6
      +                          5280)),w
   719  007722  6F61               	movwf	(?_strncpy+4)^(__Lparam& (0+65280)),b
   720  007724  6B62               	clrf	(?_strncpy+5)^(__Lparam& (0+65280)),b
   721  007726  EC4A  F03D         	call	_strncpy	;wreg free
   722  00772A                     l39:
   723                           ;config.c: 232: }
   724  00772A  0012               	return	
   725  00772C  FFFF               	dw	65535	; Nop inserted for errata
   726  00772E  D7B1               	goto	f4082
   727  007730                     __end_of_GetConfigStringValue:
   728                           ;config.c: 234: unsigned char GetConfigValue(uns
      +                          igned char address, unsigned char max, unsigned 
      +                          char def)
   729                           ;config.c: 235: {
   730  007730  004F               	dw	?_GetConfigValue
   731  007732                     _GetConfigValue:
   732                           ; errata NOP at function entry point
   733  007732  FFFF               	dw	65535
   734  007734                     f4102:
   735  000000                     
   736                           ;_address stored from wreg
   737  007734  0100               	movlb	__Lparam shr (0+8)
   738  007736  6F51               	movwf	?a_GetConfigValue^(__Lparam& (0+65280)),b
   739                           ;config.c: 236: if(max < eeprom_read(address))
   740  007738  5151               	movf	?a_GetConfigValue^(__Lparam& (0+65280)),w
   741  00773A  6F57               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   742  00773C  6B58               	clrf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   743  00773E  ECB5  F03E         	call	_eeprom_read	;wreg free
   744  007742  6E00               	movwf	btemp,c
   745  007744  C000  F002         	movff	btemp,btemp+2
   746  007748  6A03               	clrf	btemp+3,c
   747  00774A  C04F  F000         	movff	?_GetConfigValue,btemp
   748  00774E  6A01               	clrf	btemp+1,c
   749  007750  5001               	movf	btemp+1,w,c
   750  007752  0A80               	xorlw	128
   751  007754  6E04               	movwf	btemp+4,c
   752  007756  5003               	movf	btemp+3,w,c
   753  007758  0A80               	xorlw	128
   754  00775A  5C04               	subwf	btemp+4,w,c
   755  00775C  E102               	bnz	u115
   756  00775E  5002               	movf	btemp+2,w,c
   757  007760  5C00               	subwf	btemp,w,c
   758  007762                     u115:
   759  007762  E203               	bc	l41
   760                           ;config.c: 237: { return def; }
   761  007764  0100               	movlb	__Lparam shr (0+8)
   762  007766  5150               	movf	(?_GetConfigValue+1)^(__Lparam& (0+65280))
      +                          ,w
   763  007768  D006               	goto	l40
   764  00776A                     l41:
   765                           ;config.c: 238: else
   766  00776A  0100               	movlb	__Lparam shr (0+8)
   767  00776C  5151               	movf	?a_GetConfigValue^(__Lparam& (0+65280)),w
   768  00776E  6F57               	movwf	?_eeprom_read^(__Lparam& (0+65280)),b
   769  007770  6B58               	clrf	(?_eeprom_read+1)^(__Lparam& (0+65280)),b
   770  007772  ECB5  F03E         	call	_eeprom_read	;wreg free
   771                           ;config.c: 240: }
   772  007776                     l40:
   773  007776  0012               	return	
   774  007778  FFFF               	dw	65535	; Nop inserted for errata
   775  00777A  D7DC               	goto	f4102
   776  00777C                     __end_of_GetConfigValue:
   777  000000                     
   778  000000                     
   779  000000                     
   780  000000                     
   781  000000                     
   782  000000                     
   783  000000                     
   784  000000                     
   785  000000                     
   786  000000                     
   787  000000                     
   788  000000                     
   789  000000                     
   790  000000                     
   791  000000                     
   792  000000                     
   793  000000                     
   794  000000                     
   795  000000                     
   796  000000                     
   797  000000                     
   798  000000                     
   799  000000                     
   800  000000                     
   801  000000                     
   802  000000                     
   803  000000                     
   804  000000                     
   805  000000                     
   806  000000                     
   807  000000                     
   808  000000                     
   809  000000                     
   810  000000                     
   811  000000                     
   812  000000                     
   813  000000                     
   814  000000                     
   815  000000                     
   816  000000                     
   817  000000                     
   818  000000                     
   819  000000                     
   820  000000                     
   821  000000                     
   822  000000                     
   823  000000                     
   824  000000                     
   825  000000                     
   826  000000                     
   827  000000                     
   828  000000                     
   829  000000                     
   830  000000                     
   831  000000                     
   832  000000                     
   833  000000                     
   834  000000                     
   835  000000                     
   836  000000                     
   837  000000                     
   838  000000                     
   839  000000                     
   840  000000                     
   841  000000                     
   842  000000                     
   843  000000                     
   844  000000                     
   845  000000                     
   846  000000                     
   847  000000                     
   848  000000                     
   849  000000                     
   850  000000                     
   851  000000                     
   852  000000                     
   853  000000                     
   854  000000                     
   855  000000                     
   856  000000                     
   857  000000                     
   858  000000                     
   859  000000                     
   860  000000                     
   861  000000                     
   862  000000                     
   863  000000                     
   864  000000                     
   865  000000                     
   866  000000                     
   867  000000                     
   868  000000                     
   869  000000                     
   870  000000                     
   871  000000                     
   872  000000                     
   873  000000                     
   874  000000                     
   875  000000                     
   876  000000                     
   877  000000                     
   878  000000                     
   879  000000                     
   880  000000                     
   881  000000                     
   882  000000                     
   883  000000                     
   884  000000                     
   885  000000                     
   886  000000                     
   887  000000                     
   888  000000                     
   889  000000                     
   890  000000                     
   891  000000                     
   892  000000                     
   893  000000                     
   894  000000                     
   895  000000                     
   896  000000                     
   897  000000                     
   898  000000                     
   899  000000                     
   900  000000                     
   901  000000                     
   902  000000                     
   903  000000                     
   904  000000                     
   905  000000                     
   906  000000                     
   907  000000                     
   908  000000                     
   909  000000                     
   910  000000                     
   911  000000                     
   912  000000                     
   913  000000                     
   914  000000                     
   915  000000                     
   916  000000                     
   917  000000                     
   918  000000                     
   919  000000                     
   920  000000                     
   921  000000                     
   922  000000                     
   923  000000                     
   924  000000                     
   925  000000                     
   926  000000                     
   927  000000                     
   928  000000                     
   929  000000                     
   930  000000                     
   931  000000                     
   932  000000                     
   933  000000                     
   934  000000                     
   935  000000                     
   936  000000                     
   937  000000                     
   938  000000                     
   939  000000                     
   940  000000                     
   941  000000                     
   942  000000                     
   943  000000                     
   944  000000                     
   945  000000                     
   946  000000                     
   947  000000                     
   948  000000                     
   949  000000                     
   950  000000                     
   951  000000                     
   952  000000                     
   953  000000                     
   954  000000                     
   955  000000                     
   956  000000                     
   957  000000                     
   958  000000                     
   959  000000                     
   960  000000                     
   961  000000                     
   962  000000                     
   963  000000                     
   964  000000                     
   965  000000                     
   966  000000                     
   967  000000                     
   968  000000                     
   969  000000                     
   970  000000                     
   971  000000                     
   972  000000                     
   973  000000                     
   974  000000                     
   975  000000                     
   976  000000                     
   977  000000                     
   978  000000                     
   979  000000                     
   980  000000                     
   981  000000                     
   982  000000                     
   983  000000                     
   984  000000                     
   985  000000                     
   986  000000                     
   987  000000                     
   988  000000                     
   989  000000                     
   990  000000                     
   991  000000                     
   992  000000                     
   993  000000                     
   994  000000                     
   995  000000                     
   996  000000                     
   997  000000                     
   998  000000                     
   999  000000                     
  1000  000000                     
  1001  000000                     
  1002  000000                     
  1003  000000                     
  1004  000000                     
  1005  000000                     
  1006  000000                     
  1007  000000                     
  1008  000000                     
  1009  000000                     
  1010  000000                     
  1011  000000                     
  1012  000000                     
  1013  000000                     
  1014  000000                     
  1015  000000                     
  1016  000000                     
  1017  000000                     
  1018  000000                     
  1019  000000                     
  1020  000000                     
  1021  000000                     
  1022  000000                     
  1023  000000                     
  1024  000000                     
  1025  000000                     
  1026  000000                     
  1027  000000                     
  1028  000000                     
  1029  000000                     
  1030  000000                     
  1031  000000                     
  1032  000000                     
  1033  000000                     
  1034  000000                     
  1035  000000                     
  1036  000000                     
  1037  000000                     
  1038  000000                     
  1039  000000                     
  1040  000000                     
  1041  000000                     
  1042  000000                     
  1043  000000                     
  1044  000000                     
  1045  000000                     
  1046  000000                     
  1047  000000                     
  1048  000000                     
  1049  000000                     
  1050  000000                     
  1051  000000                     
  1052  000000                     
  1053  000000                     
  1054  000000                     
  1055  000000                     
  1056  000000                     
  1057  000000                     
  1058  000000                     
  1059  000000                     
  1060  000000                     
  1061  000000                     
  1062  000000                     
  1063  000000                     
  1064  000000                     
  1065  000000                     
  1066  000000                     
  1067  000000                     
  1068  000000                     
  1069  000000                     
  1070  000000                     
  1071  000000                     
  1072  000000                     
  1073  000000                     
  1074  000000                     
  1075  000000                     
  1076  000000                     
  1077  000000                     
  1078  000000                     
  1079  000000                     
  1080  000000                     
  1081  000000                     
  1082  000000                     
  1083  000000                     
  1084  000000                     
  1085  000000                     
  1086  000000                     
  1087  000000                     
  1088  000000                     
  1089  000000                     
  1090  000000                     
  1091  000000                     
  1092  000000                     
  1093  000000                     
  1094  000000                     
  1095  000000                     
  1096  000000                     
  1097  000000                     
  1098  000000                     
  1099  000000                     
  1100  000000                     
  1101  000000                     
  1102  000000                     
  1103  000000                     
  1104  000000                     
  1105  000000                     
  1106  000000                     
  1107  000000                     
  1108  000000                     
  1109  000000                     
  1110  000000                     
  1111  000000                     
  1112  000000                     
  1113  000000                     
  1114  000000                     
  1115  000000                     
  1116  000000                     
  1117  000000                     
  1118  000000                     
  1119  000000                     
  1120  000000                     
  1121  000000                     
  1122  000000                     
  1123  000000                     
  1124  000000                     
  1125  000000                     
  1126  000000                     
  1127  000000                     
  1128  000000                     
  1129  000000                     
  1130  000000                     
  1131  000000                     
  1132  000000                     
  1133  000000                     
  1134  000000                     
  1135  000000                     
  1136  000000                     
  1137  000000                     
  1138  000000                     
  1139  000000                     
  1140  000000                     
  1141  000000                     
  1142  000000                     
  1143  000000                     
  1144  000000                     
  1145  000000                     
  1146  000000                     
  1147  000000                     
  1148  000000                     
  1149  000000                     
  1150  000000                     
  1151  000000                     
  1152  000000                     
  1153  000000                     
  1154  000000                     
  1155  000000                     
  1156  000000                     
  1157  000000                     
  1158  000000                     
  1159  000000                     
  1160  000000                     
  1161  000000                     
  1162  000000                     
  1163  000000                     
  1164  000000                     
  1165                           
  1166                           	psect	bss
  1167  00001E                     _config:
  1168  00001E                     	ds	21
  1169                           
  1170                           	psect	temp
  1171  000000                     btemp:
  1172  000000                     	ds	5
  1173                           prodh	equ	0xFF4
  1174                           prodl	equ	0xFF3
  1175                           indf0	equ	0xFEF
  1176                           fsr0h	equ	0xFEA
  1177                           fsr0l	equ	0xFE9
  1178                           wreg	equ	0xFE8
  1179                           indf1	equ	0xFE7
  1180                           fsr1h	equ	0xFE2
  1181                           fsr1l	equ	0xFE1


HI-TECH Software PICC-18 Macro Assembler V9.51PL2
Symbol Table                                           Mon Dec 07 22:12:01 2009

                          l21 74EE                            l31 766A  
                          l40 7776                            l41 776A  
                          l25 75DA                            l34 7702  
                          l27 765C                            l36 7698  
                          l37 76DE                            l38 76FC  
                          l39 772A                            u35 764A  
                          u80 76CA                           u115 7762  
                         _hdf 0300                           wreg 000FE8  
               ?_eeprom_write 004D              _SaveConfigValues 7664  
                        f4012 757C                          f4102 7734  
                        f4042 762A                          f4072 7666  
                        f4082 7692                     _defARName 0EEC  
                        f3962 743E                          f3963 004F  
__end_of_GetConfigStringValue 7730             ?_SaveConfigValues 0047  
      ?a_GetConfigStringValue 0054                          fsr0h 000FEA  
                        indf0 000FEF                          fsr0l 000FE9  
                        indf1 000FE7                          fsr1l 000FE1  
                        btemp 0000                          prodh 000FF4  
                        prodl 000FF3              ?a_GetConfigValue 0051  
                   _defRomExt 0F0A             _LoadConfiguration 743C  
                  used_btemp0 0001                    used_btemp1 0001  
                  used_btemp2 0001                    used_btemp3 0001  
                  used_btemp4 0001             _SaveConfiguration 757A  
              _defHardDiskExt 0F0E                   _eeprom_read 7D6A  
                       status 000FD8                 _defHDFileName 0EF8  
                     __Lparam 0037                  ?_eeprom_read 0057  
              _GetConfigValue 7732               _SaveConfigValue 7628  
             ?_GetConfigValue 004F                       __ramtop 0600  
            ?_SaveConfigValue 004B                       _sprintf 645E  
                    ?_sprintf 0051                       _strncpy 7A94  
                    ?_strncpy 005D                  _defFloppyExt 0F06  
      __end_of_GetConfigValue 777C      __end_of_SaveConfigValues 768E  
         ?a_LoadConfiguration 0040           ?a_SaveConfiguration 0046  
                      _config 001E            ?a_SaveConfigValues 004A  
                 _defKickName 0EE0                  _eeprom_write 7D16  
     __end_of_SaveConfigValue 7662             ?a_SaveConfigValue 004C  
        _GetConfigStringValue 7690     __end_of_LoadConfiguration 757A  
       ?_GetConfigStringValue 004F     __end_of_SaveConfiguration 7626  
